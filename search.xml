<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【从零到一手撕脚手架 | 第四节】加速开发效率 使用plop生成开发模板 使用mock进行数据模拟</title>
      <link href="/2023/03/27/sv3-template/4-increaseEfficiency/"/>
      <url>/2023/03/27/sv3-template/4-increaseEfficiency/</url>
      
        <content type="html"><![CDATA[<h1 id="【从零到一手撕脚手架-第四节】加速开发效率-使用plop生成开发模板-使用mock进行数据模拟"><a href="#【从零到一手撕脚手架-第四节】加速开发效率-使用plop生成开发模板-使用mock进行数据模拟" class="headerlink" title="【从零到一手撕脚手架 | 第四节】加速开发效率 使用plop生成开发模板 使用mock进行数据模拟"></a>【从零到一手撕脚手架 | 第四节】加速开发效率 使用plop生成开发模板 使用mock进行数据模拟</h1><blockquote><p>Hello大家好我是⛄，之前我们已经配置了脚手架需要具备的基本功能：代码封装，团队协作规范等。但是可能我们有其他的需求，比如说我们想快速生成几个基础的组件模板我们可以使用Plop或者使用文件写入实现。比如我们不想等后端同学的接口，可以直接使用mock模拟数据生成。</p><ul><li><strong>GitHub</strong>：<a href="https://github.com/LonelySnowman/sv3-template">LonelySnowman&#x2F;sv3-template</a></li><li><strong>官方文档</strong>：<a href="https://sv3-docs.snowhouse.space/">SV3-Family | Vue3</a></li></ul></blockquote><ul><li>前置知识：Vue全家桶，了解Vite或WebPack等构建工具，Node.js</li><li>您将收获到：从零到一构建一个规范的 Vue3+TS+Vite 脚手架</li></ul><h2 id="配置-plop"><a href="#配置-plop" class="headerlink" title="配置 plop"></a>配置 plop</h2><ul><li>想一想平时我们是如何新建一个组件的，右键-&gt;新建文件-&gt;命名文件-&gt;编写组件代码，或者直接使用命令行生成文件，并且这些组件都会编写一些重复的内容，这些内容在新建时就具备，我们平常可能就直接<code>ctrl+c</code>、<code>ctrl+v</code>，还是有一点繁琐的😓。有没有一种方法能快速生成各种组件的模板呢？接下来就要用到我们的<code>plop</code>啦😀，它可以帮助我们快速生成开发模板，提高效率。</li><li><strong>plop是一种“微型生成器框架”</strong>。 这是因为它提供了一种快速生成代码或其他文本文件的便捷方式，同时又保持了很小的体积。我们总是在代码中创建不同的结构和模式，如路由、控制器、组件、工具类等。这些模式会随着时间的变化不断地被改变和优化，所以当你想要去创建一个新的已经存在的模版时，你很难在你的项目&#x2F;代码中找到对于当前需要创建的模板的最佳实践，这时候就轮到 plop 大展身手了。使用 plop, 你能够随时在项目中更新某种特定代码模式的最佳实践，你只需要在命令行中键入 plop 就能快速地运行代码。这不仅能避免从整个代码库中寻找最佳模板然后复制的过程，而且又能正确高效地创建文件。</li><li>官方文档：<a href="https://plopjs.com/documentation/">Learning to Plop : PLOP (plopjs.com)</a></li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D plop</span><br></pre></td></tr></table></figure><h3 id="编写命令行交互"><a href="#编写命令行交互" class="headerlink" title="编写命令行交互"></a>编写命令行交互</h3><ul><li>接下来以新建一个<code>vue</code>组件的模板为例</li><li>在项目根目录下创建一个用于存放开发模板的文件<code>plop-templates</code></li><li>再新建一个<code>component</code>文件夹代表这里面存放开发组件的模板</li><li>在<code>component</code>中新建<code>index.hbs</code>编写文件模板，<code>prompt.js</code>编写交互逻辑</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|plop-templates</span><br><span class="line">|components</span><br><span class="line">|index.hbs</span><br><span class="line">|prompt.js</span><br></pre></td></tr></table></figure><p>接下来我们就可以在<code>prompt.js</code>中编辑交互逻辑啦</p><p>我们需要在该模块导出一个配置项，主要需要配置三个内容</p><ul><li>description：该模板的名称</li><li>prompts：该模板需要的参数</li><li>actions：执行后需要进行的操作</li></ul><p>具体详情可以看下面的代码，均已加入详细注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入便于我们验证问价夹中是否存在重名文件的工具函数，后面有详细代码</span></span><br><span class="line"><span class="keyword">const</span> verifyFileExist = <span class="built_in">require</span>(<span class="string">&#x27;../utils&#x27;</span>);</span><br><span class="line"><span class="comment">// 引入我们需要创建该模板到达的基础路径位置</span></span><br><span class="line"><span class="keyword">const</span> baseFile = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../../src/views&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">   <span class="comment">// 编写对模板件的描述</span></span><br><span class="line">   <span class="attr">description</span>: <span class="string">&#x27;创建组件&#x27;</span>,</span><br><span class="line">   <span class="comment">// 编写命令行交互逻辑，可在命名行中获取参数</span></span><br><span class="line">   <span class="attr">prompts</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">name</span>: <span class="string">&#x27;componentName&#x27;</span>, <span class="comment">// 该参数的名称 之后可以使用 componentName 调用</span></span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>, <span class="comment">// 该参数的类型 input 代表输入</span></span><br><span class="line">         <span class="attr">message</span>: <span class="string">&#x27;请输入页面名称&#x27;</span>, <span class="comment">// 该交互的提示信息</span></span><br><span class="line">         <span class="attr">validate</span>: <span class="function">(<span class="params">dirName</span>) =&gt;</span> &#123; <span class="comment">// 传入一函数对用户传入的参数进行校验</span></span><br><span class="line">            <span class="keyword">if</span> (!dirName || dirName.<span class="property">trim</span> === <span class="string">&#x27;&#x27;</span>) &#123; <span class="comment">// 验证用户是否输入</span></span><br><span class="line">               <span class="keyword">return</span> <span class="string">&#x27;组件名称不能为空&#x27;</span>; <span class="comment">// 返回字符串报错</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">verifyFileExist</span>(dirName, baseFile)) &#123; <span class="comment">// 验证文件是否存在</span></span><br><span class="line">               <span class="keyword">return</span> <span class="string">&#x27;组件已经存在&#x27;</span>; <span class="comment">// 返回字符串报错</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 返回 ture 则继续执行 action</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">   ],</span><br><span class="line">   <span class="comment">// 编写接收完参数后需要执行的操作</span></span><br><span class="line">   <span class="attr">actions</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> basePath = path.<span class="title function_">join</span>(baseFile, <span class="string">`./<span class="subst">$&#123;data.pageName&#125;</span>`</span>);</span><br><span class="line">      <span class="comment">// 新建一个组件文件夹</span></span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(basePath);</span><br><span class="line">      <span class="comment">// 新建一个组件文件夹下的通用组件文件夹</span></span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(path.<span class="title function_">join</span>(baseFile, <span class="string">`./<span class="subst">$&#123;data.pageName&#125;</span>/components`</span>));</span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 最后我们需要返回一个 actions</span></span><br><span class="line">      <span class="comment">// type 用于配置执行的操作类型 add 代表新增文件</span></span><br><span class="line">      <span class="comment">// path 代表新建文件的路径</span></span><br><span class="line">      <span class="comment">// templateFile 代表我们使用的模板 下文会有</span></span><br><span class="line">      <span class="keyword">const</span> actions = [</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>: path.<span class="title function_">join</span>(basePath, <span class="string">&#x27;index.vue&#x27;</span>),</span><br><span class="line">            <span class="attr">templateFile</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./index.hbs&#x27;</span>),</span><br><span class="line">         &#125;,</span><br><span class="line">      ];</span><br><span class="line">      <span class="keyword">return</span> actions;</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为检测一个文件是否存在需要经常使用，我们将其封装成一个函数抽离出来，在<code>plop-templates/utils.js</code>中编写：</p><ul><li>就是一个简单的验证函数，大家根据自己的习惯编写即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证文件在文件夹中是否存在</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">verifyFileExist</span>(<span class="params">dirName, dirPath, tail = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> directories = fs.<span class="title function_">readdirSync</span>(dirPath);</span><br><span class="line">   <span class="keyword">return</span> directories.<span class="title function_">includes</span>(dirName + tail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = verifyFileExist;</span><br></pre></td></tr></table></figure><h3 id="编写开发模板"><a href="#编写开发模板" class="headerlink" title="编写开发模板"></a>编写开发模板</h3><p>我们在<code>plop-templates/components/index.hbs</code>中编写组件的模板：</p><p>每一个字符都会被写入<code>actions</code>中返回的<code>path</code>目标文件中，只有被<strong>双大括号包裹</strong>的内容会被解析成<code>prompts</code>传入的参数。</p><p>下面的 <code>properCase pageName</code> 就是表示写入 pageName 参数 并且小写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">     &#123;&#123; properCase pageName &#125;&#125;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">// typeScript</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">/* scss */</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="调用指令"><a href="#调用指令" class="headerlink" title="调用指令"></a>调用指令</h3><p>要使用我们的开发模板，我们需要在项目根目录下新建一个<code>plopfile.js</code>进行配置，详细内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">plop</span>) &#123;</span><br><span class="line">   <span class="comment">// 设置欢迎语</span></span><br><span class="line">   plop.<span class="title function_">setWelcomeMessage</span>(<span class="string">&#x27;请选择需要创建的模板&#x27;</span>);</span><br><span class="line">   <span class="comment">// 设置选择的生成器模板</span></span><br><span class="line">   <span class="comment">// 第一个参数为对应名称</span></span><br><span class="line">   <span class="comment">// 第二个参数为 prompts 的地址</span></span><br><span class="line">   plop.<span class="title function_">setGenerator</span>(<span class="string">&#x27;components&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;./plop-templates/page/prompt&#x27;</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们在<code>package.json</code>中配置一条指令便于我们调用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;gen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;plop&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>运行该指令就可以快速生成我们配置好的模板啦😄。</p><p>以上内容为一个简单的小示例，plop 还有非常多强大的功能，大家可以前往官方文档探索：<a href="https://plopjs.com/documentation/">Learning to Plop : PLOP (plopjs.com)</a></p><p>项目里已为大家配置好了各种</p><h2 id="配置-mock"><a href="#配置-mock" class="headerlink" title="配置 mock"></a>配置 mock</h2><ul><li>想想我们平时对接接口是怎么做的，首先前后端确定好接口，让后确定好接口文档。如果已经编写好前端代码，就差与后端对接了，只能自己傻傻等待么😴。当然不是，我们可以使用 mock 工具进行数据的模拟，提前编写好数据展示的内容，最后对接的时候关闭 mock 即可。</li><li>mock 实现的方式有很多，我们使用的 vite 就有一个插件满足我们的需求：<code>vite-plugin-mock</code></li></ul><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D mockjs vite-plugin-mock</span><br></pre></td></tr></table></figure><h3 id="返回内容配置"><a href="#返回内容配置" class="headerlink" title="返回内容配置"></a>返回内容配置</h3><p>mock 的编写方式非常非常简单，只需要一个数组即可。</p><p>我们在项目根目录下新建一个<code>mock</code>文件夹，并在其中新建一个<code>user.ts</code>用于用户登录的数据模拟。</p><p>配置方式也是非常的简单</p><ul><li>url：配置接口URL地址</li><li>method：配置接口的请求方式</li><li>response：编写一个函数，编写处理逻辑，并返回响应的内容。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MockMethod</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 前面的 /mock 为 mock 生效需要配置的根路径 后面会提到</span></span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/mock/api/login&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">      <span class="comment">// 使用 body 可以获取请求体</span></span><br><span class="line">      <span class="attr">response</span>: <span class="function">(<span class="params">&#123; body &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// 简单编写一个逻辑</span></span><br><span class="line">         <span class="comment">// 用户名不等于密码就是密码错误</span></span><br><span class="line">         <span class="keyword">if</span> (body.<span class="property">username</span> !== body.<span class="property">password</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回JSON信息</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">               <span class="attr">code</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">message</span>: <span class="string">&#x27;密码错误&#x27;</span>,</span><br><span class="line">               <span class="attr">data</span>: &#123;</span><br><span class="line">                  <span class="attr">username</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                  <span class="attr">roles</span>: [],</span><br><span class="line">                  <span class="attr">accessToken</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 其余的则显示登录成功</span></span><br><span class="line">         <span class="keyword">if</span> (body.<span class="property">username</span> === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">               <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">               <span class="attr">message</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">               <span class="attr">data</span>: &#123;</span><br><span class="line">                  <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">                  <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>],</span><br><span class="line">                  <span class="attr">accessToken</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">               <span class="attr">code</span>: <span class="number">0</span>,</span><br><span class="line">               <span class="attr">message</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">               <span class="attr">data</span>: &#123;</span><br><span class="line">                  <span class="attr">username</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">                  <span class="attr">roles</span>: [<span class="string">&#x27;common&#x27;</span>],</span><br><span class="line">                  <span class="attr">accessToken</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">               &#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">   &#125;,</span><br><span class="line">] <span class="keyword">as</span> <span class="title class_">MockMethod</span>[];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启用-mock"><a href="#启用-mock" class="headerlink" title="启用 mock"></a>启用 mock</h3><p>启动 mock 需要我们配置一下 vite</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 plugins 数组中加入如下配置</span></span><br><span class="line">[</span><br><span class="line">      <span class="title function_">viteMockServe</span>(&#123;</span><br><span class="line">         <span class="comment">// 如果接口为 /mock/xxx 以 mock 开头就会被拦截响应配置的内容</span></span><br><span class="line">         <span class="attr">mockPath</span>: <span class="string">&#x27;mock&#x27;</span>, <span class="comment">// 数据模拟需要拦截的请求起始 URL</span></span><br><span class="line">         <span class="attr">localEnabled</span>: <span class="literal">true</span>, <span class="comment">// 本地开发是否启用</span></span><br><span class="line">         <span class="attr">prodEnabled</span>: <span class="literal">false</span>, <span class="comment">// 生产模式是否启用</span></span><br><span class="line">      &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后我们所有以 mock 开头的接口都会成为我们使用 mock 模拟的返回数据</p><h3 id="关闭-mock"><a href="#关闭-mock" class="headerlink" title="关闭 mock"></a>关闭 mock</h3><ul><li>如果后端同学接口测试完毕，需要我们正式对接了，我们不想启用 mock 了该怎么办，可以在 vite 配置中关闭，但我喜欢使用<strong>环境变量</strong>配置mock的开关</li></ul><p>编写<code>.env</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 后端接口的根路径</span><br><span class="line">VITE_APP_API_BASEURL = /api</span><br><span class="line">// 需要模拟的请求根路径</span><br><span class="line">VITE_APP_MOCK_BASEURL = /mock/api</span><br></pre></td></tr></table></figure><p>编写<code>.env.development</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 选择 development 模式下是否开启 mock</span><br><span class="line">VITE_APP_USE_MOCK = true</span><br></pre></td></tr></table></figure><p>编写<code>.env.production</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 选择 production 模式下是否开启 mock</span><br><span class="line">VITE_APP_USE_MOCK = true</span><br></pre></td></tr></table></figure><p><strong>配置 axios 全局请求路径</strong></p><p>之前我们已经将 axios 封装在 <code>src/utils/http/index.ts</code> 中，我们可以在此根据环境变量配置 axios 的请求路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">service</span>: <span class="title class_">AxiosInstance</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">   <span class="comment">// 启用 mock 就请求 mock 路径</span></span><br><span class="line">   <span class="comment">// 不启用 mock 就请求 正常后端路径</span></span><br><span class="line">   <span class="attr">baseURL</span>: <span class="title class_">Boolean</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_USE_MOCK</span>)</span><br><span class="line">      ? <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_MOCK_BASEURL</span></span><br><span class="line">      : <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_API_BASEURL</span>,</span><br><span class="line">   <span class="attr">timeout</span>: <span class="number">15000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里我们并不需配置后端地址，统一请求 LocalHost。我们只需要开启本地代理在 vite proxy 中配置后端地址即可，这样方便一些。</p><p><strong>这样我们就可以轻松的选择开关 mock 啦</strong>😀</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>每个人的使用习惯不同，这里提供了我常用的方法供大家参考，如有其他使用方法欢迎大家讨论😄。</p><p>终于把第四节更新完啦，一个最基础的 Vue3+Vite+TS 前端开发脚手架就搭建完成了，日后技术栈更新会帮助大家提供更改好的方案，大家对该项目的意见也请及时指出，我会汲取大家的意见不断学习并更新。</p><p><strong>系列文章</strong>：</p><ul><li><a href="https://juejin.cn/post/7207615983950987320">【从零到一手撕脚手架 | 第一节】配置基础项目结构 Vite + TypeScrpit + Vue3 初始化项目</a></li><li><a href="https://juejin.cn/post/7209542304863649852">【从零到一手撕脚手架 | 第二节】模块化封装 降低耦合度 封装 axios pinia router</a></li><li><a href="https://juejin.cn/post/7213310111623725117">【从零到一手撕脚手架 | 第三节】项目集成CommitLInt+ESLint+Prettier+StyleLint+LintStaged</a></li><li><strong>提高开发效率</strong>：Mock.js进行数据模拟，告别后端摆烂。Plop快速生成模板文件！</li></ul><p><strong>参考学习项目</strong>：</p><ul><li><a href="https://github.com/tobe-fe-dalao/fast-vue3">fast-vue3</a></li><li><a href="https://github.com/pure-admin/vue-pure-admin">vue-pure-admin</a></li></ul><blockquote><p>如果有任何不正确的地方请指正，我会及时更改。</p><p>更文不易，如果对你有帮助的话，请给我点个赞吧👍</p><p>关注我，后续文章不迷路⛄</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
            <tag> mock </tag>
            
            <tag> plop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零到一手撕脚手架 | 第三节】项目集成CommitLInt+ESLint+Prettier+StyleLint+LintStaged</title>
      <link href="/2023/03/27/sv3-template/3-standardCode/"/>
      <url>/2023/03/27/sv3-template/3-standardCode/</url>
      
        <content type="html"><![CDATA[<h1 id="【从零到一手撕脚手架-第三节】项目集成CommitLInt-ESLint-Prettier-StyleLint-LintStaged"><a href="#【从零到一手撕脚手架-第三节】项目集成CommitLInt-ESLint-Prettier-StyleLint-LintStaged" class="headerlink" title="【从零到一手撕脚手架 | 第三节】项目集成CommitLInt+ESLint+Prettier+StyleLint+LintStaged"></a>【从零到一手撕脚手架 | 第三节】项目集成CommitLInt+ESLint+Prettier+StyleLint+LintStaged</h1><blockquote><p>Hello大家好我是⛄，前两节教大家如何初始化一个脚手架项目以及如何封装Vue技术栈常用的工具库。本小节教大家如何向我们的脚手架中配置ESLint、Prettier、StyleLint、LintStage。帮助大家规范项目代码，能够更好的进行团队协作开发。</p><p>项目地址：</p><ul><li><strong>GitHub</strong>：<a href="https://github.com/LonelySnowman/sv3-template">LonelySnowman&#x2F;sv3-template</a></li><li><strong>官方文档</strong>：<a href="https://sv3-docs.snowhouse.space/">SV3-Family | Vue3</a></li></ul></blockquote><ul><li>前置知识：Vue全家桶，了解Vite或WebPack等构建工具，Node.js</li><li>您将收获到：从零到一构建一个规范的 Vue3+TS+Vite 脚手架</li></ul><h2 id="配置-ESLint"><a href="#配置-ESLint" class="headerlink" title="配置 ESLint"></a>配置 ESLint</h2><ul><li><p><strong>ESLint</strong> 是一个用来识别 <strong>ECMAScript</strong> 并且按照规则给出报告的代码检测工具，使用它可以避免低级错误和统一代码的风格。它拥有以下功能：</p><ul><li>查出 JavaScript 代码语法问题。</li><li>根据配置的规则，标记不符合规范的代码。</li><li>自动修复一些结构、风格问题。</li></ul></li><li><p>防止代码成为shi山😀，可以帮我们检查有没有死循环，有没有定义但未使用的变量等等。</p></li><li><p><strong>ESLint官方文档</strong>：<a href="https://eslint.cn/">ESLint - Pluggable JavaScript linter - ESLint中文</a></p></li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D eslint @eslint/create-config</span><br></pre></td></tr></table></figure><ul><li>@eslint&#x2F;create-config：eslint配置文件初始化工具</li></ul><h3 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  生成 ESLint 配置文件模板</span></span><br><span class="line">npx eslint --init</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 出现如下选择</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择2 我们会使用 prettier 进行代码风格校验</span></span><br><span class="line">How would you like to use ESLint?</span><br><span class="line">1.只检查语法</span><br><span class="line">2.检查语法并提示问题</span><br><span class="line">3.检查语法、提示问题并且强制使用一些代码风格</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你的项目用的哪一种模块化方式 选择1</span></span><br><span class="line">What <span class="built_in">type</span> of modules does your project use?</span><br><span class="line">1.ES6</span><br><span class="line">2.CommonJS</span><br><span class="line">3.None</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用的框架 选择2</span></span><br><span class="line">Which framework does your project use?</span><br><span class="line">1.React</span><br><span class="line">2.Vue.js</span><br><span class="line">3.None</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目是否使用TS yes</span></span><br><span class="line">Does your project use TypeScript?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目在哪里跑的 选择1</span></span><br><span class="line">Where does your code run?</span><br><span class="line">1.browser</span><br><span class="line">2.node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目用哪种配置文件 选择1</span></span><br><span class="line">What format <span class="keyword">do</span> you want your config file to be <span class="keyword">in</span>?</span><br><span class="line">1.JavaScript</span><br><span class="line">2.YAML</span><br><span class="line">3.JSON</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 是否立即安装需要的依赖</span></span><br><span class="line">Would you like to install them now?</span><br><span class="line"><span class="comment"># 会帮我们安装如下插件</span></span><br><span class="line"><span class="comment"># pnpm install -D eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest</span></span><br></pre></td></tr></table></figure><ul><li>熟悉之后我们就可以不使用配置生成工具</li><li>直接新建配置文件进行配置即可</li><li>ESLint配置文件名称可以为：<code>.eslintrc.js</code>、<code>.eslint.config.js</code> （根据个人习惯选择即可）</li></ul><p>这里是我常用的配置规则，更多配置规则请查阅<a href="https://eslint.cn/">ESLint中文</a>。</p><p>单独的语法配置需要在rules中编写，全部配置请参考：<a href="https://eslint.cn/docs/rules/">List of available rules - ESLint中文</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 使 eslint 支持 node 与 ES6</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 引入推荐的语法校验规则</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">overrides</span>: [],</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  这里一定要配置对 先使用vue-eslint-parser 再使用@typescript-eslint/parser</span></span><br><span class="line"><span class="comment">  先解析 &lt;template&gt; 标签中的内容 然后再解析 vue &lt;script&gt; 标签中的 TS 代码</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// 选择使用的解析器</span></span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;vue-eslint-parser&#x27;</span>,</span><br><span class="line">  <span class="comment">// 解析器的详细配置</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="comment">// 使用最新版 ES 语法</span></span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span>,</span><br><span class="line">    <span class="comment">// 使用 ESLint TS 解析器</span></span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">    <span class="comment">// 使用 ES 模块化规范</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 使用的插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class="line">  <span class="comment">// 自定义规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>配置完规则后我们配置一条指令用于代码质量的修复</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="comment">// --cache 为仅检测改动过的代码</span></span><br><span class="line"><span class="comment">// --max-warnings 0 表示出现超过0个警告强制eslint以错误状态推出</span></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;lint:eslint&quot;</span>: <span class="string">&quot;eslint --cache --max-warnings 0 &#123;src,mock&#125;/**/*.&#123;vue,ts,tsx&#125; --fix&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>我们还可以配置忽略文件，让 ESLint 不对这些文件进行校验。</p><p>新建 <code>.eslintignore</code> 进行配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">*.md</span><br><span class="line">.vscode</span><br><span class="line">.idea</span><br><span class="line">dist</span><br><span class="line">/public</span><br><span class="line">/docs</span><br><span class="line">.husky</span><br><span class="line">.local</span><br><span class="line">/bin</span><br><span class="line">Dockerfile</span><br></pre></td></tr></table></figure><h3 id="自动修复"><a href="#自动修复" class="headerlink" title="自动修复"></a>自动修复</h3><ul><li>大部分IDE支持在修改代码后进行自动修复</li></ul><ol><li>WebStorme：直接在Setting中搜索ESLint即可进行配置</li><li>VSCode：需要在项目目录下加入如下配置文件，还需要下载ESLint插件</li></ol><p><strong>&#x2F;.vscode&#x2F;settings.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="配置-Prettier"><a href="#配置-Prettier" class="headerlink" title="配置 Prettier"></a>配置 Prettier</h2><ul><li>多人协作的项目开发中，保持统一的代码风格是一件很重要的事。</li><li>Prettier就可以帮我们做到这个事情，但是ESLint不是也能规范代码风格么？可以是可以，但是相比Prettier差了很多，术业有专攻，Prettier可以让我们拥有超级整齐的代码。可以帮助我们配置是否使用分号，缩进的格式等等。</li><li>官方文档：<a href="https://www.prettier.cn/">Prettier 中文网 · Prettier 是一个“有态度”的代码格式化工具</a></li></ul><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D prettier</span><br></pre></td></tr></table></figure><h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><ul><li>Prettier配置文件名称可以为：<code>.ptettierrc.js</code>、<code>.ptettier.config.js</code> （根据个人习惯选择即可）</li><li>下面是我常用的一些配置，更多配置规则大家可以前官网查看：<a href="https://www.prettier.cn/docs/options.html">Options · Prettier 中文网</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">80</span>, <span class="comment">//单行长度</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>, <span class="comment">//缩进长度</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>, <span class="comment">//使用空格代替tab缩进</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">true</span>, <span class="comment">//句末使用分号</span></span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">//使用单引号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置一个指令便于我们使用prettier进行修复代码风格</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint:prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write **/*.&#123;js,json,tsx,css,less,scss,vue,html,md&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="解决ESLint与Prettier冲突问题"><a href="#解决ESLint与Prettier冲突问题" class="headerlink" title="解决ESLint与Prettier冲突问题"></a>解决ESLint与Prettier冲突问题</h3><h4 id="安装依赖-2"><a href="#安装依赖-2" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D eslint-config-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure><ul><li>eslint-config-prettier 的作用是关闭eslint中与prettier相互冲突的规则。</li><li>eslint-plugin-prettier 的作用是赋予eslint用prettier格式化代码的能力。 安装依赖并修改.eslintrc文件。</li></ul><h4 id="配置ESLint"><a href="#配置ESLint" class="headerlink" title="配置ESLint"></a>配置ESLint</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此配置在eslint配置文件中新增 </span></span><br><span class="line"><span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">  <span class="string">&quot;plugin:vue/vue3-recommended&quot;</span>,</span><br><span class="line">  <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span>,</span><br><span class="line">  <span class="string">&quot;plugin:prettier/recommended&quot;</span> <span class="comment">// 在最后面新增extends</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>配置完成之后我们对代码风格的配置只会使用prettier的配置，相当于将eslint中冲突的规则覆盖掉了。</p><p>我们还可以配置忽略文件，让 Prettier 不对这些文件进行校验。</p><p>新建 <code>.prettierignore</code> 进行配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/dist/*</span><br><span class="line">/node_modules/**</span><br></pre></td></tr></table></figure><h2 id="配置-StyleLint"><a href="#配置-StyleLint" class="headerlink" title="配置 StyleLint"></a>配置 StyleLint</h2><ul><li>tylelint 是一个强大、先进的 CSS 代码检查器（linter），可以帮助你规避 CSS 代码中的错误并保持一致的编码风格。</li><li>你可能会想：WTF😓，怎么有有一个配置编码风格的，不是已经有Prettier了么。StyleLint，是专用于规范样式代码的工具，可以做到一些Prettier做不到的功能，有了它能让我们的样式代码（CSS&#x2F;Less&#x2F;Scss）更加美观，比如说对CSS样式代码进行顺序规定。</li><li>但是 StyleLint 与 Prettier 也有配置冲突，所以我们也要将 StyleLint 中与 Prettier 冲突的配置关闭。</li></ul><h3 id="安装依赖-3"><a href="#安装依赖-3" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D stylelint stylelint-config-standard</span><br><span class="line"></span><br><span class="line">pnpm install -D stylelint-config-prettier stylelint-config-html stylelint-order stylelint-scss postcss-html postcss-scss stylelint-config-standard-vue</span><br></pre></td></tr></table></figure><ul><li>stylelint-config-standard：StyleLint 推荐配置</li><li>stylelint-config-prettier：关闭与 prettier 冲突的配置</li><li>stylelint-config-standard-vue：StyleLint Vue 项目推荐配置</li><li>postcss-html postcss-scss：支持检查 scss 与 html</li><li>stylelint-order：支持 css 样式排序</li></ul><h3 id="添加配置文件-1"><a href="#添加配置文件-1" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><ul><li>Prettier配置文件名称可以为：<code>.stylelintrc.js</code>、<code>.stylelint.config.js</code> （根据个人习惯选择即可）</li><li>更多详细配置规则请查看官方文档：<a href="https://stylelint.bootcss.com/user-guide/rules/list">List of rules | Stylelint 中文文档 (bootcss.com)</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承推荐规范配置</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;stylelint-config-standard&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stylelint-config-prettier&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stylelint-config-recommended-scss&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;stylelint-config-standard-vue&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 添加规则插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;stylelint-order&#x27;</span>],</span><br><span class="line">  <span class="comment">// 不同格式的文件指定自定义语法</span></span><br><span class="line">  <span class="attr">overrides</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;**/*.(scss|css|vue|html)&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-scss&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">files</span>: [<span class="string">&#x27;**/*.(html|vue)&#x27;</span>],</span><br><span class="line">      <span class="attr">customSyntax</span>: <span class="string">&#x27;postcss-html&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 忽略检测文件</span></span><br><span class="line">  <span class="attr">ignoreFiles</span>: [</span><br><span class="line">    <span class="string">&#x27;**/*.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;**/*.jsx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;**/*.tsx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;**/*.ts&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;**/*.json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;**/*.md&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;**/*.yaml&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 自定义配置规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 便于配置变量 关闭未知属性检测</span></span><br><span class="line">    <span class="string">&#x27;property-no-unknown&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 指定类选择器的模式</span></span><br><span class="line">    <span class="string">&#x27;selector-class-pattern&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 允许 Vue 的 global</span></span><br><span class="line">    <span class="string">&#x27;selector-pseudo-class-no-unknown&#x27;</span>: [</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">ignorePseudoClasses</span>: [<span class="string">&#x27;global&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 允许 Vue 的 v-deep</span></span><br><span class="line">    <span class="string">&#x27;selector-pseudo-element-no-unknown&#x27;</span>: [</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">ignorePseudoElements</span>: [<span class="string">&#x27;v-deep&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 允许对应内核前缀</span></span><br><span class="line">    <span class="string">&#x27;property-no-vendor-prefix&#x27;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 指定样式的排序 修复后会帮我们自动整理CSS样式的顺序</span></span><br><span class="line">    <span class="string">&#x27;order/properties-order&#x27;</span>: [</span><br><span class="line">      <span class="string">&#x27;position&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;z-index&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;display&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;justify-content&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;align-items&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;float&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;clear&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow-x&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;overflow-y&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;padding-left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-top&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-right&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-bottom&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;margin-left&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;min-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;max-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;min-height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;max-height&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-size&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;font-family&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-align&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-justify&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-indent&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-decoration&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;white-space&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background-position&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background-repeat&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background-size&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background-color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;background-clip&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-top-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-top-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-top-color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-right-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-right-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-right-color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-bottom-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-bottom-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-bottom-color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-left-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-left-width&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-left-color&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;border-radius&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;opacity&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;filter&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;list-style&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;outline&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;visibility&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;box-shadow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;text-shadow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;resize&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;transition&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们还可以配置忽略文件，让 StyleLint 不对这些文件进行校验。</p><p>新建 <code>.stylelintignore</code> 进行配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/dist/*</span><br><span class="line">/public/*</span><br><span class="line">public/*</span><br><span class="line">/mock/*</span><br><span class="line">/node_modules/*</span><br><span class="line">/plop-templates/*</span><br><span class="line">/types/*</span><br></pre></td></tr></table></figure><h2 id="配置-Husky"><a href="#配置-Husky" class="headerlink" title="配置 Husky"></a>配置 Husky</h2><ul><li>团队协作时，我们会遇到多种问题，最让人难受的就是每个人书写的代码风格不一致😅，使用的规范不一致，导致团队协作效率极低，代码可读性差。</li><li>这时候就需要 Husky 来帮忙了，它可以帮助我们在代码提交前后进行一些自定义的操作，像是代码风格的校验，并且它支持所有的 Git 钩子（钩子是你可以放在钩子目录中触发的程序 在 Git 执行的某些点执行的操作）。</li></ul><p>Git全部钩子的详细介绍：<a href="https://git-scm.com/docs/githooks">Git - githooks Documentation (git-scm.com)</a></p><p><strong>本文用到的钩子</strong>：</p><ul><li>在 <code>pre-commit</code> 触发时进行代码格式验证，在 <code>commit-msg</code> 触发时对 commit 消息和提交用户进行验证。</li></ul><table><thead><tr><th>git hook</th><th>执行时期</th><th>备注</th></tr></thead><tbody><tr><td>pre-commit</td><td>git commit 执行前</td><td>git commit –no verify 命令可以绕过该钩子</td></tr><tr><td>commit-msg</td><td>git commit 执行前</td><td>git commit –no verify 命令可以绕过该钩子</td></tr></tbody></table><h3 id="安装依赖-4"><a href="#安装依赖-4" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D husky</span><br></pre></td></tr></table></figure><p>然后配置一个初始化 Hysky 的命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>运行这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行后会初始化husky</span></span><br><span class="line">pnpm run prepare</span><br></pre></td></tr></table></figure><p>运行之后就会出现<code>.husky</code>文件夹，之后我们就可以配置在<code>GItHook</code>中执行的操作啦😀。</p><h2 id="配置-LintStaged"><a href="#配置-LintStaged" class="headerlink" title="配置 LintStaged"></a>配置 LintStaged</h2><ul><li>有些同学感觉使用IDE的保存自动修复相当麻烦，我每次改完之后都需要等他修复一下😡，太不方便啦！</li><li>接下来就要请出我们的好帮手：lint-staged，它可以帮助我们在 git 缓存中进行代码质量与风格的修复，在代码提交前进行统一校验，通过后才可以提交。</li></ul><h3 id="安装依赖-5"><a href="#安装依赖-5" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D lint-staged</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 package.json 配置一个指令方便我们使用</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint:lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用 husky 配置一个 pre-commit 钩子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --no-install 代表强制使用本地模块</span></span><br><span class="line">npx husky add .husky/pre-commit <span class="string">&quot;npm run lint:lint-staged&quot;</span></span><br></pre></td></tr></table></figure><p>LintStaged 的配置文件方式也有多种：</p><ul><li>在 <code>package.json</code> 中配置</li><li><code>lint-staged.js</code> 或 <code>lint-staged.config.js</code></li><li><code>.lintstagedrc.json</code> 或 <code>.lintstagedrc.yaml</code></li><li>等等</li></ul><p>这里我们直接在 <code>package.json</code> 中配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们直接配置在 package.json 中</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">配置的含义：</span></span><br><span class="line"><span class="comment">&lt;需要执行的文件&gt;: &lt;对应文件需要执行的命令数组&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;prettier --write&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;&#123;!(package)*.json,*.code-snippets,.!(browserslist)*rc&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;prettier --write--parser json&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;package.json&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;prettier --write&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;*.vue&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;prettier --write&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;stylelint --fix&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;*.&#123;scss,less,styl,html&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;stylelint --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;prettier --write&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;*.md&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;prettier --write&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样就配置完毕啦，当我们使用 <code>git commit -m &quot;xxx&quot;</code> 时，lint-staged 会自动执行帮我们进行代码质量与风格的修复。</p><h2 id="配置-CommitLint"><a href="#配置-CommitLint" class="headerlink" title="配置 CommitLint"></a>配置 CommitLint</h2><ul><li>每次看 Github 仓库的时候，总感觉有些不顺眼。原来是提交附带的信息乱糟糟的，都是”新增xx功能”，”修复xxBUG”，非常的不工整，看着太不舒服啦🤯。</li><li>不要慌，我们可以使用 CommitLint 对提交的信息进行规范。</li><li>官方文档：<a href="https://commitlint.js.org/#/">commitlint - Lint commit messages</a></li></ul><h3 id="安装依赖-6"><a href="#安装依赖-6" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D @commitlint/cli  @commitlint/config-conventional</span><br></pre></td></tr></table></figure><ul><li>@commitlint&#x2F;config-conventional：commitlint自定义配置规则插件</li></ul><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><h4 id="规则配置"><a href="#规则配置" class="headerlink" title="规则配置"></a>规则配置</h4><ul><li>CommitLint配置文件名称可以为：<code>.commitlintrc.js</code>、<code>.commitlint.config.js</code> （根据个人习惯选择即可）</li></ul><p><strong>配置文件内容如下</strong></p><ul><li>官方文档的配置规则讲解：<a href="https://commitlint.js.org/#/reference-rules?id=rules">Rules (commitlint.js.org)</a></li></ul><p>规则由名称和配置数组组成：</p><p>&lt;配置名称&gt;: [&lt;警报级别&gt;, &lt;是否启用&gt;, &lt;规则对应的值&gt;]</p><ul><li>警报级别<ul><li>0 无提示 disable</li><li>1 警告 warning</li><li>2 错误 error</li></ul></li><li>是否启用<ul><li>always 启用</li><li>never 禁用</li></ul></li><li>规则对应的值：查看官方文档进行配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里是通俗的解释 详情请前往官方文档查阅</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">ignores</span>: [<span class="function">(<span class="params">commit</span>) =&gt;</span> commit.<span class="title function_">includes</span>(<span class="string">&#x27;init&#x27;</span>)],</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 信息以空格开头</span></span><br><span class="line">    <span class="string">&#x27;body-leading-blank&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;footer-leading-blank&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>],</span><br><span class="line">    <span class="comment">// 信息最大长度</span></span><br><span class="line">    <span class="string">&#x27;header-max-length&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, <span class="number">108</span>],</span><br><span class="line">    <span class="comment">// 信息不能未空</span></span><br><span class="line">    <span class="string">&#x27;subject-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="comment">// 信息类型不能未空</span></span><br><span class="line">    <span class="string">&#x27;type-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="comment">// 提交信息的类型 下文有介绍</span></span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;feat&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;fix&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;perf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;style&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;docs&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;refactor&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;build&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ci&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chore&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;revert&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;wip&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;workflow&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;types&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;release&#x27;</span>,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>提交信息的类型一般有如下规范</strong>（可根据团队习惯进行更改）：</p><ul><li>feat : 增加一个新特性</li><li>fix : 修复一个 bug</li><li>perf : 更改代码以提高性能</li><li>build : 更改构建系统和外部依赖项（如将 gulp 改为 webpack，更新某个 npm 包）</li><li>ci : 对 CI 配置文件和脚本的更改</li><li>docs : 仅仅修改文档说明</li><li>refactor : 代码重构时使用</li><li>style : 不影响代码含义的改动，例如去掉空格、改变缩进、增删分号</li><li>test : 增加新的测试功能或更改原有的测试模块</li></ul><h3 id="钩子配置"><a href="#钩子配置" class="headerlink" title="钩子配置"></a>钩子配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 commit-msg 钩子 运行 commitlint</span></span><br><span class="line"><span class="comment"># --no-install 代表强制使用本地模块</span></span><br><span class="line">npx husky add .husky/commit-msg <span class="string">&quot;npx --no-install commitlint --edit <span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure><p>配置完成后我们就可以在<code>git commit</code>时进行信息的规范</p><p>我们需要按照以下格式进行提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git commit -m &quot;类型: 信息&quot;</span></span><br><span class="line"><span class="comment"># 新增功能示例</span></span><br><span class="line">git commit -m <span class="string">&quot;feat: 新增用户登录功能&quot;</span></span><br><span class="line"><span class="comment"># 修复Bug示例</span></span><br><span class="line">git commit -m <span class="string">&quot;fix: 修复首页用户头像不显示问题&quot;</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>终于配置完啦，用到的依赖实在是太多啦😭，配置的头都大了，希望日后能有一个库能集成它们的所有功能，这样就会方便的不止一点，待我日后成长起来，如果没人去搞⛏，我可以尝试一下（胡言乱语）。</p><p><strong>系列文章</strong>：</p><ul><li><a href="https://juejin.cn/post/7207615983950987320">【从零到一手撕脚手架 | 第一节】配置基础项目结构 Vite + TypeScrpit + Vue3 初始化项目</a></li><li><a href="https://juejin.cn/post/7209542304863649852">【从零到一手撕脚手架 | 第二节】模块化封装 降低耦合度 封装 axios pinia router</a></li><li><a href="https://juejin.cn/post/7213310111623725117">【从零到一手撕脚手架 | 第三节】项目集成CommitLInt+ESLint+Prettier+StyleLint+LintStaged</a></li><li><a href="https://juejin.cn/post/7214759986802294844">【从零到一手撕脚手架 | 第四节】加速开发效率 使用plop生成开发模板 使用mock进行数据模拟</a></li></ul><p><strong>参考学习项目</strong>：</p><ul><li><a href="https://github.com/tobe-fe-dalao/fast-vue3">fast-vue3</a></li><li><a href="https://github.com/pure-admin/vue-pure-admin">vue-pure-admin</a></li></ul><blockquote><p>如果有任何不正确的地方请指正，我会及时更改。</p><p>更文不易，如果对你有帮助的话，请给我点个赞吧👍</p><p>关注我，后续文章不迷路⛄</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
            <tag> Prettier </tag>
            
            <tag> ESLint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零到一手撕脚手架 | 第二节】模块化封装  降低耦合度 封装 axios pinia router</title>
      <link href="/2023/03/27/sv3-template/2-encapsulateCode/"/>
      <url>/2023/03/27/sv3-template/2-encapsulateCode/</url>
      
        <content type="html"><![CDATA[<h1 id="【从零到一手撕脚手架-第二节】模块化封装-降低耦合度-封装-axios-pinia-router"><a href="#【从零到一手撕脚手架-第二节】模块化封装-降低耦合度-封装-axios-pinia-router" class="headerlink" title="【从零到一手撕脚手架 | 第二节】模块化封装  降低耦合度 封装 axios pinia router"></a>【从零到一手撕脚手架 | 第二节】模块化封装  降低耦合度 封装 axios pinia router</h1><blockquote><p>Hello大家好我是⛄，前一节我们讲解了脚手架的基础项目搭建。接下来教大家将Vue技术栈常用的工具进行封装，让我们项目的代码更易维护。</p><ul><li><strong>GitHub</strong>：<a href="https://github.com/LonelySnowman/sv3-template">LonelySnowman&#x2F;sv3-template</a></li><li><strong>官方文档</strong>：<a href="https://sv3-docs.snowhouse.space/">SV3-Family | Vue3</a></li></ul></blockquote><ul><li>前置知识：Vue全家桶，了解Vite或WebPack等构建工具，Node.js</li><li>您将收获到：从零到一构建一个规范的 Vue3+TS+Vite 脚手架</li></ul><h2 id="封装axios"><a href="#封装axios" class="headerlink" title="封装axios"></a>封装axios</h2><h4 id="状态码提示"><a href="#状态码提示" class="headerlink" title="状态码提示"></a>状态码提示</h4><ul><li>当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含 HTTP 状态码的信息头（server header）用以响应浏览器的请求。</li><li>每个状态码都代表一种提示信息</li></ul><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>但是用户不一定了解每种状态码对应的提示信息，我们可以将状态码进行封装，将对应的中文含义返回给予用户提示。</p><p>我们封装一个方法用于获取常见状态码对应的中文信息，将他放置在 <code>/src/utils/http/status.ts</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入状态码获取对应提示信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getMessage = (<span class="attr">status</span>: <span class="built_in">number</span> | <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> message = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">   <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">         message = <span class="string">&#x27;请求错误(400)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">         message = <span class="string">&#x27;未授权，请重新登录(401)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">         message = <span class="string">&#x27;拒绝访问(403)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">         message = <span class="string">&#x27;请求出错(404)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">408</span>:</span><br><span class="line">         message = <span class="string">&#x27;请求超时(408)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">         message = <span class="string">&#x27;服务器错误(500)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">501</span>:</span><br><span class="line">         message = <span class="string">&#x27;服务未实现(501)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">502</span>:</span><br><span class="line">         message = <span class="string">&#x27;网络错误(502)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">503</span>:</span><br><span class="line">         message = <span class="string">&#x27;服务不可用(503)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">504</span>:</span><br><span class="line">         message = <span class="string">&#x27;网络超时(504)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">505</span>:</span><br><span class="line">         message = <span class="string">&#x27;HTTP版本不受支持(505)&#x27;</span>;</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">         message = <span class="string">`连接出错(<span class="subst">$&#123;status&#125;</span>)!`</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;message&#125;</span>，请检查网络或联系管理员！`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们在响应拦截器对响应码进行判断提示，如果不是成功响应发出提示给用户，这里直接使用ElementPlus的Message组件，大家可以根据习惯选择其他方式。</p><p><strong>&#x2F;src&#x2F;utils&#x2F;http&#x2F;index.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getMessage &#125; <span class="keyword">from</span> <span class="string">&#x27;./status&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// axios响应拦截</span></span><br><span class="line"><span class="comment">// 给予用户友好提示</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">   <span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">         <span class="attr">message</span>: <span class="title function_">getMessage</span>(response.<span class="property">status</span>),</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 请求失败</span></span><br><span class="line">   <span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; response &#125; = error;</span><br><span class="line">      <span class="keyword">if</span> (response) &#123;</span><br><span class="line">         <span class="comment">// 请求已发出，但是不在2xx的范围</span></span><br><span class="line">         <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="title function_">getMessage</span>(response.<span class="property">status</span>),</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response.<span class="property">data</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">         <span class="attr">message</span>: <span class="string">&#x27;网络连接异常,请稍后再试!&#x27;</span>,</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="接口管理"><a href="#接口管理" class="headerlink" title="接口管理"></a>接口管理</h4><ul><li>在我们成功将axios进项目之后，总是在组件中直接单独引用axios再进行配置请求是十分不方便的，对于一个接口我们可能会有多个组件会用到。</li></ul><p><strong>接口一般会有一层最外围的规范</strong>，下面以一个最简单的为例：</p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">说明</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">code</td><td align="left">Number</td><td align="left">结果码</td><td align="left">成功&#x3D;1失败&#x3D;-1未登录&#x3D;401无权限&#x3D;403</td></tr><tr><td align="left">message</td><td align="left">String</td><td align="left">显示信息</td><td align="left">给予用户的提示信息</td></tr><tr><td align="left">data</td><td align="left">Object</td><td align="left">数据</td><td align="left">JSON 格式</td></tr></tbody></table><p>所有接口均会按照这样的格式返回，那么我们可以使用TS设计一个类型，便于我们获得类型提示与校验。</p><p>我们将他放置在 <code>/src/utils/http/types.ts</code> 下，并且可以传入一个泛型进行 data 数据格式的类型校验。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">BaseResponse</span>&lt;T = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">   <span class="attr">code</span>: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">   <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">   <span class="attr">data</span>: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以对第一层响应进行特殊处理，如果code不为1则说明发生错误，直接给予用户提示。</p><p><strong>&#x2F;src&#x2F;utils&#x2F;http&#x2F;index.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseResponse 为 res.data 的类型</span></span><br><span class="line"><span class="comment">// T 为 res.data.data 的类型 不同的接口会返回不同的 data 所以我们加一个泛型表示</span></span><br><span class="line"><span class="comment">// 此处相当于二次响应拦截</span></span><br><span class="line"><span class="comment">// 为响应数据进行定制化处理</span></span><br><span class="line"><span class="keyword">const</span> msgRequest = &lt;T = <span class="built_in">any</span>&gt;(<span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>): <span class="title class_">Promise</span>&lt;T&gt; =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> conf = config;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      service</span><br><span class="line">         .<span class="property">request</span>&lt;<span class="built_in">any</span>, <span class="title class_">AxiosResponse</span>&lt;<span class="title class_">BaseResponse</span>&gt;&gt;(conf)</span><br><span class="line">         .<span class="title function_">then</span>(<span class="function">(<span class="params">res: AxiosResponse&lt;BaseResponse&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> data = res.<span class="property">data</span>;</span><br><span class="line">            <span class="comment">// 如果data.code为错误代码返回message信息</span></span><br><span class="line">            <span class="keyword">if</span> (data.<span class="property">code</span> != <span class="number">1</span>) &#123;</span><br><span class="line">               <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                  <span class="attr">message</span>: data.<span class="property">message</span>,</span><br><span class="line">                  <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="title function_">reject</span>(data.<span class="property">message</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">                  <span class="attr">message</span>: data.<span class="property">message</span>,</span><br><span class="line">                  <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">               &#125;);</span><br><span class="line">               <span class="comment">// 此处返回data信息 也就是 api 中配置好的 Response类型</span></span><br><span class="line">               <span class="title function_">resolve</span>(data.<span class="property">data</span> <span class="keyword">as</span> T);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>请求方式有多种，POST、GET、PUT、DELETE等等，为了简化axios配置项的使用，我们可以对不同的请求方式进行封装。</p><p>为了获得TS的类型校验与提示，我们传入两个泛型，一个代表请求参数类型，一个代表返回的data类型。</p><p><strong>&#x2F;src&#x2F;utils&#x2F;http&#x2F;index.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在最后使用封装过的axios导出不同的请求方式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> get&lt;T = <span class="built_in">any</span>, U = <span class="built_in">any</span>&gt;(</span><br><span class="line">   <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>,</span><br><span class="line">   <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">   parms?: U</span><br><span class="line">): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">msgRequest</span>(&#123; ...config, url, <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">params</span>: parms &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> post&lt;T = <span class="built_in">any</span>, U = <span class="built_in">any</span>&gt;(</span><br><span class="line">   <span class="attr">config</span>: <span class="title class_">AxiosRequestConfig</span>,</span><br><span class="line">   <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">   <span class="attr">data</span>: U</span><br><span class="line">): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">msgRequest</span>(&#123; ...config, url, <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="attr">data</span>: data &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口分类"><a href="#接口分类" class="headerlink" title="接口分类"></a>接口分类</h4><p>最基础的接口封装完毕了，接下来我们要使用这些接口。就需要将这些接口分类管理，负责用户信息管理的接口放在一起，负责权限管理的接口放在一起等等。</p><p>我们在<code>/src/api</code>下建立不同的文件夹代表不同类型的API，在<code>index.ts</code>中编写接口配置，在<code>types.ts</code>中编写接口所需的请求参数类型以及响应类型。</p><p><strong>&#x2F;src&#x2F;api&#x2F;user&#x2F;types.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录所需的参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">LoginRequest</span> = &#123;</span><br><span class="line">   <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">   <span class="attr">password</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新登录信息需要的参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> reLoginRequest = &#123;</span><br><span class="line">   <span class="attr">accessToken</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录后返回的响应信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">LoginResponse</span> = &#123;</span><br><span class="line">   <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">   <span class="attr">roles</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">   <span class="attr">accessToken</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们就可以对此类型不同的接口进行封装，之后在组件中或者再次封装在Store中使用即可。</p><p><strong>&#x2F;src&#x2F;api&#x2F;user&#x2F;index.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; post &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/http&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoginRequest</span>, <span class="title class_">LoginResponse</span>, reLoginRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user/types&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post 请求直接传入一个 data 即可 url 我们直接在此处封装好</span></span><br><span class="line"><span class="comment">// 需要更改时也只需在此处更改</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">userLogin</span> = <span class="keyword">async</span> (<span class="params">data?: LoginRequest</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> post&lt;<span class="title class_">LoginResponse</span>&gt;(&#123;&#125;, <span class="string">&#x27;/login&#x27;</span>, data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">refreshUserInfo</span> = <span class="keyword">async</span> (<span class="params">data?: reLoginRequest</span>) =&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> post&lt;<span class="title class_">LoginResponse</span>&gt;(&#123;&#125;, <span class="string">&#x27;/getUserInfo&#x27;</span>, data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>使用的时候我们可以直接在组件中引用，也可将其封装在store的action中，将相关的store与接口关联起来</p></blockquote><h2 id="封装router"><a href="#封装router" class="headerlink" title="封装router"></a>封装router</h2><p>router在使用过程中如果我们直接在一个文件的一个数组中配置，最后路由越来越多会导致不易管理，我们可以将一个页面的路由配置在一个数组中最后统一导入，这样就会方便很多。</p><p>我们将不同页面的路由放置在<code>/src/router/modules/xxx.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;LoginPage&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index.vue&#x27;</span>),</span><br><span class="line">   <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">role</span>: [<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>],</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">children</span>: [],</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="title class_">RouteRecordRaw</span>;</span><br></pre></td></tr></table></figure><p>然后我们在<code>/src/router/index.ts</code>导入这个路由</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// import.meta.glob 为 vite 提供的特殊导入方式</span></span><br><span class="line"><span class="comment">// 它可以将模块中全部内容导入并返回一个Record对象</span></span><br><span class="line"><span class="comment">// 默认为懒加载模式 加入配置项 eager 取消懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">modules</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>([<span class="string">&#x27;./modules/*.ts&#x27;</span>], &#123;</span><br><span class="line">   <span class="attr">eager</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路由全部导入数组</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(modules).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">   routes.<span class="title function_">push</span>(modules[key].<span class="property">default</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入生成的路由数据</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">   <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">   routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (_to, _from, next) =&gt; &#123;</span><br><span class="line"><span class="title function_">next</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">_to</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>这样我们就可以在module中直接创建路由，无需再次在<code>index.ts</code>中手动引入了。</p><h2 id="封装store"><a href="#封装store" class="headerlink" title="封装store"></a>封装store</h2><p>同axios与touter一样，也拥有许多同类别的store数据，我们将他们放置在一个模块中便于调用，例如 user 模块专门用于保存与用户相关的信息与方法。</p><p><strong>&#x2F;src&#x2F;store&#x2F;index.ts</strong></p><ul><li>这里用于导出需要使用的pinia并使用持久化插件</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br></pre></td></tr></table></figure><p><strong>&#x2F;src&#x2F;store&#x2F;xxx&#x2F;types.ts</strong></p><ul><li>以 user 为例</li><li>这里用于定义stroe中state数据的类型</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">UserState</span> &#123;</span><br><span class="line">   <span class="attr">username</span>: <span class="built_in">string</span>;</span><br><span class="line">   <span class="attr">accessToken</span>: <span class="built_in">string</span>;</span><br><span class="line">   <span class="attr">refreshToken</span>: <span class="built_in">string</span>;</span><br><span class="line">   <span class="attr">roles</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>&#x2F;src&#x2F;store&#x2F;xxx&#x2F;index.ts</strong></p><ul><li>定义store模块的主要内容，state、getter、actions</li><li>state用于报错与用户相关的数据</li><li>getter保存需要二次处理的数据</li><li>action封装一些与user模块相关的方法，我们刚刚封装过的api如果需要直接改变用户数据直接在action中调用即可</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserState</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; refreshUserInfo, userLogin &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStoreHook = <span class="title function_">defineStore</span>(</span><br><span class="line">   <span class="comment">// 唯一ID</span></span><br><span class="line">   <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">         <span class="attr">username</span>: <span class="string">&#x27;游客&#x27;</span>,</span><br><span class="line">         <span class="attr">accessToken</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">         <span class="attr">roles</span>: [<span class="string">&#x27;common&#x27;</span>],</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">actions</span>: &#123;</span><br><span class="line">         <span class="comment">// 用于更新store数据</span></span><br><span class="line">         <span class="comment">// UserState为定义好的state类型</span></span><br><span class="line">         <span class="title function_">updateInfo</span>(<span class="params">partial: Partial&lt;UserState&gt;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$patch(partial);</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">// 用户登录</span></span><br><span class="line">         <span class="title function_">storeUserLogin</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">userLogin</span>(data).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">username</span> = res.<span class="property">username</span>;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">roles</span> = res.<span class="property">roles</span>;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">accessToken</span> = res.<span class="property">accessToken</span>;</span><br><span class="line">               <span class="keyword">return</span> res;</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">// 刷新用户信息</span></span><br><span class="line">         <span class="title function_">refreshUserInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">username</span> == <span class="string">&#x27;游客&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">accessToken</span> != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">               <span class="title function_">refreshUserInfo</span>(&#123;</span><br><span class="line">                  <span class="attr">accessToken</span>: <span class="variable language_">this</span>.<span class="property">accessToken</span>,</span><br><span class="line">               &#125;)</span><br><span class="line">                  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                     <span class="variable language_">this</span>.<span class="property">username</span> = res.<span class="property">username</span>;</span><br><span class="line">                     <span class="variable language_">this</span>.<span class="property">roles</span> = res.<span class="property">roles</span>;</span><br><span class="line">                     <span class="variable language_">this</span>.<span class="property">accessToken</span> = res.<span class="property">accessToken</span>;</span><br><span class="line">                  &#125;)</span><br><span class="line">                  .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                     <span class="variable language_">this</span>.<span class="property">accessToken</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                  &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 持久化保存 accessToken</span></span><br><span class="line">      <span class="attr">persist</span>: &#123;</span><br><span class="line">         <span class="attr">key</span>: <span class="string">&#x27;userInfo&#x27;</span>,</span><br><span class="line">         <span class="attr">storage</span>: sessionStorage,</span><br><span class="line">         <span class="attr">paths</span>: [<span class="string">&#x27;accessToken&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出该Store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useUserStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">useUserStoreHook</span>(pinia);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用的时候我们直接在需要使用store数据的组件中引用并使用即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&#x27;ts&#x27; setup&gt;</span><br><span class="line">import &#123; useUserStore &#125; from &#x27;@/store/modules/user&#x27;</span><br><span class="line">const userStore = useUserStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>vue3技术栈的常用的基础封装就完成了，每个人的封装习惯各不相同，只要团队用起来方便快捷就好。</p><p>一个基础的 Vue3+TypeScrpit+Vite 的项目就此构造完毕！</p><p><strong>系列文章</strong>：</p><ul><li><a href="https://juejin.cn/post/7207615983950987320">【从零到一手撕脚手架 | 第一节】配置基础项目结构 Vite + TypeScrpit + Vue3 初始化项目</a></li><li><a href="https://juejin.cn/post/7209542304863649852">【从零到一手撕脚手架 | 第二节】模块化封装 降低耦合度 封装 axios pinia router</a></li><li><a href="https://juejin.cn/post/7213310111623725117">【从零到一手撕脚手架 | 第三节】项目集成CommitLInt+ESLint+Prettier+StyleLint+LintStaged</a></li><li><a href="https://juejin.cn/post/7214759986802294844">【从零到一手撕脚手架 | 第四节】加速开发效率 使用plop生成开发模板 使用mock进行数据模拟</a></li></ul><p><strong>参考学习项目</strong>：</p><ul><li><a href="https://github.com/tobe-fe-dalao/fast-vue3">fast-vue3</a></li><li><a href="https://github.com/pure-admin/vue-pure-admin">vue-pure-admin</a></li></ul><blockquote><p>如果有任何不正确的地方请指正，我会及时更改。</p><p>更文不易，如果对你有帮助的话，请给我点个赞吧👍</p><p>关注我，后续文章不迷路⛄</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 年度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚手架 </tag>
            
            <tag> axios </tag>
            
            <tag> pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零到一手撕脚手架 | 第一节】配置基础项目结构  Vite + TypeScrpit + Vue3 初始化项目</title>
      <link href="/2023/03/27/sv3-template/1-createBaseProject/"/>
      <url>/2023/03/27/sv3-template/1-createBaseProject/</url>
      
        <content type="html"><![CDATA[<h1 id="【从零到一手撕脚手架-第一节】配置基础项目结构-Vite-TypeScrpit-Vue3-初始化项目"><a href="#【从零到一手撕脚手架-第一节】配置基础项目结构-Vite-TypeScrpit-Vue3-初始化项目" class="headerlink" title="【从零到一手撕脚手架 | 第一节】配置基础项目结构  Vite + TypeScrpit + Vue3 初始化项目"></a>【从零到一手撕脚手架 | 第一节】配置基础项目结构  Vite + TypeScrpit + Vue3 初始化项目</h1><blockquote><p>hello大家好我是雪人⛄，不知不觉断更好久了😄，经过了长时间的学习，终于踏入了前端工程化的大门，大家再日常开发中总是会用到一个开发工具：脚手架，大家在使用其他人的脚手架或者一些官方脚手架的时候，可能只懂得使用并不懂得如何实现，看到一些代码只是知其然不知其所以然，今天为大家带来一套教程，教大家入门“脚手架”，相信你一定会有所收获。</p><ul><li><strong>GitHub</strong>：<a href="https://github.com/LonelySnowman/sv3-template">LonelySnowman&#x2F;sv3-template</a></li><li><strong>官方文档</strong>：<a href="https://sv3-docs.snowhouse.space/">SV3-Family | Vue3</a></li></ul></blockquote><ul><li>前置知识：Vue全家桶，了解Vite或WebPack等构建工具，Node.js</li><li>您将收获到：从零到一构建一个规范的 Vue3+TS+Vite 脚手架</li></ul><p><strong>项目使用的依赖</strong>：</p><ul><li>使用 Vite 进行项目构建</li><li>使用 TypeScript</li><li>使用 Sass 编写样式</li><li>对 pinia，vue-router，axios 进行模块化封装</li><li>使用 CommitLint，ESLint，StyleLint，Prettier，LintStage 进行团队项目规范</li><li>使用 Mock.js 模拟数据，使用 plop 快速生成开发模板</li><li>使用 ElementPlus 组件库</li></ul><h2 id="确定项目目录结构"><a href="#确定项目目录结构" class="headerlink" title="确定项目目录结构"></a>确定项目目录结构</h2><ul><li>首先列出目录结构，大家根据目录结构直接创建目录即可，后续会给大家详解这些目录。</li></ul><blockquote><p>下面是我学习到的一些项目目录结构，大家可以参考，学习完毕后可以根据自己的习惯进行更改。</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sv3-template/</span><br><span class="line">|- .husky/# git钩子配置</span><br><span class="line">|- build/# 项目打包配置 </span><br><span class="line">|- mock/# 数据请求模拟</span><br><span class="line">|- plop-templates/# 项目开发模板</span><br><span class="line">|- public/# 不经过打包的静态资源</span><br><span class="line">|- type/# ts类型定义</span><br><span class="line">|- src/# 项目资源</span><br><span class="line">|- api/# http请求管理</span><br><span class="line">|- assets/# 经过打包的静态资源</span><br><span class="line">|- components/# 通用组件</span><br><span class="line">|- hooks/# 通用组件状态逻辑函数</span><br><span class="line">|- router/# 项目路由管理</span><br><span class="line">|- store/# 组件状态管理</span><br><span class="line">|- styles/# 项目通用样式</span><br><span class="line">|- utils/# 工具函数</span><br><span class="line">|- http/axios/ # axios封装</span><br><span class="line">|- views/# 页面组件</span><br></pre></td></tr></table></figure><ul><li>接下来讲解一个基本的Vue3脚手架需要具备哪功能</li></ul><h2 id="Vue3全家桶"><a href="#Vue3全家桶" class="headerlink" title="Vue3全家桶"></a>Vue3全家桶</h2><ul><li>我们既然要开发Vue项目，Vue全家桶当然是最重要的，使用pinia进行状态管理，使用vue-router进行路由管理，axios进行http请求等等。</li><li>下面会讲解全家桶的安装与基础配置，模块化的封装将会在下一节讲解。</li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ul><li>这里我推荐大家使用pnpm进行依赖管理，pnpm的优点大家可在网上查阅，这里就不进行概述了。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pnpm install axios pinia pinia-plugin-persistedstate vue vue-router nprogress</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本项目使用 element plus 大家可以根据个人习惯选择自己常用的组件库</span></span><br><span class="line">pnpm install element-plus @element-plus/icons-vue</span><br><span class="line"></span><br><span class="line">pnpm install -D typescript sass</span><br></pre></td></tr></table></figure><p>下面简单介绍一下这些依赖的作用，大家根据个人习惯选择安装即可。</p><ul><li>vue：(⊙﹏⊙)这个应该不用多说</li><li>axios：vue官方推荐http请求库</li><li>pinia：vue官方推荐状态管理工具</li><li>pinia-plugin-persistedstate：pinia数据持久化插件</li><li>vue-router：路由管理工具</li><li>typescript：使用TS语言</li><li>sass：css预处理</li><li>element-plus：亲民老牌组件库</li><li>nprogres：简洁美观的进度加载条组件</li></ul><p><strong>首先应该搭建一个基础的Vue项目结构</strong></p><ul><li>新建以下目录</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sv3-template/</span><br><span class="line">|- public/# 不经过打包的静态资源</span><br><span class="line">|- src/# 项目资源</span><br><span class="line">|- assets/# 经过打包的静态资源</span><br><span class="line">|- components/# 通用组件</span><br><span class="line">|- styles/# 项目通用样式</span><br><span class="line">|- utils/# 工具函数</span><br><span class="line">|- http/axios/ # axios封装</span><br><span class="line">|- views/# 页面组件</span><br><span class="line">|- App.vue  # 项目的主组件</span><br><span class="line">|- main.ts# 入口ts文件</span><br><span class="line">| - index.html # 入口html文件</span><br></pre></td></tr></table></figure><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p><strong>index.html</strong></p><ul><li>对页面进行基础配置</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>sv3-template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 令 id=&quot;app&quot; 便于vue进行挂载 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 引入main.ts文件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/src/main.ts&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>&#x2F;src&#x2F;App.vue</strong></p><ul><li>编写项目的主组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;!-- 一般vue项目都会使用vue-router --&gt;</span><br><span class="line">   &lt;!-- 所以我们这里直接写一个 router-view --&gt;</span><br><span class="line">   &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>&#x2F;src&#x2F;styles&#x2F;_reset.scss</strong></p><ul><li><code>_reset.scss</code>是进行一个对基础HTML默认样式的重置</li><li>这部分也是根据个人习惯配置即可</li><li>这里引用一个开源项目：<a href="https://github.com/jgthms/minireset.css/blob/master/minireset.css">minireset.css</a></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line">pre,</span><br><span class="line"><span class="selector-tag">iframe</span>,</span><br><span class="line">hr,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line">select &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">video</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">iframe</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>&#x2F;src&#x2F;main.ts</strong></p><ul><li>引入样式文件，挂载Vue</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./styles/_reset.scss&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>&#x2F;views&#x2F;xxx.vue</strong></p><p>创建页面结构</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">views/</span><br><span class="line">|- home/# 页面文件</span><br><span class="line">|- components/# 放置页面使用的组件</span><br><span class="line">|- xxx.vue</span><br><span class="line">|- index.vue# 经过打包的静态资源</span><br></pre></td></tr></table></figure><p>我们这里可以随便写一个简单的组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;Hello Vue&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><ul><li>然后我们需要进行对路由的配置</li></ul><p><strong>&#x2F;src&#x2F;router&#x2F;index.ts</strong></p><ul><li>这里路径中用到了 <code>@</code> 是我们配置的别名，指向了src，在后面会讲解到如何配置</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory, <span class="title class_">RouteRecordRaw</span>, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置路由</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [&#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/viwes/home/index.vue&#x27;</span>),</span><br><span class="line">   <span class="attr">meta</span>: &#123;&#125;,</span><br><span class="line">   <span class="attr">children</span>: [],</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (_to, _from, next) =&gt; &#123;</span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">start</span>();</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">_to</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p><strong>&#x2F;src&#x2F;main.ts</strong></p><ul><li>在main.ts中，令app使用router插件</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>; <span class="comment">// ++</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./styles/_reset.scss&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router); <span class="comment">// ++</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="pinia"><a href="#pinia" class="headerlink" title="pinia"></a>pinia</h3><p><strong>&#x2F;src&#x2F;store&#x2F;index.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> piniaPluginPersistedstate <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persistedstate&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"><span class="comment">// 使用pinia数据持久化插件</span></span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPluginPersistedstate);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br></pre></td></tr></table></figure><p><strong>&#x2F;src&#x2F;main.ts</strong></p><ul><li>在main.ts中，令app使用store插件</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span>; <span class="comment">// ++</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./styles/_reset.scss&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">use</span>(pinia); <span class="comment">// ++</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p><strong>&#x2F;src&#x2F;utils&#x2F;http&#x2F;index.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;</span><br><span class="line">   <span class="title class_">AxiosInstance</span>,</span><br><span class="line">   <span class="title class_">AxiosRequestConfig</span>,</span><br><span class="line">   <span class="title class_">AxiosResponse</span>,</span><br><span class="line">   <span class="title class_">AxiosError</span>,</span><br><span class="line">   <span class="title class_">InternalAxiosRequestConfig</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">service</span>: <span class="title class_">AxiosInstance</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">   <span class="attr">baseURL</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">   <span class="attr">timeout</span>: <span class="number">15000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios实例拦截请求</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">   <span class="function">(<span class="params">config: InternalAxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> config;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="function">(<span class="params">error: AxiosError</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios实例拦截响应</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">   <span class="function">(<span class="params">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="function">(<span class="params">error: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><ul><li>我们已经将vue3的基础项目结构搭建完毕，那么我们怎么才能让这个项目跑起来呢？</li><li>因为浏览器是不能识别Vue，TS，Sass这些语言的，所以我们需要一个工具将它们转变成浏览器可以识别的语言：Html，CSS，JS。Vite就可以做到这些事情，接下来教大家配置Vite帮助我们构建项目。</li></ul><h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pnpm install -D vite @vitejs/plugin-vue @vitejs/plugin-vue-jsx</span><br><span class="line"></span><br><span class="line">pnpm install -D @types/node @types/nprogress vue-tsc</span><br></pre></td></tr></table></figure><ul><li>vite：项目构建工具</li><li>@vitejs&#x2F;plugin-vue：使vite能够编译vue组件</li><li>@vitejs&#x2F;plugin-vue-jsx：使vite能够编译jsx组件</li><li>@types&#x2F;node：node类型包，使ts支持node</li><li>@types&#x2F;nprogress：nprogress的类型支持</li><li>vue-tsc：vue文件的类型检查工具</li></ul><h3 id="vite环境变量"><a href="#vite环境变量" class="headerlink" title="vite环境变量"></a>vite环境变量</h3><p>Vite官方文档对环境变量的介绍：<a href="https://cn.vitejs.dev/guide/env-and-mode.html">环境变量和模式 | Vite 官方中文文档 (vitejs.dev)</a></p><ul><li>Vite 在一个特殊的 <strong><code>import.meta.env</code></strong> 对象上暴露环境变量。</li><li>我们为了配置方便，可以将一些配置项写在环境变量中。</li></ul><p><strong>我们在项目根目录下新建三个文件</strong>：<code>.env</code>，<code>.env.production</code>，<code>.env.development</code></p><ul><li>.env：所有情况下都会加载</li><li>.env.[mode]：只在指定模式下加载</li></ul><blockquote><p>npm run dev 会加载 .env 和 .env.development 内的配置</p><p>npm run build 会加载 .env 和 .env.production 内的配置</p><p>mode 可以通过命令行 –mode 选项来重写。</p></blockquote><p><strong>.env</strong></p><ul><li><strong>注意</strong>：环境变量名称必须与VITE作为前缀，前缀可以在Vite配置中修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># axios请求的 baseURL</span><br><span class="line">VITE_APP_API_BASEURL = /api</span><br></pre></td></tr></table></figure><ul><li>剩下的<code>.env.[mode]</code>之后会介绍到，这里我们就先配置这一项即可</li></ul><p><strong>&#x2F;src&#x2F;utils&#x2F;http&#x2F;index.ts</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">service</span>: <span class="title class_">AxiosInstance</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">   <span class="comment">// 这样我们就可以在环境变量中改变 axios 的 baseURL</span></span><br><span class="line">   <span class="attr">baseURL</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_API_BASEURL</span></span><br><span class="line">   <span class="attr">timeout</span>: <span class="number">15000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="环境变量类型支持"><a href="#环境变量类型支持" class="headerlink" title="环境变量类型支持"></a>环境变量类型支持</h3><p>我们在开发过程中，环境变量可能会越来越多，我们可能想要获得智能的TypeScript语法提示来让我们知道有哪些环境变量。</p><p>在项目根目录下新建<code>types</code>文件夹</p><p><strong>&#x2F;types&#x2F;env.d.ts</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMetaEnv</span> &#123;</span><br><span class="line">   <span class="comment">// 我们每次添加完新的环境变量就在此添加一次ts类型</span></span><br><span class="line">   <span class="comment">// 这样我们就能在使用 import.meta.env 时获得ts语法提示</span></span><br><span class="line">   <span class="keyword">readonly</span> <span class="attr">VITE_APP_API_BASEURL</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMeta</span> &#123;</span><br><span class="line">   <span class="keyword">readonly</span> <span class="attr">env</span>: <span class="title class_">ImportMetaEnv</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="vite配置文件"><a href="#vite配置文件" class="headerlink" title="vite配置文件"></a>vite配置文件</h3><p><strong>vite.config.ts</strong></p><ul><li>在项目根目录下创建 <code>vite.config.ts</code> 文件</li><li>下面的配置项的解释均已注释</li><li>官网有更加详细的配置介绍：<a href="https://cn.vitejs.dev/config/">配置 Vite | Vite 官方中文文档 (vitejs.dev)</a></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig, loadEnv &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">UserConfig</span>, <span class="title class_">ConfigEnv</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>((&#123; mode &#125;: <span class="title class_">ConfigEnv</span>): <span class="function"><span class="params">UserConfig</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前工作目录</span></span><br><span class="line">    <span class="keyword">const</span> root = process.<span class="title function_">cwd</span>();</span><br><span class="line">    <span class="comment">// 获取环境变量</span></span><br><span class="line">    <span class="keyword">const</span> env = <span class="title function_">loadEnv</span>(mode, root);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 项目根目录 </span></span><br><span class="line">      root,</span><br><span class="line">        <span class="comment">// 项目部署的基础路径</span></span><br><span class="line">      <span class="attr">base</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">publicDir</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./public&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)), <span class="comment">// 无需处理的静态资源位置</span></span><br><span class="line">      <span class="attr">assetsInclude</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src/assets&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)), <span class="comment">// 需要处理的静态资源位置</span></span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">          <span class="comment">// Vue模板文件编译插件</span></span><br><span class="line">          <span class="title function_">vue</span>(),</span><br><span class="line">          <span class="comment">// jsx文件编译插件</span></span><br><span class="line">          <span class="title function_">vueJsx</span>(),</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// 运行后本地预览的服务器</span></span><br><span class="line">      <span class="attr">server</span>: &#123;</span><br><span class="line">         <span class="comment">// 是否开启https</span></span><br><span class="line">         <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="comment">// 指定服务器应该监听哪个 IP 地址。 如果将此设置为 0.0.0.0 或者 true 将监听所有地址，包括局域网和公网地址。</span></span><br><span class="line">         <span class="attr">host</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="comment">// 开发环境预览服务器端口</span></span><br><span class="line">         <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">         <span class="comment">// 启动后是否自动打开浏览器</span></span><br><span class="line">         <span class="attr">open</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="comment">// 是否开启CORS跨域</span></span><br><span class="line">         <span class="attr">cors</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="comment">// 代理服务器</span></span><br><span class="line">         <span class="comment">// 帮助我们开发时解决跨域问题</span></span><br><span class="line">         <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// 这里的意思是 以/api开头发送的请求都会被转发到 http://xxx:3000</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">               <span class="attr">target</span>: <span class="string">&#x27;http://xxx:3000&#x27;</span>,</span><br><span class="line">               <span class="comment">// 改变 Host Header</span></span><br><span class="line">               <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="comment">// 发起请求时将 &#x27;/api&#x27; 替换为 &#x27;&#x27;</span></span><br><span class="line">               <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 打包配置</span></span><br><span class="line">      <span class="attr">build</span>: &#123;</span><br><span class="line">         <span class="comment">// 关闭 sorcemap 报错不会映射到源码</span></span><br><span class="line">         <span class="attr">sourcemap</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="comment">// 打包大小超出 4000kb 提示警告</span></span><br><span class="line">         <span class="attr">chunkSizeWarningLimit</span>: <span class="number">4000</span>,</span><br><span class="line">         <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">            <span class="comment">// 打包入口文件 根目录下的 index.html</span></span><br><span class="line">            <span class="comment">// 也就是项目从哪个文件开始打包</span></span><br><span class="line">            <span class="attr">input</span>: &#123;</span><br><span class="line">               <span class="attr">index</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./index.html&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)),</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 静态资源分类打包</span></span><br><span class="line">            <span class="attr">output</span>: &#123;</span><br><span class="line">               <span class="attr">format</span>: <span class="string">&#x27;esm&#x27;</span>,</span><br><span class="line">               <span class="attr">chunkFileNames</span>: <span class="string">&#x27;static/js/[name]-[hash].js&#x27;</span>,</span><br><span class="line">               <span class="attr">entryFileNames</span>: <span class="string">&#x27;static/js/[name]-[hash].js&#x27;</span>,</span><br><span class="line">               <span class="attr">assetFileNames</span>: <span class="string">&#x27;static/[ext]/[name]-[hash].[ext]&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">         &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 配置别名</span></span><br><span class="line">      <span class="attr">resolve</span>: &#123;</span><br><span class="line">         <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)),</span><br><span class="line">            <span class="string">&#x27;#&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./types&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)),</span><br><span class="line">         &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ts配置文件"><a href="#ts配置文件" class="headerlink" title="ts配置文件"></a>ts配置文件</h3><ul><li>项目根目录下新建<code>tsconfig.json</code></li></ul><p><strong>&#x2F;tsconfig.json</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">      <span class="comment">// 编译出JS的目标ES版本</span></span><br><span class="line">      <span class="string">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">      <span class="comment">// 使用的ES版本</span></span><br><span class="line">      <span class="string">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">      <span class="comment">// 用于选择模块解析策略，有&#x27;node&#x27;和&#x27;classic&#x27;两种类型</span></span><br><span class="line">      <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">      <span class="comment">// 开启严格模式</span></span><br><span class="line">      <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 强制代码中使用的模块文件名必须和文件系统中的文件名保持大小写一致</span></span><br><span class="line">      <span class="string">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 允许使用 xxx 代替 * as xxx 导入</span></span><br><span class="line">      <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 指定 jsx 代码的生成: &#x27;preserve&#x27;, &#x27;react-native&#x27;, or &#x27;react&#x27;</span></span><br><span class="line">      <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">      <span class="comment">// 用来指定编译时是否生成.map文件</span></span><br><span class="line">      <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性</span></span><br><span class="line">      <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 是否可以导入 json module</span></span><br><span class="line">      <span class="string">&quot;resolveJsonModule&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 是否检测定义了但是没使用的变量</span></span><br><span class="line">      <span class="string">&quot;noUnusedLocals&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 是否检查是否有在函数体中没有使用的参数</span></span><br><span class="line">      <span class="string">&quot;noUnusedParameters&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 是否启用实验性的装饰器特性</span></span><br><span class="line">      <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// ts中可以使用的库 这里配置为 dom 与 es模块</span></span><br><span class="line">      <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;dom&quot;</span>, <span class="string">&quot;esnext&quot;</span>],</span><br><span class="line">      <span class="comment">// 不允许变量或函数参数具有隐式any类型</span></span><br><span class="line">      <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 启用阻止对下载库的类型检查</span></span><br><span class="line">      <span class="string">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// types用来指定需要包含的模块</span></span><br><span class="line">      <span class="string">&quot;types&quot;</span>: [<span class="string">&quot;vite/client&quot;</span>, <span class="string">&quot;element-plus/global&quot;</span>],</span><br><span class="line">      <span class="comment">// 编译的时候删除注释</span></span><br><span class="line">      <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 使用绝对路径时使用baseUrl去解析导入路径</span></span><br><span class="line">      <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line">      <span class="comment">// 为导入路径配置别名</span></span><br><span class="line">      <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">         <span class="string">&quot;@/*&quot;</span>: [<span class="string">&quot;src/*&quot;</span>],</span><br><span class="line">         <span class="string">&quot;#/*&quot;</span>: [<span class="string">&quot;types/*&quot;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 配置虚拟目录</span></span><br><span class="line">      <span class="string">&quot;rootDirs&quot;</span>: []</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 指定需要编译文件</span></span><br><span class="line">   <span class="string">&quot;include&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;src/**/*.ts&quot;</span>,</span><br><span class="line">      <span class="string">&quot;src/**/*.d.ts&quot;</span>,</span><br><span class="line">      <span class="string">&quot;src/**/*.tsx&quot;</span>,</span><br><span class="line">      <span class="string">&quot;src/**/*.vue&quot;</span>,</span><br><span class="line">      <span class="string">&quot;types/**/*.d.ts&quot;</span>,</span><br><span class="line">      <span class="string">&quot;types/**/*.ts&quot;</span>,</span><br><span class="line">      <span class="string">&quot;build/**/*.ts&quot;</span>,</span><br><span class="line">      <span class="string">&quot;build/**/*.d.ts&quot;</span>,</span><br><span class="line">      <span class="string">&quot;mock/**/*.ts&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vite.config.ts&quot;</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="comment">// 指定不需要编译的文件</span></span><br><span class="line">   <span class="string">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;dist&quot;</span>, <span class="string">&quot;**/*.js&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指令配置"><a href="#指令配置" class="headerlink" title="指令配置"></a>指令配置</h3><ul><li>最后我们将构建指令加入 package.json中</li></ul><p><strong>&#x2F;package.json</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite --mode development&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="comment">// 先进行语法检查 再进行项目打包</span></span><br><span class="line">   <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-tsc --noEmit --skipLibCheck &amp;&amp; vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><strong>接下来我们就可以运行项目吧项目跑起来啦！</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm run dev</span><br></pre></td></tr></table></figure><p>一个基础的 Vue3+TypeScrpit+Vite 的项目就此构造完毕！</p><p><strong>系列文章</strong>：</p><ul><li><a href="https://juejin.cn/post/7207615983950987320">【从零到一手撕脚手架 | 第一节】配置基础项目结构 Vite + TypeScrpit + Vue3 初始化项目</a></li><li><a href="https://juejin.cn/post/7209542304863649852">【从零到一手撕脚手架 | 第二节】模块化封装 降低耦合度 封装 axios pinia router</a></li><li><a href="https://juejin.cn/post/7213310111623725117">【从零到一手撕脚手架 | 第三节】项目集成CommitLInt+ESLint+Prettier+StyleLint+LintStaged</a></li><li><a href="https://juejin.cn/post/7214759986802294844">【从零到一手撕脚手架 | 第四节】加速开发效率 使用plop生成开发模板 使用mock进行数据模拟</a></li></ul><p><strong>参考学习项目</strong>：</p><ul><li><a href="https://github.com/tobe-fe-dalao/fast-vue3">fast-vue3</a></li><li><a href="https://github.com/pure-admin/vue-pure-admin">vue-pure-admin</a></li></ul><blockquote><p>如果有任何不正确的地方请指正，我会及时更改。</p><p>更文不易，如果对你有帮助的话，请给我点个赞吧👍</p><p>关注我，后续文章不迷路⛄</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 年度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【雪人日记】大二下半学期已过四分之一</title>
      <link href="/2023/03/17/diary/2023-3-17/"/>
      <url>/2023/03/17/diary/2023-3-17/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f9d67664abf50dd45c2a2201dc777e81e9abeb7aaf024726740592b714a392e3">470d40a13319dd5202c7e8667eadc5c9dff3ccb84d4bcff22c717d465e98526a3aef0124637f4316ef35591b77e4dddf5589913b87a47bd72899154d764dc63cc8fabf6f23ebb9e8140f5dc535143d950052d6f500d45712f3d13fc0e4d4c61cd409760d13560a8b27a53f88cd0d7c02da52b36a4f2ce5d84f2355355b5cd8af85937bba41a81df081a316eb7cefad1cb2b0642c5a97a55798ae25b8165fdce923056a8d7224316806d09f3f38bdcd681bc65a986abd067304188d08978ae4782d11c7798f60ddb2027b60819921356b08bd203e9c340d44c5d6a764b349cccf2e141a0bd09f99af5e1c0f8a21ebf00c811a1a874f7ff98f6be43fe33d1c75764c5471f5f67336a04a7517c6b2e5ec60d27b55daeca1d31540420089b1495021c4b6063b467819efdfa61c6c4c92422c1794559c03c2a1dde8669a5c8d842b245a3d2f87e5ae3d5ee9ef76e772b3a70a39d95b646fd07438f8242585fd7c08f87f890bf32bcd799efe0a9acc2fef693f71f88529ba4d1b50860fa934e14ee12bc8d15cf118ff40b0bcd0b3cb672dfb7abd5447a245e4d9d28317e9e4bebe35e8608920b104d94d1f522d1cd29fa35ae1c1c1e1c48f098576c237fa50c7e8b78606e83efa6376b988013625e8c451a354782fbd42137b008440bac8c39d225a7359ebd28aa45f10c4e160ee074ba362cfa8acffa73f4526ef9c8efd6d000a8d0a9d7d22575d4e4e9db76ed722f052905e94e7dd0c59fa6a8ab17a26f5c5c1969ad7fd02ce774eb51a5a401d2d6ab31c806947d9f0fa4e6240885240d0eaaf1c245007f00ec89f28e0a81ca47ac238c653ecc1f725b5e1295c7b8aed3d526392a9f8944b4800b6f0cc9813e049061d08854696ea55250a1d77b0fa094b4976610caad718818e6d13033da6438e230414a2132a120651ad8292e9280bed9d95c9420e4dfc362fc955e2ee195acd0f1d00fe191e7afbd69550bc986e955bf63c529a60d057b812b5c6c0ebbd1f26526d15910a1c5af4e454af7c01d05590a6a928dfef1b446e2f4a91b0d3965b6bf9be918a7b1b917399ace30a26ebfdea1c897d0150f7c0c7056d9c9dd95d489ed485929607ffa64806f9eb7bdc44b2948f5e9e18d712c2c2f54c9d5019815980b180e73d38f53851e14ef9dc8ff173919f692a2bf4fc52b0d4b91ac031481ff54ef55897e6ff16c7990dc620d55ee082f0463463415b03ad782125cb7d0ea00baef076ffb907ef8c3acb995f479ebe23c29681e599c2e4c3460916b4b21ac662245e02154687093e6798e51c9efc4b548ceac3bdc067e2e674a5846ae6ceed8445484fe82e666a1ef251d0e2c9de8bcd74b04f33e9c4df587e4ffb0335a61887b3d87ec731988d4cfc9f105f2a64005521d4f9a4749e1a868da228da99dd342536c6bcbef7fbaf6f809fb6fdc998036fbd22d794924223bcef2cb0a2576d2ee485898efe229ba2968e19473f6e6b06d4765b77f0b2725333e8bd7739029b46ea93102eb4a1407a16161a341dd599bbc444852b9a7c1c5a99217f2e6ce3c36bdd8a917ab5b4f6a3e36cfb7d239b3255b35a3ee5d7da393d61bc6eb06402f5cfd43508b6481048800d5e714d437a41df78f2c5d54c23b1b5d99b2d368c61ea57b54c922da52a519bb346705e6867952f35f3612e9b2fb4715de32e10d8a87cf069c3a6f323425e612b59b7bffe0376fd30ffa1d265105a866d38182aedbc5024b9f36319bad0b48e826795e5b3e4e34622ebd177a27302d23d2854773ab28d3a5b18323e97c3dcf91d9403c04521f1c86f4a7c9f918acff91076557abc68d00e0c1082603b31608364a3df2382cba84b42bb7d013f37beafc36fe7fe0ad0c8a1fc8a5655e7e9fd7ca63e4128a14f02364020562dc326a960d8db5ce759172b68572cfac7a755419b36f96e0098ddb9f2452443126ebd19f700933554e4fa7edae0c82ac42acc48cb2ef605c811a23bb64b5dfa0b7c3039142d8de83154dcc66c91694b103f1fa331fd068e8fc015e76fabbe12270c4eaba5a443c4f005e56526871c4207714d03a617fa9bdc1b48cfab4f50a9ab8e157d1bdb2bc4c1e1adf4dde8c914a753bf31d0f27142016fe25ac9860160847549a88136d0cae1f237752f5cba17972a0c2ca9878af1623b1f0c00c43523010ca83633a1fb8c348f4e8dc53f8cb63298e47025739971ea8c296a27ce03fa61aa89eb53578672b663242a2c34b190a25842a8a3fd38f1c358b04c1d00bffdd515172f7674bcc209bd794b73af4332ae26e329518f7b733617e1afdc55d8a5bbbfb27ea35b08eeee5fdd5932b4e8652f22</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 雪人日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雪人日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法日记】格雷编码</title>
      <link href="/2023/02/23/leetcode/GrayCode/"/>
      <url>/2023/02/23/leetcode/GrayCode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>涨知识了，最近的每日一题都好难💥</p></blockquote><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p>百度百科：「<a href="https://baike.baidu.com/item/%E6%A0%BC%E9%9B%B7%E7%A0%81">格雷码</a>」</p><h2 id="我们先看看普通的格雷编码"><a href="#我们先看看普通的格雷编码" class="headerlink" title="我们先看看普通的格雷编码"></a>我们先看看普通的格雷编码</h2><p><a href="https://leetcode.cn/problems/gray-code/solutions/">LeetCode89</a></p><h3 id="格雷码规律解析"><a href="#格雷码规律解析" class="headerlink" title="格雷码规律解析"></a>格雷码规律解析</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># n为1时 0 1 因为只有这两个数</span><br><span class="line">n = 1  [0, 1]</span><br><span class="line"></span><br><span class="line"># n为2时前两个数不变只是因为位数变了向前补0 [00, 01]</span><br><span class="line"># n为2时后两个数可以总结出一个规律 </span><br><span class="line">    # 最高位补1 低位数由n-1的数倒序排列 [11, 10]</span><br><span class="line">n = 2  [00，01，11，10]</span><br><span class="line"></span><br><span class="line"># n=3 时规律也是如此</span><br><span class="line">n = 3  [000, 001, 011, 010, 110, 111, 101, 100]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>那么我们就可以根据这个思路实现代码</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> grayCode = <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 起始数字为0</span></span><br><span class="line">    <span class="keyword">const</span> ret = [<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// i 是需要在第i-1位补1</span></span><br><span class="line">    <span class="comment">// 刚开始需要在第0位补构成 [0, 1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 我们在这里获取length进行倒序遍历先后补充</span></span><br><span class="line">        <span class="keyword">const</span> m = ret.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="comment">// (1 &lt;&lt; (i - 1)) 代表最高位补1</span></span><br><span class="line">            <span class="comment">// ret[j] 与低位的 0 进行或运算还是 ret[j]</span></span><br><span class="line">            <span class="comment">// 而我们的j是倒序遍历 这样就可以做到格雷编码的规律了</span></span><br><span class="line">            ret.<span class="title function_">push</span>(ret[j] | (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="本题格雷编码"><a href="#本题格雷编码" class="headerlink" title="本题格雷编码"></a>本题格雷编码</h2><p><a href="https://leetcode.cn/problems/circular-permutation-in-binary-representation/">LeetCode1238</a></p><h2 id="异或-规律解析"><a href="#异或-规律解析" class="headerlink" title="异或 ^ 规律解析"></a>异或 ^ 规律解析</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 我们需要用到三个推论</span><br><span class="line">    # 异或两次得原值</span><br><span class="line">    # 异或本身为0</span><br><span class="line">    # 异或0为本身</span><br><span class="line"></span><br><span class="line"># 也就是一个数异或同一个数两次，结果还是那个数</span><br><span class="line">1 ^ 1 ^ 1 = 1</span><br><span class="line">1 ^ 1 ^ 0 = 0</span><br><span class="line">111 ^ 111 ^ 111 = 111</span><br><span class="line"></span><br><span class="line"># 一个数异或它自己一定为零</span><br><span class="line">1 ^ 1 = 0</span><br><span class="line">111 ^ 111 = 000</span><br><span class="line">101 ^ 101 = 000</span><br><span class="line"></span><br><span class="line"># 一个数异或0一定为本身</span><br><span class="line">010 ^ 000 = 010</span><br><span class="line">111 ^ 000 = 111</span><br><span class="line"></span><br><span class="line"># 也可以理解成我们先求出正常版的格雷编码</span><br><span class="line"># 再将每个数都 ^ start 就求出来了</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>那么我们岂不是可以先异或自己将起始值换为0</li><li>再进行格雷编码规律的运算</li><li>最后再异或变回去</li><li>就可以解出本题呢？</li></ul><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">n</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">start</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number[]</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> circularPermutation = <span class="keyword">function</span>(<span class="params">n, start</span>) &#123;</span><br><span class="line">    <span class="comment">// 起始数字为 start</span></span><br><span class="line">    <span class="keyword">const</span> ret = [start];</span><br><span class="line">    <span class="comment">// i 是需要在第i-1位补1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// m 是需要将多少数翻转</span></span><br><span class="line">        <span class="keyword">const</span> m = ret.<span class="property">length</span>;</span><br><span class="line">        <span class="comment">// 将之前的数倒序翻转并向前补1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="comment">// 此处翻转填补每个数</span></span><br><span class="line">            <span class="comment">// (1 &lt;&lt; (i - 1)) 代表最高位补1</span></span><br><span class="line">            <span class="comment">// ret[j] 与低位的 0 进行或运算还是 ret[j]</span></span><br><span class="line">            <span class="comment">// 而我们的j是倒序遍历 就可以做到格雷编码的规律了</span></span><br><span class="line">            <span class="comment">// ^ start 可以让 起始位变为 000 再次 ^ 就会变回原来的数</span></span><br><span class="line">            <span class="comment">// 由于初始位置 ^ 了 start 为了后面的规律保持一致也要 ^ start</span></span><br><span class="line">            ret.<span class="title function_">push</span>(((ret[j] ^ start) | (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))) ^ start);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 便于理解版</span></span><br><span class="line"><span class="keyword">var</span> circularPermutation = <span class="keyword">function</span>(<span class="params">n, start</span>) &#123;</span><br><span class="line">    <span class="comment">// 先求常规格雷编码</span></span><br><span class="line">    <span class="keyword">const</span> ret = [<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> m = ret.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            ret.<span class="title function_">push</span>(ret[j] | (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 再将每个数异或start</span></span><br><span class="line">    <span class="keyword">return</span> ret.<span class="title function_">map</span>(<span class="function"><span class="params">x</span>=&gt;</span>x^start);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 格雷编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【算法日记】快速幂：关于我知道答案却做不出来这档事</title>
      <link href="/2023/02/05/leetcode/QuicklyMOD/"/>
      <url>/2023/02/05/leetcode/QuicklyMOD/</url>
      
        <content type="html"><![CDATA[<h1 id="【算法日记】快速幂：关于我知道答案却做不出来这档事"><a href="#【算法日记】快速幂：关于我知道答案却做不出来这档事" class="headerlink" title="【算法日记】快速幂：关于我知道答案却做不出来这档事"></a>【算法日记】快速幂：关于我知道答案却做不出来这档事</h1><blockquote><p>⭐LeetCode第330场周赛，直接卡在了第二题😭，掉大分，学到一手快速幂。</p><p>⭐本文包含以下内容：快速幂，快速幂取余。</p><p>⭐参考教程：</p><ul><li><a href="https://leetcode.cn/problems/count-collisions-of-monkeys-on-a-polygon/solutions/2081357/by-xuhuayy-fycy/?languageTags=javascript">2550. 猴子碰撞的方法数 - 力扣（Leetcode）</a></li><li><a href="https://leetcode.cn/problems/powx-n/solutions/238559/powx-n-by-leetcode-solution/">50. Pow(x, n) - 力扣（Leetcode）</a></li><li><a href="https://leetcode.cn/problems/powx-n/solutions/1538132/jsjie-ti-si-lu-qing-xi-ming-liao-by-inte-iv1p/?languageTags=javascript">50. Pow(x, n) - 力扣（Leetcode）</a></li></ul></blockquote><ul><li><code>Math.pow(x, n)</code> 这个函数大家应该并不陌生，他就是用来计算 x^n^ 的函数，那么他是怎么实现的呢？</li><li>快速幂的讲解推荐大家去看一个视频：<a href="https://leetcode.cn/problems/powx-n/solutions/238559/powx-n-by-leetcode-solution/">50. Pow(x, n) - 力扣（Leetcode）</a></li><li>下面给出代码实现，使用语言：TypeScript</li></ul><h2 id="暴力计算"><a href="#暴力计算" class="headerlink" title="暴力计算"></a>暴力计算</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接将x连乘n次即可</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(n)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myPow</span>(<span class="params">x: <span class="built_in">number</span>, n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">m</span>: <span class="built_in">number</span> = <span class="number">1</span></span><br><span class="line">    <span class="comment">// 遇到负数需要连乘 1/x</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>) x = <span class="number">1</span>/x</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="title class_">Math</span>.<span class="title function_">abs</span>(n);i++) &#123;</span><br><span class="line">        m*=x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速幂（理解）"><a href="#快速幂（理解）" class="headerlink" title="快速幂（理解）"></a>快速幂（理解）</h2><ul><li>举一个简单的例子<ul><li>计算 2^4^ 正常来说我们会直接依次连乘 <code>2*2*2*2</code></li><li>我们把他拆成两半来看 <code>(2*2)*(2*2)</code> 我们发现 2*2 仅需计算一次 再将两份相乘即可得到答案 可以减少计算次数</li><li>如果n为基数则拆成 两份相乘再乘以 x，例：2^7^ <code>(2*2*2) * (2*2*2) * 2</code> 依然可以减少计算次数</li></ul></li><li>那么我们便可以得到一个公式<ul><li>x为偶数：x^n^ &#x3D;&#x3D; (x*x)^n&#x2F;2^</li><li>x为奇数：x^n^ &#x3D;&#x3D; (x*x)^n&#x2F;2^ * x</li></ul></li><li>以上便是快速幂的基本原理，直接带入计算并加入一些特殊情况便可实现快速幂。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对 n 进行折半计算，无需重复连乘</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(logn)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myPow</span>(<span class="params">x: <span class="built_in">number</span>, n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">myPowHandler</span>(<span class="params">x: <span class="built_in">number</span>, n: <span class="built_in">number</span></span>): <span class="built_in">number</span>&#123;</span><br><span class="line">        <span class="comment">// n 等于 1 返回本身即可</span></span><br><span class="line">        <span class="keyword">if</span>(n===<span class="number">1</span>) <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">        <span class="comment">// n为奇数需要计算 x**((n-1)/2) * x**((n-1)/2) * x**1</span></span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>!==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> half = <span class="title function_">myPowHandler</span>(x, <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">2</span>))</span><br><span class="line">            <span class="keyword">return</span> half * half * x</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// n为偶数需要计算 x**(n/2) * x**(n/2)</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> half = <span class="title function_">myPowHandler</span>(x, <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">2</span>))</span><br><span class="line">            <span class="keyword">return</span> half * half</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 特殊条件</span></span><br><span class="line">    <span class="comment">// x为1 或 n为0 即返回 1</span></span><br><span class="line">    <span class="keyword">if</span>(x===<span class="number">1</span> || n===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">// 负数情况返回 1/x**n</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> / <span class="title function_">myPowHandler</span>(x, <span class="title class_">Math</span>.<span class="title function_">abs</span>(n))</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">myPowHandler</span>(x, n)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快速幂（简化）"><a href="#快速幂（简化）" class="headerlink" title="快速幂（简化）"></a>快速幂（简化）</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myPow</span>(<span class="params">x, n</span>) &#123;</span><br><span class="line">    <span class="comment">// 特殊情况判断</span></span><br><span class="line">    <span class="keyword">if</span>(n===<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n===<span class="number">1</span>) <span class="keyword">return</span> x</span><br><span class="line">    <span class="comment">// 负数计算为倒数的幂</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">myPow</span>(<span class="number">1</span>/x, <span class="title class_">Math</span>.<span class="title function_">abs</span>(n))</span><br><span class="line">    <span class="comment">// 判断奇偶</span></span><br><span class="line">    <span class="comment">// 如果为偶数计算 (x*x)**(n/2)</span></span><br><span class="line">    <span class="comment">// 如果为奇数计算 (x*x)**(n/2)*x</span></span><br><span class="line">    <span class="comment">// 递归结束条件为 n===0 || n===1 （即条件一）</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> n%<span class="number">2</span>===<span class="number">0</span> ? <span class="title function_">myPow</span>(x*x, n/<span class="number">2</span>) : <span class="title function_">myPow</span>(x*x, <span class="title class_">Math</span>.<span class="title function_">floor</span>(n/<span class="number">2</span>))*x</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="猴子碰撞的方法数（快速幂取余）"><a href="#猴子碰撞的方法数（快速幂取余）" class="headerlink" title="猴子碰撞的方法数（快速幂取余）"></a>猴子碰撞的方法数（快速幂取余）</h2><ul><li>我们来看看这道周赛题吧，LeetCode链接：<a href="https://leetcode.cn/problems/count-collisions-of-monkeys-on-a-polygon/description/">2550. 猴子碰撞的方法数 - 力扣（Leetcode）</a></li></ul><p>现在有一个正凸多边形，其上共有 <code>n</code> 个顶点。顶点按顺时针方向从 <code>0</code> 到 <code>n - 1</code> 依次编号。每个顶点上 <strong>正好有一只猴子</strong> 。下图中是一个 6 个顶点的凸多边形。</p><p><img src="https://assets.leetcode.com/uploads/2023/01/22/hexagon.jpg" alt="img"></p><p>每个猴子同时移动到相邻的顶点。顶点 <code>i</code> 的相邻顶点可以是：</p><ul><li>顺时针方向的顶点 <code>(i + 1) % n</code> ，或</li><li>逆时针方向的顶点 <code>(i - 1 + n) % n</code> 。</li></ul><p>如果移动后至少有两个猴子位于同一顶点，则会发生 <strong>碰撞</strong> 。</p><p>返回猴子至少发生 <strong>一次碰撞</strong> 的移动方法数。由于答案可能非常大，请返回对 <code>109+7</code> 取余后的结果。</p><p><strong>注意</strong>，每只猴子只能移动一次。</p><ul><li>一下发现规律的我，只有全部顺时针或者全部逆时针两种情况不符合题意</li><li>我直接 <code>return ((2**n)) % ((10**9)+7) -2</code> ，太年轻了，2**n 过大变成了 Infinity 导致数据丢失，绞尽脑汁还是没想出解决方案。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察后发现我们可以知道答案是 x**n - 2</span></span><br><span class="line"><span class="comment">// 并且答案可能过大需要取余</span></span><br><span class="line"><span class="comment">// 由于精度问题 均需要使用BigInt 而不是Number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">monkeyMove</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MOD</span> = <span class="title class_">BigInt</span>(<span class="number">1e9</span> + <span class="number">7</span>)</span><br><span class="line">    <span class="comment">// 直接把快速幂搬过来加上取余即可</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">myPow</span>(<span class="params">x: <span class="built_in">bigint</span>, n: <span class="built_in">bigint</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n===<span class="number">0n</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n===<span class="number">1n</span>) <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> n%<span class="number">2n</span>===<span class="number">0n</span> ? <span class="title function_">myPow</span>(x*x%<span class="variable constant_">MOD</span>, n/<span class="number">2n</span>) : <span class="title function_">myPow</span>(x*x%<span class="variable constant_">MOD</span>, n/<span class="number">2n</span>)*x</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// +MOD是因为-2后结果可能为负数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>((<span class="title function_">myPow</span>(<span class="number">2n</span>, <span class="title class_">BigInt</span>(n)) - <span class="number">2n</span> + <span class="variable constant_">MOD</span>) % <span class="variable constant_">MOD</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>⭐以上就是全部解题内容啦，如果对你有帮助请给我点个赞吧</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】黑马程序员Node.js全套入门教程 | 基础篇</title>
      <link href="/2023/01/29/NodeJS-01/"/>
      <url>/2023/01/29/NodeJS-01/</url>
      
        <content type="html"><![CDATA[<h1 id="【学习笔记】黑马程序员Node-js全套入门教程-基础篇"><a href="#【学习笔记】黑马程序员Node-js全套入门教程-基础篇" class="headerlink" title="【学习笔记】黑马程序员Node.js全套入门教程 | 基础篇"></a>【学习笔记】黑马程序员Node.js全套入门教程 | 基础篇</h1><blockquote><p>⛄最近要写一些npm命令发现文件读写和路径API忘记了，索性直接复习了一遍NodeJS，边学边忘真的痛苦。</p><p>⛄本文包含以下内容：对NodeJS的基础介绍，NodeJS的内置包的简单介绍，CommonJS模块化介绍，npm包下载与发布介绍。</p><p>⭐<strong>注</strong>：本文是对<strong>黑马程序员Node.js全套入门教程</strong>的学习笔记记录，加入了一些自己的练习改动与思考。</p><p>⭐<strong>推荐大家去看原视频</strong>：<a href="https://www.bilibili.com/video/BV1a34y167AZ/?vd_source=f180962fb6ac13c58e2bc143f0318c2a">黑马程序员Node.js全套入门教程</a></p></blockquote><h2 id="初识NodeJs"><a href="#初识NodeJs" class="headerlink" title="初识NodeJs"></a>初识NodeJs</h2><h3 id="思考与认识"><a href="#思考与认识" class="headerlink" title="思考与认识"></a>思考与认识</h3><h4 id="JS为什么可以在浏览器中被执行"><a href="#JS为什么可以在浏览器中被执行" class="headerlink" title="JS为什么可以在浏览器中被执行"></a>JS为什么可以在浏览器中被执行</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">====浏览器====</span><br><span class="line">待执行的JS代码</span><br><span class="line">↓</span><br><span class="line">JavaScript解析引擎</span><br><span class="line">====浏览器====</span><br></pre></td></tr></table></figure><p>浏览器中含有JavaScript解析引擎负责解析JS代码</p><ul><li>不同的浏览器使用不同的JavaScript解析引擎：<ul><li>Chrome &#x3D;&gt; V8</li><li>Firefox &#x3D;&gt; OdinMonkey（奥丁猴）</li><li>Safri &#x3D;&gt; JSCore</li><li>IE浏览器 &#x3D;&gt; Chakra（查克拉）</li><li>等…</li></ul></li></ul><p>Chrome浏览器的V8解析引擎性能最好</p><h4 id="为什么JavaScript可以操作DOM和BOM"><a href="#为什么JavaScript可以操作DOM和BOM" class="headerlink" title="为什么JavaScript可以操作DOM和BOM"></a>为什么JavaScript可以操作DOM和BOM</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">====浏览器====</span><br><span class="line">DOMAPI BOMAPI AjaxAPI</span><br><span class="line">↓</span><br><span class="line">待执行的JS代码（调用WebAPI）</span><br><span class="line">↓</span><br><span class="line">JavaScript解析引擎</span><br></pre></td></tr></table></figure><p>每个浏览器都内置了DOM、BOM这样的API函数，因此，浏览器中的JavaScript才可以调用它们。</p><h4 id="浏览器中的JavaScript运行环境"><a href="#浏览器中的JavaScript运行环境" class="headerlink" title="浏览器中的JavaScript运行环境"></a>浏览器中的JavaScript运行环境</h4><ul><li><strong>运行环境</strong>是指<strong>代码正常运行所需的必要环境</strong>。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">====Chrome浏览器运行环境====</span><br><span class="line">V8引擎 内置API</span><br><span class="line">↑↓</span><br><span class="line">待执行的JavaScript代码</span><br><span class="line">====Chrome浏览器运行环境====</span><br></pre></td></tr></table></figure><ol><li>V8引擎负责解析和执行JavaScript 代码。</li><li>内置API是由运行环境提供的特殊接口，只能在所属的运行环境中被调用。</li></ol><h4 id="JavaScript能否做后端开发"><a href="#JavaScript能否做后端开发" class="headerlink" title="JavaScript能否做后端开发"></a>JavaScript能否做后端开发</h4><ul><li>JS可以在浏览器中运行，我们需要通过Node.js让JS代码在服务端运行</li></ul><h3 id="Node-js-简介"><a href="#Node-js-简介" class="headerlink" title="Node.js 简介"></a>Node.js 简介</h3><h4 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h4><ul><li>Node.js 是一个基于Chrome V8引擎的JavaScript运行环境。</li><li>官网地址：<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></li></ul><h4 id="Node-js中的JavaScript运行环境"><a href="#Node-js中的JavaScript运行环境" class="headerlink" title="Node.js中的JavaScript运行环境"></a>Node.js中的JavaScript运行环境</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">====Node.js运行环境====</span><br><span class="line">V8引擎 内置API（fs path http JS内置对象等）</span><br><span class="line">↑↓</span><br><span class="line">待执行的JavaScript代码</span><br><span class="line">====Chrome浏览器运行环境====</span><br></pre></td></tr></table></figure><ul><li>浏览器是JavaScript 的前端运行环境。</li><li>Node.js 是JavaScript的后端运行环境。</li><li>Node.js 中无法调用DOM和BOM等浏览器内置API。</li></ul><h4 id="Node-js-可以做什么"><a href="#Node-js-可以做什么" class="headerlink" title="Node.js 可以做什么"></a>Node.js 可以做什么</h4><p>Node,js作为一个JavaScript 的运行环境，仅仅提供了基础的功能和API。然而，基于Node.,js提供的这些基础能，很多强大的工具和框架如雨后春笋，层出不穷，所以学会了Node.js，可以让前端程序员胜任更多的工作和岗位。</p><ul><li>基于 <a href="http://www.expressjs.com.cn/">Express 框架 (opens new window)</a>，可以快速构建 Web 应用</li><li>基于 <a href="https://electronjs.org/">Electron 框架 (opens new window)</a>，可以构建跨平台的桌面应用</li><li>基于 <a href="http://restify.com/">restify 框架 (opens new window)</a>，可以快速构建 API 接口项目</li><li>读写和操作数据库、创建实用的命令行工具辅助前端开发</li><li>等…</li></ul><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>如果希望通过Node.,js 来运行Javascript 代码，则必须在计算机上安装Node.js环境才行。</p><ul><li>前往官网下载安装：<a href="https://nodejs.org/en/">节点.js (nodejs.org)</a></li></ul><ol><li><p>区分<strong>LTS</strong>版本和<strong>Current</strong>版本的不同</p><ul><li>LTS为长期稳定版，对于追求稳定性的企业级项目来说，推荐安装LTS版本的Node.js。</li><li>Current 为新特性尝鲜版，对热衷于尝试新特性的用户来说，推荐安装Current 版本的Node.js。但是，Current 版本中可能存在隐藏的Bug 或安全性漏洞，因此不推荐在企业级项目中使用Current版本的 Node.js</li></ul></li><li><p>查看已安装的Node.js版本号</p><ul><li>打开终端输入<code>node -v</code>，即可查看node.js版本号</li></ul></li><li><p>什么是终端</p><ul><li>终端(英文: Terminal)是专门为开发人员设计的，用于实现人机交互的一种方式。</li></ul></li></ol><ul><li>使用<code>node &lt;js文件名&gt;</code>运行js文件</li></ul><h2 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h2><h3 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h3><ul><li>fs 模块是Node.js 官方提供的、用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求。</li></ul><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Nodejs内置模块 无需额外安装</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h4><ul><li>使用fs.readFile()方法，可以读取指定文件中的内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[, options], callback)</span><br></pre></td></tr></table></figure><ul><li>参数解释：<ol><li>path：必选参数，字符串，表示文件的路径。</li><li>options：可选参数，表示以什么编码格式来读取文件。</li><li>callback：必选参数，文件读取完成后，通过回调函数拿到读取的结果，该函数会传入两个参数。<ul><li>err：文件读取错误时发生的报错</li><li>dataStr：文件内容</li></ul></li></ol></li></ul><p><strong>示例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test.text&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果读取成功，则err为null</span></span><br><span class="line">    <span class="comment">// 如果读取失败，err的值为错误对象</span></span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;+++++++++&#x27;</span>)</span><br><span class="line">    <span class="comment">// 打印成功的结果</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="写入文件内容"><a href="#写入文件内容" class="headerlink" title="写入文件内容"></a>写入文件内容</h4><ul><li>使用fs.writeFile0方法，可以向指定的文件中写入内容，语法格式如下</li><li>该方法只能创建文件，不能创建目录</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(file, data[, options], callback)</span><br></pre></td></tr></table></figure><ul><li>参数解释：<ol><li>file：必选参数，需要指定一个文件路径的字符串，表示文件的存放路径。</li><li>data：必选参数，表示要写入的内容。</li><li>options：可选参数，表示以什么格式写入文件内容，默认值是utf8。</li><li>callback：必选参数，文件写入完成后的回调函数，该函数会传入一个参数。<ul><li>err：文件写入错误时发生的报错</li></ul></li></ol></li></ul><p><strong>示例代码</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./write.text&#x27;</span>, <span class="string">&#x27;Hello FS Module!&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果写入成功，则err为null</span></span><br><span class="line">    <span class="comment">// 如果写入失败，err的值为错误对象</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="处理路径问题"><a href="#处理路径问题" class="headerlink" title="处理路径问题"></a>处理路径问题</h4><ul><li>在使用fs 模块操作文件时，如果提供的操作路径是以.&#x2F;或..&#x2F;开头的相对路径时，很容易出现路径动态拼接错误的问题。</li><li>原因：代码在运行的时候，会队执行node命令时所处的目录，动态拼接出被操作文件的完整路径。（相对于用户所在目录，而不是相对于文件目录）</li></ul><p><strong>__dirname</strong></p><ul><li>__dirname表示当前文件所处的目录，更改后可解决路径问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(__dirname + <span class="string">&#x27;/test.text&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, dataStr</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line">fs.<span class="title function_">writeFile</span>(__dirname + <span class="string">&#x27;/write.text&#x27;</span>, <span class="string">&#x27;Hello FS Module!&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h3><ul><li>path模块是Node.js官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</li></ul><h4 id="导入模块-1"><a href="#导入模块-1" class="headerlink" title="导入模块"></a>导入模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Nodejs内置模块 无需额外安装</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="路径拼接"><a href="#路径拼接" class="headerlink" title="路径拼接"></a>路径拼接</h4><ul><li>使用path.join(方法，可以把多个路径片段拼接为完整的路径字符串，语法格式如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">join</span>([...path])</span><br></pre></td></tr></table></figure><ul><li>参数解释：<ol><li>path：路径片段的序列（）</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pathStr = path.<span class="title function_">join</span>(<span class="string">&#x27;/a&#x27;</span>, <span class="string">&#x27;/b/c&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;./d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr) <span class="comment">// \a\b\d\e</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pathStr2 = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;./files/1.text&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pathStr2) <span class="comment">// 将相对路径转化为绝对路径</span></span><br></pre></td></tr></table></figure><ul><li>与 __dirname 使用字符串加法的不同<ul><li>如果使用字符串加法<code>__dirname + &#39;./a&#39;</code>会在路径中多出一个点（.）使用path.join可以解决此问题</li></ul></li></ul><h4 id="获取路径中的文件名"><a href="#获取路径中的文件名" class="headerlink" title="获取路径中的文件名"></a>获取路径中的文件名</h4><ul><li>使用path.basename()方法，可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名，语法格式如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">basename</span>(path[, ext])</span><br></pre></td></tr></table></figure><ul><li>参数解释：<ol><li>path：必选参数，表示一个路径的字符串</li><li>ext：可选参数，表示文件扩展名</li></ol></li></ul><p><strong>使用示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullName = path.<span class="title function_">basename</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fullName) <span class="comment">// index.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nameWithoutExt = path.<span class="title function_">basename</span>(fpath, <span class="string">&#x27;.html&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nameWithoutExt) <span class="comment">// index</span></span><br></pre></td></tr></table></figure><h4 id="获取路径中的文件扩展名"><a href="#获取路径中的文件扩展名" class="headerlink" title="获取路径中的文件扩展名"></a>获取路径中的文件扩展名</h4><ul><li>使用path.extname)方法，可以获取路径中的扩展名部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">extname</span>(path)</span><br></pre></td></tr></table></figure><p>参数解释：</p><ol><li>path：必选参数，表示一个路径的字符串</li></ol><p><strong>使用示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fpath = <span class="string">&#x27;/a/b/c/index.html&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fext = path.<span class="title function_">extname</span>(fpath)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fext) <span class="comment">// .html</span></span><br></pre></td></tr></table></figure><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><ul><li><p>http模块是Node.js 官方提供的、用来创建 web服务器的模块。通过 http模块提供的 http.createServer()方法，就能方便的把一台普通的电脑，变成一台Web服务器，从而对外提供Web资源服务。</p></li><li><p>服务器和普通电脑的区别在于，服务器上安装了web服务器软件，例如:IIS、Apache等。通过安装这些服务器软件,就能把一台普通的电脑变成一台web服务器。</p></li><li><p>在Node.js 中，我们不需要使用IIS、Apache等这些第三方web服务器软件。因为我们可以基于Node,js提供的http模块，通过几行简单的代码，就能轻松的手写一个服务器软件，从而对外提供web服务。</p></li><li><p><strong>基本四步</strong></p><ol><li>导入http模块</li><li>创建web服务器实例</li><li>为服务器实例绑定request事件，监听客户端请求</li><li>启动服务器</li></ol></li></ul><h4 id="导入模块-2"><a href="#导入模块-2" class="headerlink" title="导入模块"></a>导入模块</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="创建web服务器实例"><a href="#创建web服务器实例" class="headerlink" title="创建web服务器实例"></a>创建web服务器实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br></pre></td></tr></table></figure><h4 id="为服务器绑定request事件"><a href="#为服务器绑定request事件" class="headerlink" title="为服务器绑定request事件"></a>为服务器绑定request事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone visit our web server.&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span> <span class="comment">// 请求地址</span></span><br><span class="line">    <span class="keyword">const</span> method = req.<span class="property">method</span> <span class="comment">// 请求url</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据路径判断返回不同内容</span></span><br><span class="line">    <span class="keyword">let</span> content = <span class="string">&#x27;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(url === <span class="string">&#x27;/&#x27;</span> || url === <span class="string">&#x27;/index.html&#x27;</span>) &#123;</span><br><span class="line">        content = <span class="string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>) <span class="comment">// 设置响应头</span></span><br><span class="line">    res.<span class="title function_">end</span>(content) <span class="comment">// 向客户端响应内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h3><ul><li>Node.js 中根据模块来源的不同，将模块分为了3大类，分别是<ul><li>内置模块(内置模块是由Node.js官方提供的，例如fs、path、http等)</li><li>自定义模块（用户创建的每个.js文件，都是自定义模块)</li><li>第三方模块(由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前<br>需要先下载)</li></ul></li></ul><h3 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载内置fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载用户自定义模块</span></span><br><span class="line"><span class="keyword">const</span> custom - <span class="built_in">require</span>(<span class="string">&#x27;./custom.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载第三方模块</span></span><br><span class="line"><span class="keyword">const</span> moment - <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：使用require方法加载其它模块时，会执行被加载模块中的代码。</li></ul><h3 id="模块作用域"><a href="#模块作用域" class="headerlink" title="模块作用域"></a>模块作用域</h3><ul><li>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域。</li><li>该作用域防止了全局变量污染的问题</li></ul><h3 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h3><ul><li>在每个.js自定义模块中都有一个module对象，它里面存储了和当前模块有关的信息<ul><li>id，path，exports，parent，filename等…</li></ul></li></ul><h4 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h4><ul><li>在自定义模块中，可以使用module.exports对象，将模块内的成员共享出去，供外界使用。</li><li>外界用require()方法导入自定义模块时，得到的就是 module.exports所指向的对象。</li></ul><p><strong>代码示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="comment">// 导出变量</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">username</span> = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="comment">// 导入并使用变量</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA.js&#x27;</span>)</span><br><span class="line">moduleA.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><h3 id="exports对象"><a href="#exports对象" class="headerlink" title="exports对象"></a>exports对象</h3><ul><li>由于module.exports单词写起来比较复杂，为了简化向外共享成员的代码，Node提供了exports对象。默认情况下，exports和module.exports 指向同一个对象。最终共享的结果，还是以module.exports指向的对象为准。</li><li>时刻谨记，require)模块时，得到的永远是 module.exports指向的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span>) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">exports</span>) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">module</span>.<span class="property">exports</span> === <span class="built_in">exports</span>) <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>Node.js遵循了CommonJS模块化规范，CommonJS规定了模块的特性和各模块之间如何相互依赖。</p><ul><li>CommonJS规定：<ol><li>每个模块内部,module变量代表当前模块。</li><li>module变量是一个对象，它的exports属性(即module.exports)是对外的接口。</li><li>加载某个模块，其实是加载该模块的 module.exports属性。require)方法用于加载模块。</li></ol></li></ul><h3 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h3><p>模块第一次加载后会被缓存，即多次调用 <code>require()</code> 不会导致模块的代码被执行多次，提高模块加载效率。</p><h4 id="内置模块加载"><a href="#内置模块加载" class="headerlink" title="内置模块加载"></a>内置模块加载</h4><p>内置模块加载优先级最高。</p><h4 id="自定义模块加载"><a href="#自定义模块加载" class="headerlink" title="自定义模块加载"></a>自定义模块加载</h4><p>加载自定义模块时，路径要以 <code>./</code> 或 <code>../</code> 开头，否则会作为内置模块或第三方模块加载。</p><p>导入自定义模块时，若省略文件扩展名，则 Node.js 会按顺序尝试加载文件：</p><ul><li>按确切的文件名加载</li><li>补全 <code>.js</code> 扩展名加载</li><li>补全 <code>.json</code> 扩展名加载</li><li>补全 <code>.node</code> 扩展名加载</li><li>报错</li></ul><h4 id="第三方模块加载"><a href="#第三方模块加载" class="headerlink" title="第三方模块加载"></a>第三方模块加载</h4><ul><li>若导入第三方模块， Node.js 会从<strong>当前模块的父目录</strong>开始，尝试从 <code>/node_modules</code> 文件夹中加载第三方模块。</li><li>如果没有找到对应的第三方模块，则移动到再<strong>上一层父目录</strong>中，进行加载，直到<strong>文件系统的根目录</strong>。</li></ul><p>例如，假设在 <code>C:\Users\bruce\project\foo.js</code> 文件里调用了 <code>require(&#39;tools&#39;)</code>，则 Node.js 会按以下顺序查找：</p><ul><li><code>C:\Users\bruce\project\node_modules\tools</code></li><li><code>C:\Users\bruce\node_modules\tools</code></li><li><code>C:\Users\node_modules\tools</code></li><li><code>C:\node_modules\tools</code></li></ul><h4 id="目录作为模块加载"><a href="#目录作为模块加载" class="headerlink" title="目录作为模块加载"></a>目录作为模块加载</h4><p>当把目录作为模块标识符进行加载的时候，有三种加载方式：</p><ul><li>在被加载的目录下查找 <code>package.json</code> 的文件，并寻找 <code>main</code> 属性，作为 <code>require()</code> 加载的入口</li><li>如果没有 <code>package.json</code> 文件，或者 <code>main</code> 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 <code>index.js</code> 文件。</li><li>若失败则报错</li></ul><h2 id="npm与包"><a href="#npm与包" class="headerlink" title="npm与包"></a>npm与包</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul><li>概念<ul><li>Node.js 中的第三方模块又叫做包。</li><li>就像电脑和计算机指的是相同的东西，第三方模块和包指的是同一个概念，只不过叫法不同。</li></ul></li><li>来源<ul><li>不同于Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。</li><li>Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用。</li></ul></li><li>为什么需要包<ul><li>由于Node.js 的内置模块仅提供了一些底层的API，导致在基于内置模块进行项目开发的时，效率很低。</li><li>包是基于内置模块封装出来的，提供了更高级、更方便的API，极大的提高了开发效率。</li><li>包和内置模块之间的关系，类似于jQuery和浏览器内置API之间的关系。</li></ul></li><li>从哪里下载包<ul><li>国外有一家IT公司，叫做npm, Inc.这家公司旗下有一个非常著名的网站: <a href="https://www.npmjs.com/%EF%BC%8C%E5%AE%83%E6%98%AF%E5%85%A8%E7%90%83%E6%9C%80%E5%A4%A7%E7%9A%84%E5%8C%85%E5%85%B1%E4%BA%AB%E5%B9%B3%E5%8F%B0%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%BB%8E%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8A%E6%90%9C%E7%B4%A2%E5%88%B0%E4%BB%BB%E4%BD%95%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%EF%BC%8C%E5%8F%AA%E8%A6%81%E4%BD%A0%E6%9C%89%E8%B6%B3%E5%A4%9F%E7%9A%84%E8%80%90%E5%BF%83">https://www.npmjs.com/，它是全球最大的包共享平台，你可以从这个网站上搜索到任何你需要的包，只要你有足够的耐心</a>!</li><li>npm, Inc.公司提供了一个地址为<a href="https://registry.npmjs.org/%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%9D%A5%E5%AF%B9%E5%A4%96%E5%85%B1%E4%BA%AB%E6%89%80%E6%9C%89%E7%9A%84%E5%8C%85%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BB%8E%E8%BF%99%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%B8%8B%E8%BD%BD%E8%87%AA%E5%B7%B1%E6%89%80%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%E3%80%82">https://registry.npmjs.org/的服务器，来对外共享所有的包，我们可以从这个服务器上下载自己所需要的包。</a></li></ul></li><li>如何下载包<ul><li>npm, Inc.公司提供了一个包管理工具，我们可以使用这个包管理工具，从<a href="https://registry.npmjs.org/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%8A%E9%9C%80%E8%A6%81%E7%9A%84%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E4%BD%BF%E7%94%A8%E3%80%82">https://registry.npmjs.org/服务器把需要的包下载到本地使用。</a><br>这个包管理工具的名字叫做Node Package Manager (<strong>简称npm包管理工具</strong>)，这个包管理工具随着Node.js的安装包一起被安装到了用户的电脑上。</li></ul></li></ul><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ul><li>npm是Nodejs官方的包管理工具。</li><li>初次装包完成后，在项目文件夹下多一个叫做node_ modules的文件夹和package-lockjson的配置文件。</li><li>node_modules 文件夹用来存放所有已安装到项目中的包。require()导入第三方包时，就是从这个目录中查找并加载包。</li><li>package-lockjson 配置文件用来记录node modules目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化npm配置文件</span></span><br><span class="line"><span class="comment"># -y表示使用配置默认选项</span></span><br><span class="line"><span class="comment"># 执行后出现 package.json 文件</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载包</span></span><br><span class="line">npm install &lt;包名称&gt;</span><br><span class="line"><span class="comment"># 删除包</span></span><br><span class="line">npm uninstall &lt;包名称&gt;</span><br><span class="line"><span class="comment"># 切换镜像源加速下载</span></span><br><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在执行npm install命令时，如果提供了-g参数，则会把包安装为全局包。</span></span><br><span class="line"><span class="comment"># 全局包会被安装到C:\Users\用户目录VAppData\RoamingInpm\node_modules目录下。</span></span><br><span class="line">npm install &lt;包名称&gt; -g</span><br></pre></td></tr></table></figure><ul><li>上述命令只能在英文的目录下成功运行!所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。</li><li>运行npm install命令安装包的时候，npm包管理工具会自动把包的名称和版本号，记录到package.json 中。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packge.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodeNpm&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h3><ul><li>新建itheima-tools文件夹，作为包的根目录</li><li>在itheima-tools文件夹中，新建如下三个文件:<ul><li>package.json(包管理配置文件)</li><li>index.js(包的入口文件)</li><li>README.md(包的说明文档)</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packge.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;myTool&quot;</span>, <span class="comment">// 包名称</span></span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>, <span class="comment">// 包版本</span></span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 包的描述</span></span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>, <span class="comment">// 包的入口文件</span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123; <span class="comment">// 包的可执行指令</span></span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [], <span class="comment">// 搜索关键字，使用那些关键字可以搜索到该作者</span></span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="comment">// 包的作者</span></span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span> <span class="comment">// 包遵循的开源协议</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">export</span> = &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>包根目录中的README.md文件，是包的使用说明文档。通过它，我们可以事先把包的使用说明，以 markdown的格式写出来，方便用户参考。</li><li>README文件中具体写什么内容，没有强制性的要求;只要能够清晰地把包的作用、用法、注意事项等描述清楚即可。我们所创建的</li><li>这个包的 README.md文档中，会包含以下6项内容:<ul><li>安装方式、导入方式、格式化时间、转义HTML中的特殊字符、还原HTML中的特殊字符、开源协议</li></ul></li></ul><h3 id="npm发布"><a href="#npm发布" class="headerlink" title="npm发布"></a>npm发布</h3><h4 id="注册npm账号"><a href="#注册npm账号" class="headerlink" title="注册npm账号"></a>注册npm账号</h4><ul><li>访问<a href="https://www.npmjs.com/%E7%BD%91%E7%AB%99%EF%BC%8C%E7%82%B9%E5%87%BB">https://www.npmjs.com/网站，点击</a> sign up按钮，进入注册用户界面</li><li>填写账号相关的信息:Full Name、Public Email、Username、Password</li><li>点击Create an Account按钮，注册账号</li><li>登录邮箱,点击验证链接，进行账号的验证</li></ul><h4 id="登录npm账号"><a href="#登录npm账号" class="headerlink" title="登录npm账号"></a>登录npm账号</h4><ul><li>npm账号注册完成后，可以在终端中执行npm login命令，依次输入用户名、密码、邮箱后，即可登录成功。</li><li><strong>注意</strong>：在运行npm login命令之前，必须先把下包的服务器地址切换为npm的官方服务器。否则会导致发布包失败!</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入账号密码后即可成功登录</span></span><br><span class="line">npm login</span><br></pre></td></tr></table></figure><h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将包发布在npm上</span></span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除发布的包</span></span><br><span class="line">npm unpublish &lt;包名&gt; --force</span><br></pre></td></tr></table></figure><ul><li>npm unpublish命令只能删除72小时以内发布的包。</li><li>npm unpublish 删除的包，在24小时内不允许重复发布发布包的时候要慎重。</li><li>尽量不要往npm上发布没有意义的包!</li></ul><blockquote><p>⛄以上便是基础篇的全部内容了，学习后能让你对NodeJS有一个大致的了解。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【雪人日记】2023年的除夕夜</title>
      <link href="/2023/01/22/diary/2023-1-22/"/>
      <url>/2023/01/22/diary/2023-1-22/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="021b4619a80511215f1021ee9a99ec4bb4b8327b2295aa0635b5c840040a7ac7">470d40a13319dd5202c7e8667eadc5c9dff3ccb84d4bcff22c717d465e98526a3aef0124637f4316ef35591b77e4dddf653ce7f9bcbd21e6e3ca8f83ef35cd6dde4b79bb7240ad92d5ab011b654ecfc2a9199e29312edeb917b0519ed5bfd60e2494aec28fe0a49f31e457d693e4824ff8723adf28ed2c2d8daab0c3cde26088e88078a34a4218348ff11e0e221015793f66ab6cf7e399afa8482a2068dac02495f4bff7b566c5d7707c552b5abb5e0f67bde5b93d82857a9be9055fa730c37f368aea1c2eb4d34ee5151013a31ceacaf03fc12bd149f5be046c39f8170990406f9f84eab1f1b2a833f903922409b9e1d743ee144994255c9b55a93fcc403df6fac62f71c0ecb9d53e9cfd603413b592219f2aee4edcbc6be30f1a5f0ca98a1e2ff83b66e0a565b3096f1b19392ddd1f7455b6fc2bb88c0b8580b543073362c2cf13063ec67505486a3c2f8f7fcd246d2745e144cf32a21ecfa3d109a3b076252a9883585a9334967ad6ae672c56715cdc0f00de7c572ada5cacc062f4f857e890b96736617d515b0e4de8ae125a5a8fb005de0c5afc23f5c591f03bf92d01aa2c3092a990cc33ae2b32ae3013abd0c0d72cc8d03bf45d0d6986fee5990eada9ca3ca5b71c4747c7fac5aaf5f752908bc5411c431ca150c2d4db5c8e14334768c8b81b483919515908dda8e824104209e2db14472c7da637734f48e2bc72fe29d32eb11854586fba0ec6d344d8390964e339489cb0c513fa28ed588889fb8f31a19b074f1d769ce5a03e365e91c998a7a99eaf21d323ffc0829a715998bf9e5fe33336097bbc72b8f926b4ae9c0264240b2cdb137c2a1c3c45bbd51d80f09cfd33222a6a681f21193c9910a2f96c644ef5b51336ec74fcb7ca9455eab32265a6d49b1268f66b6f25af0321701b53b31c53da68542cd385d2733a57946d3324e5c9f09d56fbd7211b4be2276b13fd8f40d61513232823665e2ad6225dfe3db576076f92dd7e95080bff67b7ea48b623d1914c99196ea4389601e465d02aebbb6c332fbc7097c260a9a3370e91d5ef2bd50edcc1b1e3d5dae52eeca4e8d5c2560a3a06dc830233d8b6566a69c47d1e2ae0efc3a658ace045c513a81ed6ee9cd1f260e00a1d64cf9ac55fbd8e7e6aacb10e2586dcd27f8d708643d0128fe13d88affb1bb61120ea45ca1517e27b5271bf52b2772cb654628db1421f6fcf93ac0be8ac945982243bd0b6cfc50d0e160f7bd85ece47fbfcc97d6b3ae2b2b05d5c45c2b5d1dfab308fb4ea2d1a601c7e516c86a00e66c3263d84e02834143dcc2ee6564416fea85a24d9f1e005a64510e245f92aafed6f07ff9c579c2d085989d3bd2608fbc26fb6f8ed7374a6a7f1eee22a45fa47cbfd5e092493a01549912591a68a7ffb3a25d2057b414b8c5946ab57163d207dcd3e69d38a578a182262f51b226225a4419b52cbe5884effa1fdc4be66e64c6a47b639be741d9eb3b65418a32c58ec2463d2bb439176a4a7dc23d41a1d5303706b22f3982c4f8a1c3979d3b090d612af939a699bec07638ff8d3e851de6e277ab3704791d0972bde2147a1afd8e258db7efeb25bcb50faeff246e30706c2861989a75418ff5216a72108b2144ab926a0abdfbc12759f988ae11dfc8602ec4bf51a921bb70b091133f562329a5a9d0a890e828c2f029c33692e034e3aa5314632c9179ebf26a8e5bb2ddaa3fb52d2240f5086ca998dc903aa4f103cf9faefc0a539db4939ae1ab60aad726dfa8565357094e9982ce555108b8f41a0292b2b6ef86348c068076adfc1dec39d14d58baee20bd77ab68718dd7670d8b16ce67d70fd68d8f0efb938ca0f039196be096f8c713545e47fc4826d800e2b230a15d318d528ae3c42de73c7171fd302a0df71025fd88122634c342eb59dfca8618be93ec979748ec718f68a92e3562968bedf</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">该文章需要密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 雪人日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雪人日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】尚硅谷Webpack5入门到原理 | 高级篇</title>
      <link href="/2023/01/18/WebPack5-02/"/>
      <url>/2023/01/18/WebPack5-02/</url>
      
        <content type="html"><![CDATA[<h1 id="WebPack5高级篇"><a href="#WebPack5高级篇" class="headerlink" title="WebPack5高级篇"></a>WebPack5高级篇</h1><blockquote><p>⛄继续学习WebPack5的高级篇。</p><p>⛄这一篇主要讲的是WebPack5打包优化的思路，全是配置项，无技术含量，主要是思路的学习。</p><p>⭐<strong>注</strong>：本文是对<strong>尚硅谷 Web 前端之 Webpack5 教程</strong>的学习笔记记录，加入了一些自己的练习改动与思考。</p><p>⭐<strong>推荐大家去看原视频</strong>：<a href="https://www.bilibili.com/video/BV14T4y1z7sw/">尚硅谷Webpack5入门到原理（面试开发一条龙）_哔哩哔哩_bilibili</a></p></blockquote><h2 id="我的总结"><a href="#我的总结" class="headerlink" title="我的总结"></a>我的总结</h2><ul><li>下面都是一些配置项，在这里大概描述一下优化的思路</li></ul><h3 id="开发者体验优化"><a href="#开发者体验优化" class="headerlink" title="开发者体验优化"></a>开发者体验优化</h3><ul><li>SourceMap：打包后报错可映射源码报错位置</li></ul><h3 id="打包加速"><a href="#打包加速" class="headerlink" title="打包加速"></a>打包加速</h3><ul><li>HotModuleReplacement：热模块替换</li><li>OneOf：正则匹配优化</li><li>Include&#x2F;Exclude：匹配需要打包的文件，对不需要的进行过滤</li><li>Cache：缓存优化，对Eslint检查与Babel编译结果进行缓存</li><li>Thread：多进程打包</li></ul><h3 id="压缩代码体积"><a href="#压缩代码体积" class="headerlink" title="压缩代码体积"></a>压缩代码体积</h3><ul><li>TreeShaking：只打包所需库的被引用内容，而不是打包整个库</li><li>Babel：有优化Babel体积的插件</li><li>ImageMinimizer：打包图片压缩</li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul><li>Core-js：babel的补丁，可以将asyc函数，promise对象等ES6语法及其他内容进行向下兼容</li></ul><h3 id="浏览器渲染优化"><a href="#浏览器渲染优化" class="headerlink" title="浏览器渲染优化"></a>浏览器渲染优化</h3><ul><li>CodeSplit：将JS文件进行分割，按需加载，需要哪个库就导入哪一个。而不是直接全部导入。</li><li>Preload&#x2F;Prefetch：可以在浏览器空闲时间进行加载资源</li><li>NetworkCache：对请求的资源进行缓存</li><li>PWA：离线时仍可以访问项目</li></ul><blockquote><p>⭐都是要配置非常多的内容，我认为这个章节不需要看如何配置，只需要过一遍概念与优化思路。</p><p>⭐在大家有需要的时候，按照这个思路去官网查找最新配置即可。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本章节主要介绍 Webpack 高级配置。</p><p>所谓高级配置其实就是进行 Webpack 优化，让我们代码在编译&#x2F;运行时性能更好~</p><p>我们会从以下角度来进行优化：</p><ol><li>提升开发体验</li><li>提升打包构建速度</li><li>减少代码体积</li><li>优化代码运行性能</li></ol><h2 id="提升开发体验"><a href="#提升开发体验" class="headerlink" title="提升开发体验"></a>提升开发体验</h2><h3 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a>SourceMap</h3><h4 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h4><p>开发时我们运行的代码是经过 webpack 编译后的，例如下面这个样子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/less/index.less&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************************************************************************************************!*\</span></span><br><span class="line"><span class="comment">  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js!./src/less/index.less ***!</span></span><br><span class="line"><span class="comment">  \**********************************************************************************************************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params"><span class="variable language_">module</span>, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, &#123;\n/* harmony export */   \&quot;default\&quot;: () =&gt; (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ &#125;);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \&quot;./node_modules/css-loader/dist/runtime/noSourceMaps.js\&quot;);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \&quot;./node_modules/css-loader/dist/runtime/api.js\&quot;);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \&quot;.box2 &#123;\\n  width: 100px;\\n  height: 100px;\\n  background-color: deeppink;\\n&#125;\\n\&quot;, \&quot;\&quot;]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://webpack5/./src/less/index.less?./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"><span class="comment">// 其他省略</span></span><br></pre></td></tr></table></figure><p>所有 css 和 js 合并成了一个文件，并且多了其他代码。此时如果代码运行出错那么提示代码错误位置我们是看不懂的。一旦将来开发代码文件很多，那么很难去发现错误出现在哪里。</p><p>所以我们需要更加准确的错误提示，来帮助我们更好的开发代码。</p><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。</p><p>它会生成一个 xxx.map 文件，里面包含源代码和构建后代码每一行、每一列的映射关系。当构建后代码出错了，会通过 xxx.map 文件，从构建后代码出错位置找到映射后源代码出错位置，从而让浏览器提示源代码文件出错位置，帮助我们更快的找到错误根源。</p><h4 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h4><p>通过查看<a href="https://webpack.docschina.org/configuration/devtool/">Webpack DevTool 文档open in new window</a>可知，SourceMap 的值有很多种情况.</p><p>但实际开发时我们只需要关注两种情况即可：</p><ul><li>开发模式：<code>cheap-module-source-map</code><ul><li>优点：打包编译速度快，只包含行映射</li><li>缺点：没有列映射</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>生产模式：<code>source-map</code><ul><li>优点：包含行&#x2F;列映射</li><li>缺点：打包编译速度更慢</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>简单来说，推荐在开发模式使用<code>cheap-module-source-map</code>，在生产模式使用<code>source-map</code>。</strong></p><h2 id="提升打包构建速度"><a href="#提升打包构建速度" class="headerlink" title="提升打包构建速度"></a>提升打包构建速度</h2><h3 id="HotModuleReplacement"><a href="#HotModuleReplacement" class="headerlink" title="HotModuleReplacement"></a>HotModuleReplacement</h3><h4 id="为什么-1"><a href="#为什么-1" class="headerlink" title="为什么"></a>为什么</h4><ul><li>开发时我们修改了其中一个模块代码，Webpack 默认会将所有模块全部重新打包编译，速度很慢。</li><li>所以我们需要做到修改某个模块代码，就只有这个模块代码需要重新打包编译，其他模块不变，这样打包速度就能很快。</li></ul><h4 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h4><p>HotModuleReplacement（HMR&#x2F;热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。</p><h4 id="怎么用-1"><a href="#怎么用-1" class="headerlink" title="怎么用"></a>怎么用</h4><h5 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h5><ul><li>此配置在WebPack5是默认开启的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启HMR功能（只能用于开发环境，生产环境不需要了）</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="JS配置"><a href="#JS配置" class="headerlink" title="JS配置"></a>JS配置</h5><ul><li>JS默认不能热模块替换，上面的配置修改后我们发现，修改JS仍然会刷新整个页面。</li><li>需要使用 module.hot.accept 使js开启热加载，但是需要先判断是否支持 module.hot</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/count.js&quot;</span>, <span class="keyword">function</span> (<span class="params">count</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result1 = <span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/sum.js&quot;</span>, <span class="keyword">function</span> (<span class="params">sum</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result2 = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这样写会很麻烦，所以实际开发我们会使用其他 loader 来解决。</p><p>比如：<a href="https://github.com/vuejs/vue-loader">vue-loader</a>，<a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a>。</p><p>加入以上loader自动配置js热加载。</p><h3 id="OneOf"><a href="#OneOf" class="headerlink" title="OneOf"></a>OneOf</h3><h4 id="为什么-2"><a href="#为什么-2" class="headerlink" title="为什么"></a>为什么</h4><p>打包时每个文件都会经过所有 loader 处理，虽然因为 <code>test</code> 正则原因实际没有处理上，但是都要过一遍。比较慢。</p><h4 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h4><p>顾名思义就是只能匹配上一个 loader, 剩下的就不匹配了。</p><h4 id="怎么用-2"><a href="#怎么用-2" class="headerlink" title="怎么用"></a>怎么用</h4><ul><li>将rules中配置oneof数组，数组中存放匹配值。</li><li>原本rules会全部遍历去匹配，但是实际上我们书写的正则其实是一一对应的，加入进OneOf之后，匹配到一个其他就不会去匹配了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出，不需要指定输出目录</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">              <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">generator</span>: &#123;</span><br><span class="line">              <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">              <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">              <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">              <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">              <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">              <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">            <span class="attr">generator</span>: &#123;</span><br><span class="line">              <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 开发服务器</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启HMR功能</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;cheap-module-source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Include-x2F-Exclude"><a href="#Include-x2F-Exclude" class="headerlink" title="Include&#x2F;Exclude"></a>Include&#x2F;Exclude</h3><h4 id="为什么-3"><a href="#为什么-3" class="headerlink" title="为什么"></a>为什么</h4><p>开发时我们需要使用第三方的库或插件，所有文件都下载到 node_modules 中了。而这些文件是不需要编译可以直接使用的。</p><p>所以我们在对 js 文件处理时，要排除 node_modules 下面的文件。</p><h4 id="是什么-3"><a href="#是什么-3" class="headerlink" title="是什么"></a>是什么</h4><ul><li>include</li></ul><p>包含，只处理 xxx 文件</p><ul><li>exclude</li></ul><p>排除，除了 xxx 文件以外其他文件都处理</p><h4 id="怎么用-3"><a href="#怎么用-3" class="headerlink" title="怎么用"></a>怎么用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出，不需要指定输出目录</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">                        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">                        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>],</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>: &#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>生产模式也是如此配置。</p><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><h4 id="为什么-4"><a href="#为什么-4" class="headerlink" title="为什么"></a>为什么</h4><p>每次打包时 js 文件都要经过 Eslint 检查 和 Babel 编译，速度比较慢。</p><p>我们可以缓存之前的 Eslint 检查 和 Babel 编译结果，这样第二次打包时速度就会更快了。</p><h4 id="是什么-4"><a href="#是什么-4" class="headerlink" title="是什么"></a>是什么</h4><p>对Eslint检查和Babel编译结果进行缓存</p><h4 id="怎么用-4"><a href="#怎么用-4" class="headerlink" title="怎么用"></a>怎么用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出，不需要指定输出目录</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">        <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    <span class="comment">// ...</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                            <span class="attr">cacheCompression</span>: <span class="literal">false</span>, <span class="comment">// 缓存文件不要压缩</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">                __dirname,</span><br><span class="line">                <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Thead"><a href="#Thead" class="headerlink" title="Thead"></a>Thead</h3><h4 id="为什么-5"><a href="#为什么-5" class="headerlink" title="为什么"></a>为什么</h4><p>当项目越来越庞大时，打包速度越来越慢，甚至于需要一个下午才能打包出来代码。这个速度是比较慢的。</p><p>我们想要继续提升打包速度，其实就是要提升 js 的打包速度，因为其他文件都比较少。</p><p>而对 js 文件处理主要就是 eslint 、babel、Terser 三个工具，所以我们要提升它们的运行速度。</p><p>我们可以开启多进程同时处理 js 文件，这样速度就比之前的单进程打包更快了。</p><h4 id="是什么-5"><a href="#是什么-5" class="headerlink" title="是什么"></a>是什么</h4><p>多进程打包：开启电脑的多个进程同时干一件事，速度更快。</p><p><strong>需要注意：请仅在特别耗时的操作中使用，因为每个进程启动就有大约为 600ms 左右开销。</strong></p><h4 id="怎么用-5"><a href="#怎么用-5" class="headerlink" title="怎么用"></a>怎么用</h4><p>我们启动进程的数量就是我们 CPU 的核数。</p><ul><li>如何获取 CPU 的核数，因为每个电脑都不一样。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nodejs核心模块，直接使用</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="comment">// cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br></pre></td></tr></table></figure><ul><li>下载包</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i thread-loader -D</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>); <span class="comment">// 添加此代码</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>; <span class="comment">// 添加此代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取处理样式的Loaders</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">        <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                        <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        preProcessor,</span><br><span class="line">    ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">oneOf</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;sass-loader&quot;</span>),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">                        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;stylus-loader&quot;</span>),</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">                        <span class="attr">parser</span>: &#123;</span><br><span class="line">                            <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                                <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">                            <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">                            <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">                            <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">                            <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">                        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">                        <span class="attr">generator</span>: &#123;</span><br><span class="line">                            <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">                        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">                        <span class="comment">// 加入以下代码</span></span><br><span class="line">                        <span class="attr">use</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                                <span class="attr">options</span>: &#123;</span><br><span class="line">                                    <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                                <span class="attr">options</span>: &#123;</span><br><span class="line">                                    <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                    &#125;,</span><br><span class="line">                ],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">            <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">            <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">            <span class="comment">// 缓存目录</span></span><br><span class="line">            <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">                __dirname,</span><br><span class="line">                <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="comment">// 添加此代码 ESlint</span></span><br><span class="line">            threads, <span class="comment">// 开启多进程</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">            <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">            <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// css压缩</span></span><br><span class="line">        <span class="comment">// new CssMinimizerPlugin(),</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// CSS压缩也可以开启多进程</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">            <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">parallel</span>: threads <span class="comment">// 开启多进程</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="减少代码体积"><a href="#减少代码体积" class="headerlink" title="减少代码体积"></a>减少代码体积</h2><h3 id="TreeShaking"><a href="#TreeShaking" class="headerlink" title="TreeShaking"></a>TreeShaking</h3><h4 id="为什么-6"><a href="#为什么-6" class="headerlink" title="为什么"></a>为什么</h4><ul><li>开发时我们定义了一些工具函数库，或者引用第三方工具函数库或组件库。</li><li>如果没有特殊处理的话我们打包时会引入整个库，但是<strong>实际上可能我们可能只用上极小部分的功能</strong>。</li><li><strong>这样将整个库都打包进来，体积就太大了</strong>。</li></ul><h4 id="是什么-6"><a href="#是什么-6" class="headerlink" title="是什么"></a>是什么</h4><p><code>Tree Shaking</code> 是一个术语，通常用于描述移除 JavaScript 中的没有使用上的代码。</p><p><strong>注意：它依赖 <code>ES Module</code>。</strong></p><h4 id="怎么用-6"><a href="#怎么用-6" class="headerlink" title="怎么用"></a>怎么用</h4><p>Webpack 已经默认开启了这个功能，无需其他配置。</p><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><h4 id="为什么-7"><a href="#为什么-7" class="headerlink" title="为什么"></a>为什么</h4><ul><li>Babel 为编译的每个文件都插入了辅助代码，使代码体积过大！</li><li>Babel 对一些公共方法使用了非常小的辅助代码，比如 <code>_extend</code>。默认情况下会被添加到每一个需要它的文件中。</li><li>你可以将这些辅助代码作为一个独立模块，来避免重复引入。</li></ul><h4 id="是什么-7"><a href="#是什么-7" class="headerlink" title="是什么"></a>是什么</h4><p><code>@babel/plugin-transform-runtime</code>: 禁用了 Babel 自动对每个文件的 runtime 注入，而是引入 <code>@babel/plugin-transform-runtime</code> 并且使所有辅助代码从这里引用。</p><h4 id="怎么用-7"><a href="#怎么用-7" class="headerlink" title="怎么用"></a>怎么用</h4><ul><li>下载包</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                        <span class="attr">cacheCompression</span>: <span class="literal">false</span>, <span class="comment">// 缓存文件不要压缩</span></span><br><span class="line">                        <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>], <span class="comment">// 减少代码体积</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ImageMinimizer"><a href="#ImageMinimizer" class="headerlink" title="ImageMinimizer"></a>ImageMinimizer</h3><h4 id="为什么-8"><a href="#为什么-8" class="headerlink" title="为什么"></a>为什么</h4><ul><li>开发如果项目中引用了较多图片，那么图片体积会比较大，将来请求速度比较慢。</li><li>我们可以对图片进行压缩，减少图片体积。</li></ul><p><strong>注意：如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。</strong></p><h4 id="是什么-8"><a href="#是什么-8" class="headerlink" title="是什么"></a>是什么</h4><p><code>image-minimizer-webpack-plugin</code>: 用来压缩图片的插件</p><h4 id="怎么用-8"><a href="#怎么用-8" class="headerlink" title="怎么用"></a>怎么用</h4><ul><li><strong>下载包</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i image-minimizer-webpack-plugin imagemin -D</span><br></pre></td></tr></table></figure><p>还有剩下包需要下载，有两种模式：</p><ul><li>无损压缩</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</span><br></pre></td></tr></table></figure><ul><li>有损压缩</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://baike.baidu.com/item/%E6%97%A0%E6%8D%9F%E3%80%81%E6%9C%89%E6%8D%9F%E5%8E%8B%E7%BC%A9">有损&#x2F;无损压缩的区别</a></p></blockquote><ul><li><strong>配置</strong></li></ul><p>我们以无损压缩配置为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">        <span class="comment">// 压缩图片</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">minimizer</span>: &#123;</span><br><span class="line">                <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">plugins</span>: [</span><br><span class="line">                        [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                        [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">                        [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">                        [</span><br><span class="line">                            <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">plugins</span>: [</span><br><span class="line">                                    <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                                        <span class="attr">params</span>: &#123;</span><br><span class="line">                                            <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                                        &#125;,</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                ],</span><br><span class="line">                            &#125;,</span><br><span class="line">                        ],</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>下面是一些版本问题，轮子还没有完善，忽略，需要的时候大家直接去官网查阅最新版本即可。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: Error with &#x27;src\images\1.jpeg&#x27;: &#x27;&quot;C:\Users\86176\Desktop\webpack\webpack_code\node_modules\jpegtran-bin\vendor\jpegtran.exe&quot;&#x27;</span><br><span class="line">Error with &#x27;src\images\3.gif&#x27;: spawn C:\Users\86176\Desktop\webpack\webpack_code\node_modules\optipng-bin\vendor\optipng.exe ENOENT</span><br></pre></td></tr></table></figure><p>我们需要安装两个文件到 node_modules 中才能解决, 文件可以从课件中找到：</p><ul><li>jpegtran.exe</li></ul><p>需要复制到 <code>node_modules\jpegtran-bin\vendor</code> 下面</p><blockquote><p><a href="http://jpegclub.org/jpegtran/">jpegtran 官网地址open in new window</a></p></blockquote><ul><li>optipng.exe</li></ul><p>需要复制到 <code>node_modules\optipng-bin\vendor</code> 下面</p><blockquote><p><a href="http://optipng.sourceforge.net/">OptiPNG 官网地址</a></p></blockquote><h2 id="优化代码性能"><a href="#优化代码性能" class="headerlink" title="优化代码性能"></a>优化代码性能</h2><h3 id="CodeSplit"><a href="#CodeSplit" class="headerlink" title="CodeSplit"></a>CodeSplit</h3><h4 id="为什么-9"><a href="#为什么-9" class="headerlink" title="为什么"></a>为什么</h4><ul><li>打包代码时会将所有 js 文件打包到一个文件中，体积太大了。我们如果只要渲染首页，就应该只加载首页的 js 文件，其他文件不应该加载。</li><li>所以我们需要将打包生成的文件进行代码分割，生成多个 js 文件，渲染哪个页面就只加载某个 js 文件，这样加载的资源就少，速度就更快。</li></ul><h4 id="是什么-9"><a href="#是什么-9" class="headerlink" title="是什么"></a>是什么</h4><p>代码分割（Code Split）主要做了两件事：</p><ol><li>分割文件：将打包生成的文件进行分割，生成多个 js 文件。</li><li>按需加载：需要哪个文件就加载哪个文件。</li></ol><h4 id="怎么用-9"><a href="#怎么用-9" class="headerlink" title="怎么用"></a>怎么用</h4><p>代码分割实现方式有不同的方式，为了更加方便体现它们之间的差异，我们会分别创建新的文件来演示</p><h5 id="多入口"><a href="#多入口" class="headerlink" title="多入口"></a>多入口</h5><ul><li><strong>文件目录</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── public</span><br><span class="line">├── src</span><br><span class="line">|   ├── app.js</span><br><span class="line">|   └── main.js</span><br><span class="line">├── package.json</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure><ul><li><strong>下载包</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli html-webpack-plugin -D</span><br></pre></td></tr></table></figure><ul><li><p><strong>新建文件</strong></p></li><li><p>app.js</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello app&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello main&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>配置</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 单入口</span></span><br><span class="line">  <span class="comment">// entry: &#x27;./src/main.js&#x27;,</span></span><br><span class="line">  <span class="comment">// 多入口</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">main</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">app</span>: <span class="string">&quot;./src/app.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="comment">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span><br><span class="line">    <span class="comment">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span><br><span class="line">    <span class="comment">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span><br><span class="line">    <span class="comment">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">clear</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>运行指令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><ul><li>此时在 dist 目录我们能看到输出了两个 js 文件。</li><li>总结：配置了几个入口，至少输出几个 js 文件。</li></ul><h5 id="提取重复代码"><a href="#提取重复代码" class="headerlink" title="提取重复代码"></a>提取重复代码</h5><ul><li><p>如果<strong>多入口文件中都引用了同一份代码</strong>，我们不希望这份代码被打包到两个文件中，导致代码重复，体积更大。</p></li><li><p>我们需要提取多入口的重复代码，只打包生成一个 js 文件，其他文件引用它就好。</p></li><li><p><strong>修改文件</strong></p></li><li><p>app.js</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"><span class="comment">// 两个文件均引用sum</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello app&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"><span class="comment">// 两个文件均引用sum</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello main&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br></pre></td></tr></table></figure><ul><li>math.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>代码分割配置</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 单入口</span></span><br><span class="line">    <span class="comment">// entry: &#x27;./src/main.js&#x27;,</span></span><br><span class="line">    <span class="comment">// 多入口</span></span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">main</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">        <span class="attr">app</span>: <span class="string">&quot;./src/app.js&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        <span class="comment">// [name]是webpack命名规则，使用chunk的name作为输出的文件名。</span></span><br><span class="line">        <span class="comment">// 什么是chunk？打包的资源就是chunk，输出出去叫bundle。</span></span><br><span class="line">        <span class="comment">// chunk的name是啥呢？ 比如： entry中xxx: &quot;./src/xxx.js&quot;, name就是xxx。注意是前面的xxx，和文件名无关。</span></span><br><span class="line">        <span class="comment">// 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="comment">// ==========以下为新增代码=============</span></span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="comment">// 代码分割配置</span></span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">            <span class="comment">// 以下是默认值</span></span><br><span class="line">            <span class="comment">// minSize: 20000, // 分割代码最小的大小</span></span><br><span class="line">            <span class="comment">// minRemainingSize: 0, // 类似于minSize，最后确保提取的文件大小不能为0</span></span><br><span class="line">            <span class="comment">// minChunks: 1, // 至少被引用的次数，满足条件才会代码分割</span></span><br><span class="line">            <span class="comment">// maxAsyncRequests: 30, // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line">            <span class="comment">// maxInitialRequests: 30, // 入口js文件最大并行请求数量</span></span><br><span class="line">            <span class="comment">// enforceSizeThreshold: 50000, // 超过50kb一定会单独打包（此时会忽略minRemainingSize、maxAsyncRequests、maxInitialRequests）</span></span><br><span class="line">            <span class="comment">// cacheGroups: &#123; // 组，哪些模块要打包到一个组</span></span><br><span class="line">            <span class="comment">//   defaultVendors: &#123; // 组名</span></span><br><span class="line">            <span class="comment">//     test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">            <span class="comment">//     priority: -10, // 权重（越大越高）</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">//   default: &#123; // 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">            <span class="comment">//     minChunks: 2, // 这里的minChunks权重更大</span></span><br><span class="line">            <span class="comment">//     priority: -20,</span></span><br><span class="line">            <span class="comment">//     reuseExistingChunk: true,</span></span><br><span class="line">            <span class="comment">//   &#125;,</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">            <span class="comment">// 修改配置</span></span><br><span class="line">            <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">                <span class="comment">// 组，哪些模块要打包到一个组</span></span><br><span class="line">                <span class="comment">// defaultVendors: &#123; // 组名</span></span><br><span class="line">                <span class="comment">//   test: /[\\/]node_modules[\\/]/, // 需要打包到一起的模块</span></span><br><span class="line">                <span class="comment">//   priority: -10, // 权重（越大越高）</span></span><br><span class="line">                <span class="comment">//   reuseExistingChunk: true, // 如果当前 chunk 包含已从主 bundle 中拆分出的模块，则它将被重用，而不是生成新的模块</span></span><br><span class="line">                <span class="comment">// &#125;,</span></span><br><span class="line">                <span class="attr">default</span>: &#123;</span><br><span class="line">                    <span class="comment">// 其他没有写的配置会使用上面的默认值</span></span><br><span class="line">                    <span class="attr">minSize</span>: <span class="number">0</span>, <span class="comment">// 我们定义的文件体积太小了，所以要改打包的最小文件体积</span></span><br><span class="line">                    <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">                    <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ==========以下为新增代码=============</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时我们会发现生成 3 个 js 文件，其中有一个就是提取的公共模块。</p><h5 id="按需加载，动态导入"><a href="#按需加载，动态导入" class="headerlink" title="按需加载，动态导入"></a>按需加载，动态导入</h5><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello main&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 动态导入 --&gt; 实现按需加载</span></span><br><span class="line">  <span class="comment">// 即使只被引用了一次，也会代码分割</span></span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&quot;./math.js&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; sum &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello app&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Code Split<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>计算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以发现，一旦通过 import 动态导入语法导入模块，模块就被代码分割，同时也能按需加载了。</p><h5 id="单入口"><a href="#单入口" class="headerlink" title="单入口"></a>单入口</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 代码分割配置</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="最终配置"><a href="#最终配置" class="headerlink" title="最终配置"></a>最终配置</h5><p>最终我们会使用单入口+代码分割+动态导入方式来进行配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ImageMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;image-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cpu核数</span></span><br><span class="line"><span class="keyword">const</span> threads = os.<span class="title function_">cpus</span>().<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取处理样式的Loaders</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;sass-loader&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">            <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;stylus-loader&quot;</span>),</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">            <span class="attr">parser</span>: &#123;</span><br><span class="line">              <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">                <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">generator</span>: &#123;</span><br><span class="line">              <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">              <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">              <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">              <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">              <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">              <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">            <span class="attr">generator</span>: &#123;</span><br><span class="line">              <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">            <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;thread-loader&quot;</span>, <span class="comment">// 开启多进程</span></span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">workers</span>: threads, <span class="comment">// 数量</span></span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">cacheDirectory</span>: <span class="literal">true</span>, <span class="comment">// 开启babel编译缓存</span></span><br><span class="line">                  <span class="attr">cacheCompression</span>: <span class="literal">false</span>, <span class="comment">// 缓存文件不要压缩</span></span><br><span class="line">                  <span class="attr">plugins</span>: [<span class="string">&quot;@babel/plugin-transform-runtime&quot;</span>], <span class="comment">// 减少代码体积</span></span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&quot;node_modules&quot;</span>, <span class="comment">// 默认值</span></span><br><span class="line">      <span class="attr">cache</span>: <span class="literal">true</span>, <span class="comment">// 开启缓存</span></span><br><span class="line">      <span class="comment">// 缓存目录</span></span><br><span class="line">      <span class="attr">cacheLocation</span>: path.<span class="title function_">resolve</span>(</span><br><span class="line">        __dirname,</span><br><span class="line">        <span class="string">&quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">      ),</span><br><span class="line">      threads, <span class="comment">// 开启多进程</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取css成单独文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// css压缩</span></span><br><span class="line">    <span class="comment">// new CssMinimizerPlugin(),</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="comment">// css压缩也可以写到optimization.minimizer里面，效果一样的</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">      <span class="comment">// 当生产模式会默认开启TerserPlugin，但是我们需要进行其他配置，就要重新写了</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">parallel</span>: threads, <span class="comment">// 开启多进程</span></span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 压缩图片</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ImageMinimizerPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">minimizer</span>: &#123;</span><br><span class="line">          <span class="attr">implementation</span>: <span class="title class_">ImageMinimizerPlugin</span>.<span class="property">imageminGenerate</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">              [<span class="string">&quot;gifsicle&quot;</span>, &#123; <span class="attr">interlaced</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;jpegtran&quot;</span>, &#123; <span class="attr">progressive</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">              [<span class="string">&quot;optipng&quot;</span>, &#123; <span class="attr">optimizationLevel</span>: <span class="number">5</span> &#125;],</span><br><span class="line">              [</span><br><span class="line">                <span class="string">&quot;svgo&quot;</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">plugins</span>: [</span><br><span class="line">                    <span class="string">&quot;preset-default&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;prefixIds&quot;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">name</span>: <span class="string">&quot;sortAttrs&quot;</span>,</span><br><span class="line">                      <span class="attr">params</span>: &#123;</span><br><span class="line">                        <span class="attr">xmlnsOrder</span>: <span class="string">&quot;alphabetical&quot;</span>,</span><br><span class="line">                      &#125;,</span><br><span class="line">                    &#125;,</span><br><span class="line">                  ],</span><br><span class="line">                &#125;,</span><br><span class="line">              ],</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 代码分割配置</span></span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>, <span class="comment">// 对所有模块都进行分割</span></span><br><span class="line">      <span class="comment">// 其他内容用默认配置即可</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// devServer: &#123;</span></span><br><span class="line">  <span class="comment">//   host: &quot;localhost&quot;, // 启动服务器域名</span></span><br><span class="line">  <span class="comment">//   port: &quot;3000&quot;, // 启动服务器端口号</span></span><br><span class="line">  <span class="comment">//   open: true, // 是否自动打开浏览器</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="eslint动态导入"><a href="#eslint动态导入" class="headerlink" title="eslint动态导入"></a>eslint动态导入</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-plugin-import -D</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;import&quot;</span>], <span class="comment">// 解决动态导入import语法报错问题 --&gt; 实际使用eslint-plugin-import的规则解决的</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="统一命名配置"><a href="#统一命名配置" class="headerlink" title="统一命名配置"></a>统一命名配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&quot;static/js/[name].js&quot;</span>, <span class="comment">// 入口文件打包输出资源命名方式</span></span><br><span class="line">  <span class="attr">chunkFilename</span>: <span class="string">&quot;static/js/[name].chunk.js&quot;</span>, <span class="comment">// 动态导入输出资源命名方式</span></span><br><span class="line">  <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/media/[name].[hash][ext]&quot;</span>, <span class="comment">// 图片、字体等资源命名方式（注意用hash）</span></span><br><span class="line">  <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 提取css成单独文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/css/[name].css&quot;</span>,</span><br><span class="line">            <span class="attr">chunkFilename</span>: <span class="string">&quot;static/css/[name].chunk.css&quot;</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Preload-x2F-Prefetch"><a href="#Preload-x2F-Prefetch" class="headerlink" title="Preload &#x2F; Prefetch"></a>Preload &#x2F; Prefetch</h3><h4 id="为什么-10"><a href="#为什么-10" class="headerlink" title="为什么"></a>为什么</h4><ul><li>我们前面已经做了代码分割，同时会使用 import 动态导入语法来进行代码按需加载（我们也叫懒加载，比如路由懒加载就是这样实现的）。</li><li>但是加载速度还不够好，比如：是用户点击按钮时才加载这个资源的，如果资源体积很大，那么用户会感觉到明显卡顿效果。</li><li>我们想在浏览器空闲时间，加载后续需要使用的资源。我们就需要用上 <code>Preload</code> 或 <code>Prefetch</code> 技术。</li></ul><h4 id="是什么-10"><a href="#是什么-10" class="headerlink" title="是什么"></a>是什么</h4><ul><li><code>Preload</code>：告诉浏览器立即加载资源。</li><li><code>Prefetch</code>：告诉浏览器在空闲时才开始加载资源。</li></ul><p>它们共同点：</p><ul><li>都只会加载资源，并不执行。</li><li>都有缓存。</li></ul><p>它们区别：</p><ul><li><code>Preload</code>加载优先级高，<code>Prefetch</code>加载优先级低。</li><li><code>Preload</code>只能加载当前页面需要使用的资源，<code>Prefetch</code>可以加载当前页面资源，也可以加载下一个页面需要使用的资源。</li></ul><p>总结：</p><ul><li>当前页面优先级高的资源用 <code>Preload</code> 加载。</li><li>下一个页面需要使用的资源用 <code>Prefetch</code> 加载。</li></ul><p>它们的问题：兼容性较差。</p><ul><li>我们可以去 <a href="https://caniuse.com/">Can I Useopen</a> 网站查询 API 的兼容性问题。</li><li><code>Preload</code> 相对于 <code>Prefetch</code> 兼容性好一点。</li></ul><h4 id="怎么用-10"><a href="#怎么用-10" class="headerlink" title="怎么用"></a>怎么用</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue/preload-webpack-plugin -D</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">PreloadWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;@vue/preload-webpack-plugin&quot;</span>);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PreloadWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">rel</span>: <span class="string">&quot;preload&quot;</span>, <span class="comment">// preload兼容性更好</span></span><br><span class="line">            <span class="attr">as</span>: <span class="string">&quot;script&quot;</span>,</span><br><span class="line">            <span class="comment">// rel: &#x27;prefetch&#x27; // prefetch兼容性更差</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Network-Cache"><a href="#Network-Cache" class="headerlink" title="Network Cache"></a>Network Cache</h3><h4 id="为什么-11"><a href="#为什么-11" class="headerlink" title="为什么"></a>为什么</h4><ul><li>将来开发时我们对静态资源会使用缓存来优化，这样浏览器第二次请求资源就能读取缓存了，速度很快。</li><li>但是这样的话就会有一个问题, 因为前后输出的文件名是一样的，都叫 main.js，一旦将来发布新版本，因为文件名没有变化导致浏览器会直接读取缓存，不会加载新资源，项目也就没法更新了。</li><li>所以我们从文件名入手，<strong>确保更新前后文件名不一样，这样就可以做缓存了</strong>。</li></ul><h4 id="是什么-11"><a href="#是什么-11" class="headerlink" title="是什么"></a>是什么</h4><p>它们都会生成一个唯一的 hash 值。</p><ul><li>fullhash（webpack4 是 hash）</li></ul><p>每次修改任何一个文件，所有文件名的 hash 至都将改变。所以一旦修改了任何一个文件，整个项目的文件缓存都将失效。</p><ul><li>chunkhash</li></ul><p>根据不同的入口文件(Entry)进行依赖文件解析、构建对应的 chunk，生成对应的哈希值。我们 js 和 css 是同一个引入，会共享一个 hash 值。</p><ul><li>contenthash</li></ul><p>根据文件内容生成 hash 值，只有文件内容变化了，hash 值才会变化。所有文件 hash 值是独享且不同的。</p><h4 id="怎么用-11"><a href="#怎么用-11" class="headerlink" title="怎么用"></a>怎么用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">            <span class="comment">// [contenthash:8]使用contenthash，取8位长度</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;static/js/[name].[contenthash:8].js&quot;</span>, <span class="comment">// 入口文件打包输出资源命名方式</span></span><br><span class="line">                <span class="attr">chunkFilename</span>: <span class="string">&quot;static/js/[name].[contenthash:8].chunk.js&quot;</span>, <span class="comment">// 动态导入输出资源命名方式</span></span><br><span class="line">                    <span class="attr">assetModuleFilename</span>: <span class="string">&quot;static/media/[name].[hash][ext]&quot;</span>, <span class="comment">// 图片、字体等资源命名方式（注意用hash）</span></span><br><span class="line">                        <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">                <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">                <span class="attr">filename</span>: <span class="string">&quot;static/css/[name].[contenthash:8].css&quot;</span>,</span><br><span class="line">                <span class="attr">chunkFilename</span>: <span class="string">&quot;static/css/[name].[contenthash:8].chunk.css&quot;</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Core-js"><a href="#Core-js" class="headerlink" title="Core-js"></a>Core-js</h3><h4 id="为什么-12"><a href="#为什么-12" class="headerlink" title="为什么"></a>为什么</h4><ul><li>过去我们使用 babel 对 js 代码进行了兼容性处理，其中使用@babel&#x2F;preset-env 智能预设来处理兼容性问题。</li><li>它能将 ES6 的一些语法进行编译转换，比如箭头函数、点点点运算符等。但是如果是 async 函数、promise 对象、数组的一些方法（includes）等，它没办法处理。</li><li>所以此时我们 js 代码仍然存在兼容性问题，一旦遇到低版本浏览器会直接报错。所以我们想要将 js 兼容性问题彻底解决</li></ul><h4 id="是什么-12"><a href="#是什么-12" class="headerlink" title="是什么"></a>是什么</h4><p><code>core-js</code> 是专门用来做 ES6 以及以上 API 的 <code>polyfill</code>。</p><p><code>polyfill</code>翻译过来叫做垫片&#x2F;补丁。就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性。</p><h4 id="怎么用-12"><a href="#怎么用-12" class="headerlink" title="怎么用"></a>怎么用</h4><h5 id="Eslint兼容"><a href="#Eslint兼容" class="headerlink" title="Eslint兼容"></a>Eslint兼容</h5><ul><li><strong>修改main.js</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加promise代码</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello promise&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时 Eslint 会对 Promise 报错。</p><ul><li><strong>下载包</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/eslint-parser -D</span><br></pre></td></tr></table></figure><ul><li>.eslintrc.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;@babel/eslint-parser&quot;</span>, <span class="comment">// 支持最新的最终 ECMAScript 标准</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;import&quot;</span>], <span class="comment">// 解决动态导入import语法报错问题 --&gt; 实际使用eslint-plugin-import的规则解决的</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>, <span class="comment">// es6</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// es module</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时观察打包输出的 js 文件，我们发现 Promise 语法并没有编译转换，所以我们需要使用 <code>core-js</code> 来进行 <code>polyfill</code>。</p><h5 id="js兼容"><a href="#js兼容" class="headerlink" title="js兼容"></a>js兼容</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i core-js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全部引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js&quot;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 添加promise代码</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello promise&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样引入会将所有兼容性代码全部引入，体积太大了。我们只想引入 promise 的 <code>polyfill</code>。</p><ul><li><strong>手动按需引入</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;core-js/es/promise&quot;</span>;</span><br><span class="line"><span class="comment">// 添加promise代码</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello promise&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p><strong>自动按需引入</strong></p></li><li><p>babel.config.js</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 智能预设：能够编译ES6语法</span></span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">      <span class="comment">// 按需加载core-js的polyfill</span></span><br><span class="line">      &#123; <span class="attr">useBuiltIns</span>: <span class="string">&quot;usage&quot;</span>, <span class="attr">corejs</span>: &#123; <span class="attr">version</span>: <span class="string">&quot;3&quot;</span>, <span class="attr">proposals</span>: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时就会自动根据我们代码中使用的语法，来按需加载相应的 <code>polyfill</code> 了。</p><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><h4 id="为什么-13"><a href="#为什么-13" class="headerlink" title="为什么"></a>为什么</h4><ul><li>开发 Web App 项目，项目一旦处于网络离线情况，就没法访问了。</li><li>我们希望给项目提供离线体验。</li></ul><h4 id="是什么-13"><a href="#是什么-13" class="headerlink" title="是什么"></a>是什么</h4><ul><li>渐进式网络应用程序(progressive web application - PWA)：是一种可以提供类似于 native app(原生应用程序) 体验的 Web App 的技术。</li><li>其中最重要的是，在 <strong>离线(offline)</strong> 时应用程序能够继续运行功能。</li><li>内部通过 Service Workers 技术实现的。</li></ul><h4 id="怎么用-13"><a href="#怎么用-13" class="headerlink" title="怎么用"></a>怎么用</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i workbox-webpack-plugin -D</span><br><span class="line">npm i serve -g</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WorkboxPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;workbox-webpack-plugin&quot;</span>);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WorkboxPlugin</span>.<span class="title class_">GenerateSW</span>(&#123;</span><br><span class="line">            <span class="comment">// 这些选项帮助快速启用 ServiceWorkers</span></span><br><span class="line">            <span class="comment">// 不允许遗留任何“旧的” ServiceWorkers</span></span><br><span class="line">            <span class="attr">clientsClaim</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">skipWaiting</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;serviceWorker&quot;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    navigator.<span class="property">serviceWorker</span></span><br><span class="line">      .<span class="title function_">register</span>(<span class="string">&quot;/service-worker.js&quot;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">registration</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SW registered: &quot;</span>, registration);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">registrationError</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SW registration failed: &quot;</span>, registrationError);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们从 4 个角度对 webpack 和代码进行了优化：</p><p><strong>1.提升开发体验</strong></p><ul><li>使用 <code>Source Map</code> 让开发或上线时代码报错能有更加准确的错误提示。</li></ul><p><strong>2.提升 webpack 提升打包构建速度</strong></p><ul><li>使用 <code>HotModuleReplacement</code> 让开发时只重新编译打包更新变化了的代码，不变的代码使用缓存，从而使更新速度更快。</li><li>使用 <code>OneOf</code> 让资源文件一旦被某个 loader 处理了，就不会继续遍历了，打包速度更快。</li><li>使用 <code>Include/Exclude</code> 排除或只检测某些文件，处理的文件更少，速度更快。</li><li>使用 <code>Cache</code> 对 eslint 和 babel 处理的结果进行缓存，让第二次打包速度更快。</li><li>使用 <code>Thead</code> 多进程处理 eslint 和 babel 任务，速度更快。（需要注意的是，进程启动通信都有开销的，要在比较多代码处理时使用才有效果）</li></ul><p><strong>3.减少代码体积</strong></p><ul><li>使用 <code>Tree Shaking</code> 剔除了没有使用的多余代码，让代码体积更小。</li><li>使用 <code>@babel/plugin-transform-runtime</code> 插件对 babel 进行处理，让辅助代码从中引入，而不是每个文件都生成辅助代码，从而体积更小。</li><li>使用 <code>Image Minimizer</code> 对项目中图片进行压缩，体积更小，请求速度更快。（需要注意的是，如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。）</li></ul><p><strong>4.优化代码运行性能</strong></p><ul><li>使用 <code>Code Split</code> 对代码进行分割成多个 js 文件，从而使单个文件体积更小，并行加载 js 速度更快。并通过 import 动态导入语法进行按需加载，从而达到需要使用时才加载该资源，不用时不加载资源。</li><li>使用 <code>Preload / Prefetch</code> 对代码进行提前加载，等未来需要使用时就能直接使用，从而用户体验更好。</li><li>使用 <code>Network Cache</code> 能对输出资源文件进行更好的命名，将来好做缓存，从而用户体验更好。</li><li>使用 <code>Core-js</code> 对 js 进行兼容性处理，让我们代码能运行在低版本浏览器。</li><li>使用 <code>PWA</code> 能让代码离线也能访问，从而提升用户体验。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【学习笔记】尚硅谷Webpack5入门到原理 | 基础篇</title>
      <link href="/2023/01/17/WebPack5-01/"/>
      <url>/2023/01/17/WebPack5-01/</url>
      
        <content type="html"><![CDATA[<h1 id="WebPack5入门到原理"><a href="#WebPack5入门到原理" class="headerlink" title="WebPack5入门到原理"></a>WebPack5入门到原理</h1><blockquote><p>⛄最近报名了字节跳动的前端青训营，大作业是要做一个组件库项目。</p><p>⛄当我自信的打开IDE准备大展身手的时候发现一点思路都没有，网上搜罗了很多教程后发现自己对工程化的知识了解尚浅。</p><p>⛄于是就发现了谷谷的这套教程，真的讲的很好，学完Webpack就可以去搭建一个组件库脚手架了。</p><p>⭐<strong>注</strong>：本文是对<strong>尚硅谷 Web 前端之 Webpack5 教程</strong>的学习笔记记录，加入了一些自己的练习改动与思考。</p><p>⭐<strong>推荐大家去看原视频</strong>：<a href="https://www.bilibili.com/video/BV14T4y1z7sw/">尚硅谷Webpack5入门到原理（面试开发一条龙）_哔哩哔哩_bilibili</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="为什么需要打包工具？"><a href="#为什么需要打包工具？" class="headerlink" title="为什么需要打包工具？"></a>为什么需要打包工具？</h3><ul><li>开发时，我们会使用框架(React、Vue)，ES6模块化语法，Less&#x2F;Sass等css 预处理器等语法进行开发。</li><li>这样的代码要想在浏览器运行必须经过编译成浏览器能识别的JS、Css 等语法，才能运行。</li><li>所以我们需要打包工具帮我们做完这些事。</li><li>除此之外，打包工具还能压缩代码、做兼容性处理、提升代码性能等。</li></ul><h3 id="有哪些打包工具？"><a href="#有哪些打包工具？" class="headerlink" title="有哪些打包工具？"></a>有哪些打包工具？</h3><ul><li>Grunt</li><li>Gulp</li><li>Parcel</li><li>Webpack</li><li>Rollup</li><li>vite</li><li>…</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>webpack是一个静态资源打包工具。</li><li>它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。</li><li>输出的文件就是编译好的文件，就可以在浏览器段运行了。</li><li>我们将lebpack输出的文件叫做bundle 。</li></ul><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p><strong>Webpack本身功能是有限的</strong>：</p><ul><li>开发模式：仅能编译JS中的 ES Module语法，箭头函数等ES6语法不会编译</li><li>生产模式：能编译JS中的ES Module语法，还能压缩JS代码</li></ul><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webpack_code <span class="comment"># 项目根目录（所有指令必须在这个目录运行）</span></span><br><span class="line">    └── src <span class="comment"># 项目源码目录</span></span><br><span class="line">        ├── js <span class="comment"># js文件目录</span></span><br><span class="line">        │   ├── count.js</span><br><span class="line">        │   └── sum.js</span><br><span class="line">        └── main.js <span class="comment"># 项目主文件</span></span><br></pre></td></tr></table></figure><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><ul><li>count.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sum.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + c, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><h4 id="下载依赖"><a href="#下载依赖" class="headerlink" title="下载依赖"></a>下载依赖</h4><p>打开终端，来到项目根目录。运行以下指令：</p><ul><li>初始化<code>package.json</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>此时会生成一个基础的 <code>package.json</code> 文件。</p><p><strong>需要注意的是 <code>package.json</code> 中 <code>name</code> 字段不能叫做 <code>webpack</code>, 否则下一步会报错</strong></p><ul><li>下载依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><h4 id="启用Webpack"><a href="#启用Webpack" class="headerlink" title="启用Webpack"></a>启用Webpack</h4><p>输出文件会打包在项目目录下  dist 文件夹下</p><ul><li>开发模式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npx会临时改变环境变量，去调用node_moudle中 .bash 文件中的命令</span></span><br><span class="line">npx webpack ./src/main.js --mode=development</span><br></pre></td></tr></table></figure><ul><li>生产模式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此状态下打包会将ES6全部转为ES5 并且压缩代码</span></span><br><span class="line">npx webpack ./src/main.js --mode=production</span><br></pre></td></tr></table></figure><p><code>npx webpack</code>: 是用来运行本地安装 <code>Webpack</code> 包的。</p><p><code>./src/main.js</code>: 指定 <code>Webpack</code> 从 <code>main.js</code> 文件开始打包，不但会打包 <code>main.js</code>，还会将其依赖也一起打包进来。</p><p><code>--mode=xxx</code>：指定模式（环境）。</p><p><code>Webpack</code> 本身功能比较少，只能处理 <code>js</code> 资源，一旦遇到 <code>css</code> 等其他资源就会报错。（我们需要其他的Webpack工具来帮忙处理）</p><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="五大核心概念"><a href="#五大核心概念" class="headerlink" title="五大核心概念"></a>五大核心概念</h3><ol><li>entry（入口）<ul><li>指示 Webpack 从哪个文件开始打包</li></ul></li><li>output（输出）<ul><li>指示 Webpack 打包完的文件输出到哪里去，如何命名等</li></ul></li><li>loader（加载器）<ul><li>webpack 本身只能处理 js、json 等资源，其他资源需要借助 loader，Webpack 才能解析</li></ul></li><li>plugins（插件）<ul><li>扩展 Webpack 的功能</li></ul></li><li>mode（模式）<ul><li>开发模式：development</li><li>生产模式：production</li></ul></li></ol><h3 id="准备Webpack配置文件"><a href="#准备Webpack配置文件" class="headerlink" title="准备Webpack配置文件"></a>准备Webpack配置文件</h3><ul><li>在项目根目录下新建文件：<code>webpack.config.js</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Webpack 是基于 Node.js 运行的，所以采用 Common.js 模块化规范</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li><strong>配置文件</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js的核心模块，专门用来处理文件路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="comment">// 相对路径和绝对路径都行</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// path: 文件输出目录，必须是绝对路径</span></span><br><span class="line">    <span class="comment">// path.resolve()方法返回一个绝对路径</span></span><br><span class="line">    <span class="comment">// __dirname 当前文件的文件夹绝对路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="comment">// filename: 输出文件名</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加载器</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 开发模式</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>运行指令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此时webpack会根据配置文件进行打包</span></span><br><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h2 id="开发模式介绍"><a href="#开发模式介绍" class="headerlink" title="开发模式介绍"></a>开发模式介绍</h2><p>开发模式顾名思义就是我们开发代码时使用的模式。</p><p><strong>这个模式下我们主要做两件事</strong>：</p><ol><li>编译代码，使浏览器能识别运行<ul><li>开发时我们有样式资源、字体图标、图片资源、html 资源等，webpack 默认都不能处理这些资源，所以我们要加载配置来编译这些资源</li></ul></li><li>代码质量检查，树立代码规范<ul><li>提前检查代码的一些隐患，让代码运行时能更加健壮。</li><li>提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</li></ul></li></ol><h2 id="处理样式资源"><a href="#处理样式资源" class="headerlink" title="处理样式资源"></a>处理样式资源</h2><ul><li>学习使用 Webpack 如何处理 Css、Less、Sass、Scss、Styl 样式资源</li></ul><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Webpack 本身是不能识别样式资源的，所以我们需要借助 Loader 来帮助 Webpack 解析样式资源</p><p>我们找 Loader 都应该去官方文档中找到对应的 Loader，然后使用</p><p>官方文档找不到的话，可以从社区 Github 中搜索查询</p><p><a href="https://webpack.docschina.org/loaders/">Webpack 官方 Loader 文档open in new window</a></p><h3 id="处理CSS资源"><a href="#处理CSS资源" class="headerlink" title="处理CSS资源"></a>处理CSS资源</h3><h4 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要下载 css-loader 与 style-loader 两个loader</span></span><br><span class="line">npm i css-loader style-loader -D</span><br></pre></td></tr></table></figure><h4 id="功能介绍-1"><a href="#功能介绍-1" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul><li><code>css-loader</code>：负责将 Css 文件编译成 Webpack 能识别的模块</li><li><code>style-loader</code>：会动态创建一个 Style 标签，里面放置 Webpack 中 Css 模块内容</li></ul><p>此时样式就会以 Style 标签的形式在页面上生效</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>, <span class="comment">// 将js中css通过创建 style 标签添加 html 文件中生效</span></span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>, <span class="comment">// 将css资源编译成 commonjs 的模块到js中</span></span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="添加Css资源"><a href="#添加Css资源" class="headerlink" title="添加Css资源"></a>添加Css资源</h4><ul><li>src&#x2F;css&#x2F;index.css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"><span class="comment">// 引入 Css 资源，Webpack才会对其打包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Hello Webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><ul><li>之后会神奇的发现CSS样式在页面中生效啦！</li></ul><h3 id="处理Less资源"><a href="#处理Less资源" class="headerlink" title="处理Less资源"></a>处理Less资源</h3><h4 id="下载包-1"><a href="#下载包-1" class="headerlink" title="下载包"></a>下载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader less -D</span><br></pre></td></tr></table></figure><h4 id="功能介绍-2"><a href="#功能介绍-2" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul><li><code>less-loader</code>：负责将 Less 文件编译成 Css 文件</li></ul><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="comment">// loader: &#x27;xxx&#x27;, 只能使用一个loader</span></span><br><span class="line">        <span class="comment">// use可以使用多个 loader</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="添加Less资源"><a href="#添加Less资源" class="headerlink" title="添加Less资源"></a>添加Less资源</h4><ul><li>src&#x2F;less&#x2F;index.less</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pinkLess</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"><span class="comment">// 引入资源，Webpack才会对其打包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./less/index.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Hello Webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;pinkLess&quot;</span>&gt;</span>Hello Webpack Less<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="运行指令-1"><a href="#运行指令-1" class="headerlink" title="运行指令"></a>运行指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpacl</span><br></pre></td></tr></table></figure><h3 id="处理Styl资源"><a href="#处理Styl资源" class="headerlink" title="处理Styl资源"></a>处理Styl资源</h3><h4 id="下载包-2"><a href="#下载包-2" class="headerlink" title="下载包"></a>下载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i stylus-loader -D</span><br></pre></td></tr></table></figure><h4 id="功能介绍-3"><a href="#功能介绍-3" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul><li><code>stylus-loader</code>：负责将 Styl 文件编译成 Css 文件</li></ul><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="添加Styl资源"><a href="#添加Styl资源" class="headerlink" title="添加Styl资源"></a>添加Styl资源</h4><ul><li>src&#x2F;styl&#x2F;index.styl</li></ul><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> </span><br><span class="line">  <span class="attribute">width</span> <span class="number">100px</span> </span><br><span class="line">  <span class="attribute">height</span> <span class="number">100px</span> </span><br><span class="line">  <span class="attribute">background-color</span> pink</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&quot;./math&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"><span class="comment">// 引入资源，Webpack才会对其打包</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./less/index.less&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.sass&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.scss&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styl/index.styl&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><h4 id="运行指令-2"><a href="#运行指令-2" class="headerlink" title="运行指令"></a>运行指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="处理Sass和Scss资源"><a href="#处理Sass和Scss资源" class="headerlink" title="处理Sass和Scss资源"></a>处理Sass和Scss资源</h3><h4 id="下载包-3"><a href="#下载包-3" class="headerlink" title="下载包"></a>下载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sass-loader sass -D</span><br></pre></td></tr></table></figure><h4 id="功能介绍-4"><a href="#功能介绍-4" class="headerlink" title="功能介绍"></a>功能介绍</h4><ul><li><code>sass-loader</code>：负责将 Sass 文件编译成 css 文件</li><li><code>sass</code>：<code>sass-loader</code> 依赖 <code>sass</code> 进行编译</li></ul><h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// scss资源</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="添加Sass资源"><a href="#添加Sass资源" class="headerlink" title="添加Sass资源"></a>添加Sass资源</h4><ul><li>src&#x2F;sass&#x2F;index.scss</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.blueScss</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;sass&#x2F;index.sass</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.greenSass</span><br><span class="line">    color: green</span><br></pre></td></tr></table></figure><ul><li>src&#x2F;main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./js/count&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./js/sum&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/index.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./less/index.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.sass&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./sass/index.scss&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br></pre></td></tr></table></figure><h4 id="运行指令-3"><a href="#运行指令-3" class="headerlink" title="运行指令"></a>运行指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h2 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h2><p>过去在 Webpack4 时，我们处理图片资源通过 <code>file-loader</code> 和 <code>url-loader</code> 进行处理</p><p>现在 Webpack5 已经将两个 Loader 功能内置到 Webpack 里了，我们只需要简单配置即可处理图片资源</p><h3 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 图片配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加图片资源"><a href="#添加图片资源" class="headerlink" title="添加图片资源"></a>添加图片资源</h3><ul><li>src&#x2F;img&#x2F;jpegImg.jpeg</li><li>src&#x2F;img&#x2F;pngImg.png</li><li>src&#x2F;img&#x2F;gifImg.gif</li></ul><h3 id="使用图片资源"><a href="#使用图片资源" class="headerlink" title="使用图片资源"></a>使用图片资源</h3><ul><li>src&#x2F;css&#x2F;index.css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.jpegImg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/jpegImg.jpeg&quot;</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pngImg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/pngImg.png&quot;</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gifImg</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../img/gifImg.gif&quot;</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行指令-4"><a href="#运行指令-4" class="headerlink" title="运行指令"></a>运行指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h3 id="输出资源情况"><a href="#输出资源情况" class="headerlink" title="输出资源情况"></a>输出资源情况</h3><ul><li>此时如果查看 dist 目录的话，会发现多了三张图片资源</li><li>因为 Webpack 会将所有打包好的资源输出到 dist 目录下</li><li><strong>为什么样式资源没有呢？</strong><ul><li>因为经过 <code>style-loader</code> 的处理，样式资源打包到 main.js 里面去了，所以没有额外输出出来</li></ul></li></ul><h3 id="对图片资源进行优化"><a href="#对图片资源进行优化" class="headerlink" title="对图片资源进行优化"></a>对图片资源进行优化</h3><ul><li>将小于某个大小的图片转化成 data URI 形式（Base64 格式）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;main.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span> <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>优点：减少请求数量</li><li>缺点：体积变得更大</li></ul><p>此时输出的图片文件就只有两张，有一张图片以 data URI 形式内置到 js 中了 （注意：需要将上次打包生成的文件清空，再重新打包才有效果）</p><h2 id="修改输出资源的名称和路径"><a href="#修改输出资源的名称和路径" class="headerlink" title="修改输出资源的名称和路径"></a>修改输出资源的名称和路径</h2><h3 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">          <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">          <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">          <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">          <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="修改index-html"><a href="#修改index-html" class="headerlink" title="修改index.html"></a>修改index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 修改引用js的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../dist/static/js/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span>Hello Webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;pinkLess&quot;</span>&gt;</span>Hello Webpack Less<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;greenSass&quot;</span>&gt;</span>Hello Webpack Sass<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;blueScss&quot;</span>&gt;</span>Hello Webpack Scss<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jpegImg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pngImg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gifImg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行指令-5"><a href="#运行指令-5" class="headerlink" title="运行指令"></a>运行指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><ul><li><strong>此时输出文件目录</strong>：<ul><li>（注意：需要将上次打包生成的文件清空，再重新打包才有效果）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── dist</span><br><span class="line">    └── static</span><br><span class="line">         ├── imgs</span><br><span class="line">         │    └── 7003350e.png</span><br><span class="line">         └── js</span><br><span class="line">              └── main.js</span><br></pre></td></tr></table></figure><h2 id="自动清空上次打包资源"><a href="#自动清空上次打包资源" class="headerlink" title="自动清空上次打包资源"></a>自动清空上次打包资源</h2><h3 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="运行指令-6"><a href="#运行指令-6" class="headerlink" title="运行指令"></a>运行指令</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>观察 dist 目录资源情况</p><h2 id="处理字体图标资源"><a href="#处理字体图标资源" class="headerlink" title="处理字体图标资源"></a>处理字体图标资源</h2><ul><li>这里以阿里巴巴矢量图标库为例</li><li>图标库地址：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></li></ul><h3 id="添加字体图标资源"><a href="#添加字体图标资源" class="headerlink" title="添加字体图标资源"></a>添加字体图标资源</h3><ul><li>src&#x2F;fonts&#x2F;iconfont.ttf</li><li>src&#x2F;fonts&#x2F;iconfont.woff</li><li>src&#x2F;fonts&#x2F;iconfont.woff2</li><li>src&#x2F;css&#x2F;iconfont.css</li></ul><h3 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h3><ul><li>src&#x2F;main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./css/iconfont.css&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用字体图标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-arrow-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-ashbin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-browse&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-7"><a href="#配置-7" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 添加此处配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>type: &quot;asset/resource&quot;</code>和<code>type: &quot;asset&quot;</code>的区别：</p><ol><li><code>type: &quot;asset/resource&quot;</code> 相当于<code>file-loader</code>, 将文件转化成 Webpack 能识别的资源，其他不做处理</li><li><code>type: &quot;asset&quot;</code> 相当于<code>url-loader</code>, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式</li></ol><h3 id="运行指令-7"><a href="#运行指令-7" class="headerlink" title="运行指令"></a>运行指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h2 id="处理音频资源"><a href="#处理音频资源" class="headerlink" title="处理音频资源"></a>处理音频资源</h2><h3 id="配置-8"><a href="#配置-8" class="headerlink" title="配置"></a>配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 添加此处配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?|map4|map3|avi)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="JS兼容性与代码格式规范"><a href="#JS兼容性与代码格式规范" class="headerlink" title="JS兼容性与代码格式规范"></a>JS兼容性与代码格式规范</h2><p>Webpack 对 js 处理是有限的，只能编译 js 中 ES 模块化语法，不能编译其他语法，导致 js 不能在 IE 等浏览器运行，所以我们希望做一些兼容性处理。</p><p>其次开发中，团队对代码格式是有严格要求的，我们不能由肉眼去检测代码格式，需要使用专业的工具来检测。</p><ul><li>针对 js <strong>兼容性</strong>处理，我们使用 <strong>Babel</strong> 来完成</li><li>针对<strong>代码格式</strong>，我们使用 <strong>Eslint</strong> 来完成</li></ul><p>我们先完成 Eslint，检测代码格式无误后，在由 Babel 做代码兼容性处理</p><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><ul><li>可组装的 JavaScript 和 JSX 检查工具</li><li>这句话意思就是：它是用来检测 js 和 jsx 语法的工具，可以配置各项功能</li><li>我们使用 Eslint，关键是写 Eslint 配置文件，里面写上各种 rules 规则，将来运行 Eslint 时就会以写的规则对代码进行检查</li></ul><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件由很多种写法：</p><ul><li>.eslintrc.*：新建文件，位于项目根目录<ul><li><code>.eslintrc</code></li><li><code>.eslintrc.js</code></li><li><code>.eslintrc.json</code></li><li>区别在于配置格式不一样</li></ul></li><li><code>package.json</code> 中 <code>eslintConfig</code>：不需要创建文件，在原有文件基础上写</li></ul><p>ESLint 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</p><h4 id="具体配置"><a href="#具体配置" class="headerlink" title="具体配置"></a>具体配置</h4><p>我们以 <code>.eslintrc.js</code> 配置文件为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 解析选项</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 具体检查规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 继承其他规则</span></span><br><span class="line">  <span class="attr">extends</span>: [],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 其他规则详见：https://eslint.bootcss.com/docs/user-guide/configuring</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li><p>parserOptions 解析选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">parserOptions</span>: &#123;</span><br><span class="line">  <span class="attr">ecmaVersion</span>: <span class="number">6</span>, <span class="comment">// ES 语法版本</span></span><br><span class="line">  <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// ES 模块化</span></span><br><span class="line">  <span class="attr">ecmaFeatures</span>: &#123; <span class="comment">// ES 其他特性</span></span><br><span class="line">    <span class="attr">jsx</span>: <span class="literal">true</span> <span class="comment">// 如果是 React 项目，就需要开启 jsx 语法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>rules 具体规则</p><ul><li><p><code>&quot;off&quot;</code> 或 <code>0</code> - 关闭规则</p></li><li><p><code>&quot;warn&quot;</code> 或 <code>1</code> - 开启规则，使用警告级别的错误：<code>warn</code> (不会导致程序退出)</p></li><li><p><code>&quot;error&quot;</code> 或 <code>2</code> - 开启规则，使用错误级别的错误：<code>error</code> (当被触发的时候，程序会退出)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="attr">semi</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// 禁止使用分号</span></span><br><span class="line">  <span class="string">&#x27;array-callback-return&#x27;</span>: <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 强制数组方法的回调函数中有 return 语句，否则警告</span></span><br><span class="line">  <span class="string">&#x27;default-case&#x27;</span>: [</span><br><span class="line">    <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 要求 switch 语句中有 default 分支，否则警告</span></span><br><span class="line">    &#123; <span class="attr">commentPattern</span>: <span class="string">&#x27;^no default$&#x27;</span> &#125; <span class="comment">// 允许在最后注释 no default, 就不会有警告了</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">eqeqeq</span>: [</span><br><span class="line">    <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 强制使用 === 和 !==，否则警告</span></span><br><span class="line">    <span class="string">&#x27;smart&#x27;</span> <span class="comment">// https://eslint.bootcss.com/docs/rules/eqeqeq#smart 除了少数情况下不会有警告</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多规则详见：<a href="https://eslint.bootcss.com/docs/rules/">规则文档</a></p></li></ul></li><li><p>extends 继承</p><ul><li><p>开发中一点点写 rules 规则太费劲了，所以有更好的办法，继承现有的规则。</p><p>现有以下较为有名的规则：</p><ul><li><p><a href="https://eslint.bootcss.com/docs/rules/">Eslint 官方的规则open in new window</a>：<code>eslint:recommended</code></p></li><li><p><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-plugin-eslint">Vue Cli 官方的规则open in new window</a>：<code>plugin:vue/essential</code></p></li><li><p><a href="https://github.com/facebook/create-react-app/tree/main/packages/eslint-config-react-app">React Cli 官方的规则open in new window</a>：<code>react-app</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如在React项目中，我们可以这样写配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;react-app&quot;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 我们的规则会覆盖掉react-app的规则</span></span><br><span class="line">    <span class="comment">// 所以想要修改规则直接改就是了</span></span><br><span class="line">    <span class="attr">eqeqeq</span>: [<span class="string">&quot;warn&quot;</span>, <span class="string">&quot;smart&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h4 id="在Webpack中使用"><a href="#在Webpack中使用" class="headerlink" title="在Webpack中使用"></a>在Webpack中使用</h4><h5 id="下载包-4"><a href="#下载包-4" class="headerlink" title="下载包"></a>下载包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-webpack-plugin eslint -D</span><br></pre></td></tr></table></figure><h5 id="定义Eslint配置文件"><a href="#定义Eslint配置文件" class="headerlink" title="定义Eslint配置文件"></a>定义Eslint配置文件</h5><ul><li>.eslintrc.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置好之后会发现报错</span></span><br><span class="line"><span class="keyword">var</span> result1 = <span class="title function_">count</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line"><span class="keyword">var</span> result2 = <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br></pre></td></tr></table></figure><ul><li>webpack.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 加入插件 Webpack 在编译时会对Eslint进行报错</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="VSCode-Webstorm-插件"><a href="#VSCode-Webstorm-插件" class="headerlink" title="VSCode Webstorm 插件"></a>VSCode Webstorm 插件</h4><ul><li>不同的IDE都有对应的Eslint插件，可以对Eslint规则进行报错，还可以配置保存后一键修改，非常舒服。</li></ul><h3 id="Bable"><a href="#Bable" class="headerlink" title="Bable"></a>Bable</h3><ul><li>JavaScript 编译器。</li><li>主要用于将 ES6 语法编写的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中</li></ul><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件由很多种写法：</p><ul><li>babel.config.* ：新建文件，位于项目根目录<ul><li><code>babel.config.js</code></li><li><code>babel.config.json</code></li></ul></li><li>.babelrc.* ：新建文件，位于项目根目录<ul><li><code>.babelrc</code></li><li><code>.babelrc.js</code></li><li><code>.babelrc.json</code></li></ul></li><li><code>package.json</code> 中 <code>babel</code>：不需要创建文件，在原有文件基础上写</li></ul><p>Babel 会查找和自动读取它们，所以以上配置文件只需要存在一个即可</p><h4 id="具体配置-1"><a href="#具体配置-1" class="headerlink" title="具体配置"></a>具体配置</h4><ul><li>babel.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 预设</span></span><br><span class="line">  <span class="attr">presets</span>: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>presets 预设</strong></p><p>简单理解：就是一组 Babel 插件, 扩展 Babel 功能</p><ul><li><p><code>@babel/preset-env</code>: 一个智能预设，允许您使用最新的 JavaScript。</p></li><li><p><code>@babel/preset-react</code>：一个用来编译 React jsx 语法的预设</p></li><li><p><code>@babel/preset-typescript</code>：一个用来编译 TypeScript 语法的预设</p></li><li><p>webpack.config.js</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 对js进行编译</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>打开打包后的 <code>dist/static/js/main.js</code> 文件查看，会发现箭头函数等 ES6 语法已经转换了</p><h2 id="处理HTML资源"><a href="#处理HTML资源" class="headerlink" title="处理HTML资源"></a>处理HTML资源</h2><h3 id="下载包-5"><a href="#下载包-5" class="headerlink" title="下载包"></a>下载包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="配置-9"><a href="#配置-9" class="headerlink" title="配置"></a>配置</h3><ul><li>webpack.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>public&#x2F;index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 去除对js的引入 HtmlWebpackPlugin 会自动引入 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行指令-8"><a href="#运行指令-8" class="headerlink" title="运行指令"></a>运行指令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><h2 id="开发服务器-amp-自动化"><a href="#开发服务器-amp-自动化" class="headerlink" title="开发服务器&amp;自动化"></a>开发服务器&amp;自动化</h2><p>每次写完代码都需要手动输入指令才能编译代码，太麻烦了，我们希望一切自动化</p><h3 id="下载包-6"><a href="#下载包-6" class="headerlink" title="下载包"></a>下载包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><h3 id="配置-10"><a href="#配置-10" class="headerlink" title="配置"></a>配置</h3><ul><li>webpack.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>, <span class="comment">// 自动将上次打包目录资源清空</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开发服务器</span></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">        <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="运行指令-9"><a href="#运行指令-9" class="headerlink" title="运行指令"></a>运行指令</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack serve</span><br></pre></td></tr></table></figure><p><strong>注意运行指令发生了变化</strong></p><ul><li>并且当你使用开发服务器时，所有代码都会在内存中编译打包，并不会输出到 dist 目录下。</li><li>开发时我们只关心代码能运行，有效果即可，至于代码被编译成什么样子，我们并不需要知道。</li></ul><h2 id="生产模式介绍"><a href="#生产模式介绍" class="headerlink" title="生产模式介绍"></a>生产模式介绍</h2><ul><li>生产模式是开发完成代码后，我们需要得到代码将来部署上线。</li><li>这个模式下我们主要对代码进行优化，让其运行性能更好。</li></ul><p>优化主要从两个角度出发:</p><ol><li>优化代码运行性能</li><li>优化代码打包速度</li></ol><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── webpack-test (项目根目录)</span><br><span class="line">    ├── config (Webpack配置文件目录)</span><br><span class="line">    │    ├── webpack.dev.js(开发模式配置文件)</span><br><span class="line">    │    └── webpack.prod.js(生产模式配置文件)</span><br><span class="line">    ├── node_modules (下载包存放目录)</span><br><span class="line">    ├── src (项目源码目录，除了html其他都在src里面)</span><br><span class="line">    │    └── 略</span><br><span class="line">    ├── public (项目html文件)</span><br><span class="line">    │    └── index.html</span><br><span class="line">    ├── .eslintrc.js(Eslint配置文件)</span><br><span class="line">    ├── babel.config.js(Babel配置文件)</span><br><span class="line">    └── package.json (包的依赖管理配置文件)</span><br></pre></td></tr></table></figure><h3 id="修改-webpack-dev-js"><a href="#修改-webpack-dev-js" class="headerlink" title="修改 webpack.dev.js"></a>修改 webpack.dev.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="literal">undefined</span>, <span class="comment">// 开发模式没有输出，不需要指定输出目录</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="comment">// clean: true, // 开发模式没有输出，不需要清空输出结果</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">          <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">          <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">          <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">          <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>, <span class="comment">// 启动服务器域名</span></span><br><span class="line">    <span class="attr">port</span>: <span class="string">&quot;3000&quot;</span>, <span class="comment">// 启动服务器端口号</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行开发模式的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack serve --config ./config/webpack.dev.js</span><br></pre></td></tr></table></figure><h3 id="修改-webpack-prod-js"><a href="#修改-webpack-prod-js" class="headerlink" title="修改 webpack.prod.js"></a>修改 webpack.prod.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">          <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">          <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">          <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">          <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// devServer: &#123;</span></span><br><span class="line">  <span class="comment">//   host: &quot;localhost&quot;, // 启动服务器域名</span></span><br><span class="line">  <span class="comment">//   port: &quot;3000&quot;, // 启动服务器端口号</span></span><br><span class="line">  <span class="comment">//   open: true, // 是否自动打开浏览器</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行生产模式的指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config ./config/webpack.prod.js</span><br></pre></td></tr></table></figure><h3 id="配置运行命令"><a href="#配置运行命令" class="headerlink" title="配置运行命令"></a>配置运行命令</h3><p>为了方便运行不同模式的指令，我们将指令定义在 package.json 中 scripts 里面</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx webpack serve --config ./config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx webpack --config ./config/webpack.prod.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>以后启动指令：</p><ul><li>开发模式：<code>npm start</code> 或 <code>npm run dev</code></li><li>生产模式：<code>npm run build</code></li></ul><h2 id="CSS高级处理"><a href="#CSS高级处理" class="headerlink" title="CSS高级处理"></a>CSS高级处理</h2><h3 id="生产CSS文件通过linke引入"><a href="#生产CSS文件通过linke引入" class="headerlink" title="生产CSS文件通过linke引入"></a>生产CSS文件通过linke引入</h3><ul><li>Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式</li><li>这样对于网站来说，会出现闪屏现象，用户体验不好</li><li>我们应该是单独的 Css 文件，通过 link 标签加载性能才好</li></ul><h4 id="下载包-7"><a href="#下载包-7" class="headerlink" title="下载包"></a>下载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><h4 id="配置-11"><a href="#配置-11" class="headerlink" title="配置"></a>配置</h4><ul><li>webpack.prod.js</li><li>这里加入了一个插件，在use里面加入了一个loader</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;less-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;sass-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>, <span class="string">&quot;stylus-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">          <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">          <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">          <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">          <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取css成单独文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// devServer: &#123;</span></span><br><span class="line">  <span class="comment">//   host: &quot;localhost&quot;, // 启动服务器域名</span></span><br><span class="line">  <span class="comment">//   port: &quot;3000&quot;, // 启动服务器端口号</span></span><br><span class="line">  <span class="comment">//   open: true, // 是否自动打开浏览器</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="CSS兼容性处理"><a href="#CSS兼容性处理" class="headerlink" title="CSS兼容性处理"></a>CSS兼容性处理</h3><h4 id="下载包-8"><a href="#下载包-8" class="headerlink" title="下载包"></a>下载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-loader postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure><h4 id="配置-12"><a href="#配置-12" class="headerlink" title="配置"></a>配置</h4><ul><li>webpack.prod.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;sass-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">                <span class="attr">plugins</span>: [</span><br><span class="line">                  <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">                ],</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&quot;stylus-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">          <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">          <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">          <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">          <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取css成单独文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// devServer: &#123;</span></span><br><span class="line">  <span class="comment">//   host: &quot;localhost&quot;, // 启动服务器域名</span></span><br><span class="line">  <span class="comment">//   port: &quot;3000&quot;, // 启动服务器端口号</span></span><br><span class="line">  <span class="comment">//   open: true, // 是否自动打开浏览器</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="兼容性控制"><a href="#兼容性控制" class="headerlink" title="兼容性控制"></a>兼容性控制</h4><ul><li>我们可以在 <code>package.json</code> 文件中添加 <code>browserslist</code> 来控制样式的兼容性做到什么程度。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ie &gt;= 8&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>想要知道更多的 <code>browserslist</code> 配置，查看<a href="https://github.com/browserslist/browserslist">browserslist 文档open in new window</a></p><p>以上为了测试兼容性所以设置兼容浏览器 ie8 以上。</p><ul><li>实际开发中我们一般不考虑旧版本浏览器了，所以我们可以这样设置：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 其他省略</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;last 2 version&quot;</span><span class="punctuation">,</span> <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span> <span class="string">&quot;not dead&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="合并配置"><a href="#合并配置" class="headerlink" title="合并配置"></a>合并配置</h4><ul><li>webpack.prod.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取处理样式的Loaders</span></span><br><span class="line"><span class="comment">// 谷谷太贴心了 上面代码耦合度比较高 这里直接写了一个函数处理 很好的做法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;sass-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;stylus-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">          <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">          <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">          <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">          <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取css成单独文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// devServer: &#123;</span></span><br><span class="line">  <span class="comment">//   host: &quot;localhost&quot;, // 启动服务器域名</span></span><br><span class="line">  <span class="comment">//   port: &quot;3000&quot;, // 启动服务器端口号</span></span><br><span class="line">  <span class="comment">//   open: true, // 是否自动打开浏览器</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="CSS压缩"><a href="#CSS压缩" class="headerlink" title="CSS压缩"></a>CSS压缩</h3><h4 id="下载包-9"><a href="#下载包-9" class="headerlink" title="下载包"></a>下载包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-minimizer-webpack-plugin -D</span><br></pre></td></tr></table></figure><h4 id="配置-13"><a href="#配置-13" class="headerlink" title="配置"></a>配置</h4><ul><li>webpack.prod.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ESLintWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;eslint-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CssMinimizerPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;css-minimizer-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取处理样式的Loaders</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getStyleLoaders</span> = (<span class="params">preProcessor</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;postcss-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">postcssOptions</span>: &#123;</span><br><span class="line">          <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="string">&quot;postcss-preset-env&quot;</span>, <span class="comment">// 能解决大多数样式兼容性问题</span></span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    preProcessor,</span><br><span class="line">  ].<span class="title function_">filter</span>(<span class="title class_">Boolean</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../dist&quot;</span>), <span class="comment">// 生产模式需要输出</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;static/js/main.js&quot;</span>, <span class="comment">// 将 js 文件输出到 static/js 目录中</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 用来匹配 .css 结尾的文件</span></span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// use 数组里面 Loader 执行顺序是从右到左</span></span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;less-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.s[ac]ss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;sass-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.styl$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(<span class="string">&quot;stylus-loader&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|webp)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset&quot;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">10</span> * <span class="number">1024</span>, <span class="comment">// 小于10kb的图片会被base64处理</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="comment">// 将图片文件输出到 static/imgs 目录中</span></span><br><span class="line">          <span class="comment">// 将图片文件命名 [hash:8][ext][query]</span></span><br><span class="line">          <span class="comment">// [hash:8]: hash值取8位</span></span><br><span class="line">          <span class="comment">// [ext]: 使用之前的文件扩展名</span></span><br><span class="line">          <span class="comment">// [query]: 添加之前的query参数</span></span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/imgs/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|woff2?)$/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;asset/resource&quot;</span>,</span><br><span class="line">        <span class="attr">generator</span>: &#123;</span><br><span class="line">          <span class="attr">filename</span>: <span class="string">&quot;static/media/[hash:8][ext][query]&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules代码不编译</span></span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ESLintWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 指定检查文件的根目录</span></span><br><span class="line">      <span class="attr">context</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 以 public/index.html 为模板创建文件</span></span><br><span class="line">      <span class="comment">// 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../public/index.html&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 提取css成单独文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 定义输出文件名和目录</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;static/css/main.css&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// css压缩</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CssMinimizerPlugin</span>(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// devServer: &#123;</span></span><br><span class="line">  <span class="comment">//   host: &quot;localhost&quot;, // 启动服务器域名</span></span><br><span class="line">  <span class="comment">//   port: &quot;3000&quot;, // 启动服务器端口号</span></span><br><span class="line">  <span class="comment">//   open: true, // 是否自动打开浏览器</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Html压缩JS压缩"><a href="#Html压缩JS压缩" class="headerlink" title="Html压缩JS压缩"></a>Html压缩JS压缩</h2><ul><li>默认生产模式已经开启了：html 压缩和 js 压缩</li><li>不需要额外进行配置</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本章节我们学会了 Webpack 基本使用，掌握了以下功能：</p><ol><li>两种开发模式</li></ol><ul><li>开发模式：代码能编译自动化运行</li><li>生产模式：代码编译优化输出</li></ul><ol><li>Webpack 基本功能</li></ol><ul><li>开发模式：可以编译 ES Module 语法</li><li>生产模式：可以编译 ES Module 语法，压缩 js 代码</li></ul><ol><li>Webpack 配置文件</li></ol><ul><li>5 个核心概念<ul><li>entry</li><li>output</li><li>loader</li><li>plugins</li><li>mode</li></ul></li><li>devServer 配置</li></ul><ol><li>Webpack 脚本指令用法</li></ol><ul><li><code>webpack</code> 直接打包输出</li><li><code>webpack serve</code> 启动开发服务器，内存编译打包没有输出</li></ul><h2 id="留言"><a href="#留言" class="headerlink" title="留言"></a>留言</h2><blockquote><p>⛄太感谢谷谷啦，这套课程真的很棒！！！</p><p>⭐尚硅谷，让天下有学不完的知识！！！🤣</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据类型浅析</title>
      <link href="/2023/01/15/JavaScriptDataType/"/>
      <url>/2023/01/15/JavaScriptDataType/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript数据类型浅析"><a href="#JavaScript数据类型浅析" class="headerlink" title="JavaScript数据类型浅析"></a>JavaScript数据类型浅析</h1><blockquote><p>最近在复习JS的基础知识，发现自己对BigInt与Number的理解不是很深刻，对NaN的理解也不到位，于是打算写一篇文章详细讲解一下。</p><p><strong>参考文章</strong>：</p><ul><li><a href="https://juejin.cn/post/6992754058297622542">Javascript 的数据类型详解 - 掘金 (juejin.cn)</a></li><li><a href="https://juejin.cn/post/7011396230131482632">JavaScript基础数据类型 - 掘金 (juejin.cn)</a></li><li><a href="https://www.runoob.com/js/js-datatypes.html">JavaScript 数据类型 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://es6.ruanyifeng.com/">ECMAScript 6入门 (ruanyifeng.com)</a></li><li><a href="https://juejin.cn/post/6844903494076350472">理解构造函数与原型对象 - 掘金 (juejin.cn)</a></li></ul><p>⭐<strong>Tips</strong>：学习本文，你将对JavaScript的八大数据类型有一个广泛的认识，适合小白观看或复习查看，不适合深入理解。</p></blockquote><ul><li>JS的数据类型分两种<ul><li><strong>基本数据类型</strong>：Number，String，Boolean，Null，Undefined，Symbol（ES6新增），BigInt（ES11新增）</li><li><strong>引用数据类型</strong>：Object（普通Object，Function，Date，Math，Array等）</li></ul></li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p><strong>特性</strong></p><ul><li>含有对应的原始数值的<strong>包装对象</strong>（Number，String等对象）。</li><li>保存在 <strong>栈内存</strong> 中的简单数据段。</li><li>数据是不可变的，即不能强行修改 <code>Array.prototype.sort.call(&#39;abc&#39;)</code> 修改会报错。</li><li>没有原型链中的 <code>_proto_</code> 属性。</li></ul><p><strong>判断</strong></p><ul><li>可以使用 <code>typeof</code> 判断数据类型。</li><li>这里要注意的是 <code>typeof(null) == &#39;object&#39;</code> <strong>null的类型会错误判断为 object</strong>。<ul><li><code>null</code> 得到检测错误是历史遗留问题，在 <code>JS</code> 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，<code>000</code> 开头代表是对象然而 <code>null</code> 表示为全零，所以将它错误的判断为 <code>object</code> 。</li></ul></li></ul><table><thead><tr><th>类型</th><th>结果</th></tr></thead><tbody><tr><td>String</td><td>“string”</td></tr><tr><td>Number</td><td>“number”</td></tr><tr><td>Boolean</td><td>“boolean”</td></tr><tr><td>Undefined</td><td>“undefined”</td></tr><tr><td>Object、Array、RegExp、null、Date、Error</td><td>“object”</td></tr><tr><td>Function</td><td>“function”</td></tr><tr><td>Symbol（ES6新增）</td><td>“symbol”</td></tr><tr><td>BigInt（ES11新增）</td><td>“bigint”</td></tr></tbody></table><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><ul><li>可以直接使用数字或者科学计数法定义 Number。</li><li>在JavaScript中的基本数据类<strong>Number是双精度浮点数</strong>，它可以表示的最大安全范围是正负9007199254740991，也就是2的53次方减1， 比2的53次大的所有数字则可以使用<code>BigInt</code>表达。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x1 = <span class="number">34.00</span></span><br><span class="line"><span class="keyword">let</span> x2 = <span class="number">34</span></span><br><span class="line"><span class="keyword">let</span> x3 = <span class="number">123e5</span></span><br><span class="line"><span class="keyword">let</span> x4 = <span class="number">123e-5</span></span><br><span class="line"><span class="keyword">let</span> x5 = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><ul><li>这里有一个注意的点 <code>typeof NaN</code> 为 Number。</li><li>NaN 属性是代表非数字值的特殊值。该属性用于指示某个值不是数字。可以把 Number 对象设置为该值，来指示其不是数字值。</li><li>isNaN() 全局函数来判断一个值是否是 NaN 值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span> === <span class="string">&quot;number&quot;</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// NaN 同任何数比较均为false</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;0&quot;</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;ssss&quot;</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><ul><li>可以用在一个整数字面量后面加<code>n</code>的方式定义一个 Bigint 或者调用函数<code>BigInt()</code>但不包含<code>new</code>运算符，其不可以使用 <code>new</code>关键字初始化。</li><li><code>BigInt</code>是JavaScript中的一个新的原始类型，<strong>可以用任意精度表示整数</strong>。使用<code>BigInt</code>，即使超出JavaScript <code>Number</code> 的安全整数限制，也可以安全地存储和操作大整数。</li><li>ES11新增。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x1 = <span class="number">123n</span></span><br><span class="line"><span class="keyword">let</span> x2 = <span class="title class_">BigInt</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><ul><li>BigInt与Number的不同。<ul><li>不能用于<code>Math</code>对象中的方法。</li><li>不能和任何<code>Number</code>实例混合运算，两者必须转换成同一种类型。在两种类型来回转换时要小心，因为<code>BigInt</code>变量在转换成<code>Number</code>变量时可能会精度丢失。</li></ul></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>可以直接使用字符串定义 String。</li><li>除了null, undefined之外，其他均可通过<code>toString</code>方法获得其对应的字符串的值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="string">&quot;qwe&quot;</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;sad&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="string">&#x27;sdg&#x27;</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="string">`dbs`</span></span><br><span class="line"></span><br><span class="line">(&#123;&#125;).<span class="title function_">toString</span>() <span class="comment">// [object Object]</span></span><br><span class="line">(<span class="number">123</span>).<span class="title function_">toString</span>() <span class="comment">// &quot;123&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串与其他类型相加会发生奇怪的事情</span></span><br><span class="line">&#123;&#125; + <span class="string">&#x27;&#x27;</span> <span class="comment">//  0</span></span><br><span class="line">[] + <span class="string">&#x27;&#x27;</span> <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul><li><p>true 与 false 为布尔型。</p></li><li><p>JS中<strong>只有以下七个值为 false</strong> 。</p><ul><li>undefined</li><li>null</li><li>false</li><li>NaN</li><li>‘’</li><li>0</li><li>-0</li></ul></li><li><p><strong>其余均为 true</strong>。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">4</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><ul><li>null 为 Null 数据类型。</li><li>其表达为空值。 经常用于释放内存, 或者初始化赋值。 其等于undefined，但不严等于undefined。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">null</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h3><ul><li>undefined 为 Undefined 数据类型。</li><li>其含义为未定义，或者定义了未赋值。 其等于null，但不严等于null。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入<code>Symbol</code>的原因。</p><ul><li><code>Symbol</code>，表示独一无二的值。</li><li>Symbol 值通过<code>Symbol()</code>函数生成。</li><li>对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"><span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line">s1 <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2 <span class="comment">// Symbol(bar)</span></span><br><span class="line"></span><br><span class="line">s1.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line">s2.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(bar)&quot;</span></span><br></pre></td></tr></table></figure><ul><li>想深入了解可以去看阮一峰老师的文章，写的很好：<a href="https://es6.ruanyifeng.com/#docs/symbol">Symbol - ECMAScript 6入门 (ruanyifeng.com)</a></li></ul><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><p><strong>特性</strong></p><ul><li>引用类型正在创建时会分配两个空间<ul><li>一块在 <strong>堆</strong>上，储存引用类型本身的数据（当然数据量会比较大）</li><li>一块在 <strong>栈</strong> 上，储存对堆上数据的引用（存储堆上的内存地址，也就是指针）</li></ul></li><li>引用类型是可变的：即 <code>let a=&#123;&#125;; a.x=1;</code></li><li><code>function</code> 参数是值传递，<strong>不能修改引用</strong></li></ul><p><strong>判断</strong></p><ul><li>通过 <code>Object.prototype.toString.call</code> 检测最为精准</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">function</span> (<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = []</span><br><span class="line"><span class="keyword">let</span> c = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a) <span class="comment">// [object Function]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b) <span class="comment">// [object Array]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(c) <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> a <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> b <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> c <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul><li>JS万物皆对象</li><li>JavaScript 提供多个内建对象，比如 String、Date、Array 等等。 对象只是带有属性和方法的特殊数据类型。<ul><li>布尔型可以是一个对象。</li><li>数字型可以是一个对象。</li><li>字符串也可以是一个对象</li><li>日期是一个对象</li><li>数学和正则表达式也是对象</li><li>数组是一个对象</li><li>甚至函数也可以是对象</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> x2 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="comment">// 基本类型的包装类 使用typeof判为object</span></span><br><span class="line"><span class="keyword">let</span> x3 = <span class="keyword">new</span> <span class="title class_">String</span>()</span><br><span class="line"><span class="keyword">let</span> x4 = <span class="keyword">new</span> <span class="title class_">Number</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> x1 <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> x2 <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> x3 <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> x4 <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul><li>函数是一种特殊的对象</li><li>函数也是功能代码块,一个封闭区间短小的脚本,如果多次使用同一段代码,就可以把它封装成一个函数,允许在代码里随调随用,利用函</li><li>数封装来避免重复键入大量相同的内容,不过函数的真正威力在于传参的能力,可以把不同的数据传递给它们,使用这些数据去完成预定的操作</li><li>函数是一等公民,是对象,是值,可以存储在一个变量,数组或者对象中</li><li>函数可以传递给函数,并由函数返回,函数拥有属性</li><li>函数总有返回值(换句话说就是有return语句,当然构造器函数除外,因为它默认会返回构造器函数调用,当构造函数的调用执行时,会显示的返回返回)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funA = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是匿名函数保存在变量funA中&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> funB = [<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是匿名函数保存在数组funB中&quot;</span>);</span><br><span class="line">&#125;]</span><br><span class="line"><span class="keyword">var</span> funC = &#123;</span><br><span class="line">     <span class="attr">method</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是匿名函数保存在对象funC中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的调用</span></span><br><span class="line"><span class="title function_">funA</span>();     <span class="comment">// 普通函数的调用</span></span><br><span class="line">funB[<span class="number">0</span>]();  <span class="comment">// 函数存入数组中的调用</span></span><br><span class="line">funC.<span class="title function_">method</span>(); <span class="comment">// 对象调用方法的使用</span></span><br></pre></td></tr></table></figure><blockquote><p>⭐以上就是本文的全部内容啦，如果对你有帮助请给我点个赞吧</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【跨域】一篇文章彻底解决跨域设置cookie问题！</title>
      <link href="/2023/01/08/CookieCORS/"/>
      <url>/2023/01/08/CookieCORS/</url>
      
        <content type="html"><![CDATA[<h1 id="一篇文章彻底解决跨域设置cookie问题！"><a href="#一篇文章彻底解决跨域设置cookie问题！" class="headerlink" title="一篇文章彻底解决跨域设置cookie问题！"></a>一篇文章彻底解决跨域设置cookie问题！</h1><blockquote><p>大家好我是雪人~~⛄</p><p>之前做项目的时候发现后端传过来的 SetCookie 不能正常在浏览器中使用。</p><p>是因为谷歌浏览器新版本Chrome 80将Cookie的SameSite属性默认值由None变为Lax。</p><p>接下来带大家解决该问题。</p></blockquote><h2 id="原理讲解"><a href="#原理讲解" class="headerlink" title="原理讲解"></a>原理讲解</h2><ul><li>我们可以看到Cookie有以下属性</li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20230108222229187.png" alt="image-20230108222229187"></p><blockquote><p><strong>Cookie属性</strong></p><p><strong>名称</strong>：Cookie的name。</p><p><strong>值</strong>：Cookie的value。</p><p><strong>Domain</strong>： Cookie的域。如果设成xxx.com(一级域名)，那么子域名x.xxx.com(二级域名)，都可以使用xxx.com的Cookie。</p><p><strong>Path</strong>：Cookie的路径。如果设为&#x2F;，则同域名全部路径均可使用该Cookie。如果设为&#x2F;xxx&#x2F;，则只有路径为&#x2F;xxx&#x2F;可以使用该Cookie。</p><p><strong>Expires &#x2F; Max-Age</strong>：Cookie的超时时间。如果值为时间，则在到达指定时间后Cookie失效。如果值为Session(会话)，Cookie会同Session一起失效，当整个浏览器关闭的时候Cookie失效。</p><p><strong>Size</strong>：Cookie的大小。</p><p><strong>HttpOnly</strong>：值为true时，Cookie只会在Http请求头中存在，不能通过doucment.cookie(JavaScript)访问Cookie。</p><p><strong>Secure</strong>：值为true时，只能通过https来传输Cookie。</p><p><strong>SameSite</strong>：</p><ul><li>值为Strict，完全禁止第三方Cookie，跨站时无法使用Cookie。</li><li>值为Lax，允许在跨站时使用Get请求携带Cookie，下面有一个表格介绍Lax的Cookie使用情况。</li><li>值为None，允许跨站跨域使用Cookie，前提是将Secure属性设置为true。</li></ul><p><strong>Priority</strong> ：Cookie的优先级。值为Low&#x2F;Medium&#x2F;High，当Cookie数量超出时，低优先级的Cookie会被优先清除。</p></blockquote><ul><li><p><strong>还需要了解两个概念</strong>：</p><ul><li>跨站：两个域名不属于同站（域名-主机名&#x2F;IP相同，协议相同）。</li><li>跨域：两个域名不属于同源（域名-主机名&#x2F;IP相同，端口号相同，协议相同）。</li></ul></li><li><p><strong>并且</strong>谷歌浏览器新版本Chrome 80将Cookie的SameSite属性默认值<strong>由None变为Lax</strong>。</p></li></ul><p><strong>这下就很清楚明了了，有两种解决方案</strong>：</p><ol><li>将Cookie的SameSite值设为None，Secure值改为true，并且升级为https，我们就可以跨域使用Cookie。</li><li>将Cookie的SameSite值设为Lax&#x2F;Strict，并且将前后端部署在同一台服务器下，我们就可以在同一站点使用Cookie。</li></ol><ul><li><strong>注意</strong>：<ul><li><code>如果是本地测试想要前后端对接我们就只能使用方案一了</code></li><li><code>两种方案需要先解决浏览器同源策略也就是跨域问题</code></li></ul></li></ul><h2 id="前端设置"><a href="#前端设置" class="headerlink" title="前端设置"></a>前端设置</h2><ul><li><strong>这里以vue的axios为例</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 只需要将axios中的全局默认属性withCredentials修改为true即可</span></span><br><span class="line"><span class="comment">// 在axios发送请求时便会携带Cookie</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="后端设置"><a href="#后端设置" class="headerlink" title="后端设置"></a>后端设置</h2><ul><li><strong>这里以Django为例</strong></li><li><strong>Django跨域问题请参考另一篇文章</strong>：<a href="https://snowhouse.space/2022/12/12/Django-CORS/">https://snowhouse.space/2022/12/12/Django-CORS/</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们需要修改 seeting.py 修改项目设置</span></span><br><span class="line"><span class="comment"># 记得先设置允许访问的IP</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 就像我们上面所说的一样有两种解决方案</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方案一</span></span><br><span class="line"><span class="comment"># 将session属性设置为 secure</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置cookie的samesite属性为None</span></span><br><span class="line">SESSION_COOKIE_SAMESITE = <span class="string">&#x27;None&#x27;</span></span><br><span class="line"><span class="comment"># 且将协议升级为https</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方案二</span></span><br><span class="line"><span class="comment"># 前后端部署在同一台服务器即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记得先解决ajax的跨域问题</span></span><br><span class="line"><span class="comment"># 加入以下代码即可</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_ALL_ORIGINS = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_HEADERS = (<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>是不是非常简单呢，不同的前后端框架按照原理解决即可。</p><p>如果对你有帮助的话请给我点个赞吧👍。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> 跨域 </tag>
            
            <tag> Vue </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件工程专业大学生的一年半 | 2022年度总结</title>
      <link href="/2022/12/30/2022year/"/>
      <url>/2022/12/30/2022year/</url>
      
        <content type="html"><![CDATA[<h1 id="软件工程专业大学生的一年半-2022年度总结"><a href="#软件工程专业大学生的一年半-2022年度总结" class="headerlink" title="软件工程专业大学生的一年半 | 2022年度总结"></a>软件工程专业大学生的一年半 | 2022年度总结</h1><blockquote><p>⛄hi~~大家好，我是雪人，不知不觉马上就要2023年了，从今年开始，决定每一年都要写一篇年度总结，用于记录与回顾自己的学习和生活轨迹。</p></blockquote><p><strong>学习内容</strong>(这一年半学了哪些技术)：</p><ul><li>语言基础：C语言基础，Python基础，Java基础，JavaScript基础，TypeScript基础</li><li>数据分析：pandas，numpy，matplotlib（很久没碰这些了，已经忘光了）</li><li>爬虫：requests（学的很基础，就会用个正则和XPath爬一些没有加密的信息）</li><li>前端三件套：HTML，CSS，JS（pink老师带我入门🤩，阮一峰的ES6写的很棒）</li><li>数据库：Mysql</li><li>后端框架：Django（及工具库django-cors-headers，djangorestframework等）</li><li>前端框架：Vue2，Vue3（及工具库axios，vuex，pinia，element-ui，eslint等）</li><li>微信小程序：原生开发</li><li>APP开发：uni-app（跨端开发）</li><li>算法：数据结构（跟随《代码随想录》用TS刷leetcode 目前刷到了贪心算法）</li><li>打包工具：WebPack5，Vite（了解的很浅）</li><li>项目部署：Nginx，内网穿透，服务器操作（能自己部署一些小项目了）</li><li>项目协作：Git</li></ul><p><strong>证书</strong>：</p><ul><li>普通话二级甲等（尝试性的考了一下，万一有用呢）</li><li>CET4（压线过的，我英语太差了）</li></ul><p><strong>比赛</strong>：</p><ul><li>中国高校计算机大赛2022网络技术挑战赛西北赛区三等奖（大一暑假用Django+Vue2写的一个后台管理项目）</li></ul><h2 id="技术历程"><a href="#技术历程" class="headerlink" title="技术历程"></a>技术历程</h2><p>大一上的时候零基础，我有一个堂哥和我同一个专业，堂哥推荐我去看一些C语言的入门课程，上学前就先尝试性的学习了一些C语言知识，还是非常喜欢编程的。进入大学后，加入了一个技术性学习组织，遇到了非常多热情的学长学姐，带着我学习C语言，非常感谢各位学长学姐们带我入门编程🤗。C语言基础学完之后，就要选择一个学习方向，当时听完学长学姐对人工智能的描述，就报名了人工智能方向，在大一上学期以及寒假的时候学习了Python基础，Mysql数据库，爬虫，Django…虽然只学了一些皮毛，但是收获很大😀。自己对前端很感兴趣，就自主学习了前端三件套，在大一寒假的时候还联合组织内其他方向的同学开发了一个小项目（Django+H5，前后端不分离实现），当时真的是成就感满满，利用自己所学的知识开发出了网站😄。</p><p>大一下的时候已经有了自己的想法，发现自己对前端比较感兴趣，然后就去自主学习了Vue框架，真的太好用了，慢慢的就爱上了前端，就去学习更多相关的知识axios，vuex，element-ui等。还在大一下快结束的时候学习了数据分析三剑客pandas，numpy和matplotlib，但是不是很喜欢数据分析，学了一点基础后就没有向深学习了。大一暑假的时候报名了一个应用型的比赛，和小伙伴们一起做了一个后台管理项目（Django+Vue2 熬了几个大夜🥺）最后还获得了省三级别的奖项，人生中第一个比赛获奖😀，还是很开心的。</p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221230231104095.png" alt="image-20221230231104095"></p><p>大二上刚开始的时候，利用大一所学的知识，自己从零上线了一款属于自己的博客网站《雪人的小屋》（Django+Vue2）。</p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221230210918236.png" alt="image-20221230210918236"></p><p>如果大家感兴趣的话我再单独写一篇文章介绍吧，项目第一天上线的时候真的特别的激动🤓（回忆感爆棚），真的就是自己从零上线，从无到有。自己写需求分析，前端，后端，部署，还有一个简陋的后台管理系统。写完这个项目之后学到了很多，服务器相关知识的增长，前后端开发技术的精进，提高了对编程的兴趣，还导致我现在比较喜欢写博客。这时候自己特别喜欢前端，决定续精进前端的技术，开始学习Vue3，TypeScript，Pinia，ESLint，WebPack，项目规范，封装等多种技术。还抽出时间学习了数据结构，开始跟随《代码随想录》用TS刷leetcode算法题。大二寒假的时候把自己的博客改成了Hexo框架Butterfly主题（自己写内容的缺陷很多，但是没有精力去改进了）。总的来说还是在不断进步的，有非常多的学长学姐帮助了我的学习，感谢每一个帮助过我的人！</p><h2 id="学业历程"><a href="#学业历程" class="headerlink" title="学业历程"></a>学业历程</h2><p>大一的我是乖宝宝，刚开始的时候是每一节课都在认真听，生怕漏掉一个知识点，课后作业也认真完成。慢慢的了解到一些课是水课，就开始在水课上学习其他内容或者直接摆烂，但是专业课和一些数学相关的通识课还在听。最后也是取得了不错的成绩：两次加权前10%（自我认可）。到了大二课程转为线上，去教室听网课，刚开始还是选择性的去旷课，最后逐渐放肆，变成了选择性的去上课，其余时间在 自习室&#x2F;宿舍&#x2F;图书馆 自学（老师们讲的很好，但是相对来说我更喜欢自学），课后作业不是抄就是不写。最终选择了适合自己的学习方式-&gt;自学，网络资源越来越丰富，可以满足我大部分的需求，还可以自己安排时间。这个转变真的特别搞笑🤡，大一舍友旷课的时候我还劝他们不要旷课，<strong>大一</strong>：我们是学生，学生最重要的事情就是学习，你不去教室学习那你去干什么呢。<strong>大二</strong>：🐕都不去。从无旷课记录到每次查课我都不在🤡🤡🤡，平时分肯定😅。很神奇，对学校课程的态度真的是180度大转弯。</p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/st.jpg" alt="st"></p><h2 id="生活历程"><a href="#生活历程" class="headerlink" title="生活历程"></a>生活历程</h2><p>我还是很喜欢玩游戏的，大一尝试过各种类型的游戏，steam库也有二十多款游戏了，但是大部分在吃灰🤡，不要上头乱买。跟舍友玩的最多的是王者荣耀和英雄联盟，经常放假宿舍熬夜王者3v3（非常快乐），联盟也从刚开始的峡谷玩家变成大乱斗玩家（发现操作跟不上现在玩家的平均水平，峡谷输多赢少，最后加入了大乱斗 非常好玩👍）。还有一段时间都沉迷于原神最后也不知道为什么没玩下去😂。大二上的时候因为体育选课，宿舍有3个人选了篮球🏀，就带着大家一起练，我也去尝试了一下（高中就打过几次），然后就上头了，宿舍几个人经常没课就去练球，宿舍3v3哈哈哈。游戏和运动贯穿了我的大学生活，快乐😀。</p><ul><li>上了大学改变的最彻底的就是自己的作息习惯，变成了彻底的夜猫子，很少12点前睡觉。</li><li>大一上第一次面基网友，当时在知乎上问XX学校XX专业怎么样，结果碰到了一个该校该专业的学长，跟我说了很多，最后我就来到了这里。直接面基😂，一起吃了几次饭，帮了我很多，给了我很多建议，感谢曹学长。</li><li>大一参加了学院内的艺术团（会一点钢琴），跟随乐队参加了一些校内的小型演出，享受舞台。琴技还是有很大进步的👏，但是大二的时候竞选队长失败就离开了艺术团，留下了很多难忘的回忆。</li><li>大一暑假参加了学院的三下乡，和想象中的三下乡差别非常大，农村的变化真的很大，也在跟随时代发展。</li><li>大一暑假开始考驾照，科一科二一次过，但是驾校的教学制度非常不喜欢，一对多，别人练的时候自己只能看着，还是夏天，非常折磨。</li><li>大二上由于😷原因，一直在学校里面没有出去过，但是爱上了运动🏃‍♂️。</li></ul><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul><li>坚持写博客已经两个多月了，一共写了25篇博客，发布在CSDN、掘金、阿里云、华为云等平台。</li><li>总阅读量有9000+，阅读量一般，明年继续加油！</li></ul><h2 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h2><ul><li>没有一天不看B站🤣</li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/c1dcee5e8274ed44f9377614efbd498.jpg"></p><h2 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h2><ul><li>还是爱听华晨宇</li><li>深夜放歌大概率是听歌睡着了😂</li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/dedc88ba66b080bc2efc5a64c7f2ff9.jpg" alt="dedc88ba66b080bc2efc5a64c7f2ff9"></p><h2 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h2><ul><li>咱也不知道为啥QQ才走过349天😂</li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/57179df7a9b41e90395266548e75ef4.jpg" alt="57179df7a9b41e90395266548e75ef4"></p><h2 id="2023-Flag"><a href="#2023-Flag" class="headerlink" title="2023 Flag"></a>2023 Flag</h2><p><strong>给我的2023定几个目标！</strong></p><p><strong>2023年我要</strong>：</p><ul><li>拿到大厂实习offer</li><li>拿到国家级奖项</li><li>拿到驾驶证</li><li>通过CET6</li><li>上线一个开源项目</li><li>持续输出高质量博文，每周至少更一篇</li><li>LeetCode全勤</li><li>篮球场轻松过人</li></ul><p>感觉时间过的真快，不知不觉我都大二了，在这里感谢每一个帮助过我的小伙伴！2022年我对自己的表现还是很满意的，2023继续加油！2022拜拜啦ヾ(•ω•&#96;)o。</p><p>希望新的一年，大家都能更好！加油！无限进步！</p><p>祝大家新年快乐！</p><blockquote><p>⛄都看到这里了不妨不点个赞再走。</p></blockquote><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/newyear.jpg" alt="newyear" style="zoom: 33%;" />]]></content>
      
      
      <categories>
          
          <category> 年度总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ElementUI】Vue+ElementUI多文件上传，一次请求上传多个文件！</title>
      <link href="/2022/12/15/ElementUIUploadFile/"/>
      <url>/2022/12/15/ElementUIUploadFile/</url>
      
        <content type="html"><![CDATA[<h1 id="Element-UI-Upload"><a href="#Element-UI-Upload" class="headerlink" title="Element UI Upload"></a>Element UI Upload</h1><blockquote><p>⭐今天教大家使用ElementUI的自定义上传</p><p>⭐请求一次上传多张图片</p></blockquote><blockquote><p>最近写项目的时候需要一次上传多张图片，使用ElementUI Upload的时候发现</p><p>如果是默认方案，上传多张图片并不是真正的一次上传多张，而是发送多次请求，一次请求携带一张图片</p><p>接下来分享一下我的解决思路</p></blockquote><ul><li>ElementUI版本：2.15.9</li><li>Vue版本：2.7.10</li></ul><h2 id="Html部分"><a href="#Html部分" class="headerlink" title="Html部分"></a>Html部分</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需要携带以下参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ref 用于获取组件触发API --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- auto-upload 关闭自动上传 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- http-request 设置自定义上传的函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- on-change 图片列表改变时触发的函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- multiple 允许上传多个文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">           <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:http-request</span>=<span class="string">&quot;uploadFile&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:on-change</span>=<span class="string">&quot;changeFileLength&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__text&quot;</span>&gt;</span>点击上传文件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上传时点击的按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS部分"><a href="#JS部分" class="headerlink" title="JS部分"></a>JS部分</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;uploadCT&quot;</span>,</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="comment">// 上传文件的列表</span></span><br><span class="line">            <span class="attr">uploadFiles</span>: [],</span><br><span class="line">            <span class="comment">// 上传文件的个数</span></span><br><span class="line">            <span class="attr">filesLength</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="comment">// 上传需要附带的信息</span></span><br><span class="line">            <span class="attr">info</span>:&#123;</span><br><span class="line">                <span class="attr">id</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="comment">// 修改当前文件列表长度</span></span><br><span class="line">        <span class="title function_">changeFileLength</span>(<span class="params">file, fileList</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">filesLength</span> = fileList.<span class="property">length</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户点击上传调用</span></span><br><span class="line">        <span class="keyword">async</span> <span class="title function_">upload</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 触发上传 调用配置 :http-request=&quot;uploadFile&quot;</span></span><br><span class="line">            <span class="comment">// 即触发 uploadFile函数</span></span><br><span class="line">            <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">upload</span>.<span class="title function_">submit</span>();</span><br><span class="line">            <span class="comment">// 上传完成后执行的操作 ...</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 该函数还是会被调用多次</span></span><br><span class="line">        <span class="comment">// 每次param参数传入一个文件</span></span><br><span class="line">        <span class="title function_">uploadFile</span>(<span class="params">param</span>)&#123;</span><br><span class="line">            <span class="comment">// 将文件加入需要上传的文件列表</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">uploadFiles</span>.<span class="title function_">push</span>(param.<span class="property">file</span>)</span><br><span class="line">            <span class="comment">// 当uploadFiles长度等于用户需要上传的文件数时进行上传</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">uploadFiles</span>.<span class="property">length</span> == <span class="variable language_">this</span>.<span class="property">filesLength</span>)&#123;</span><br><span class="line">                <span class="comment">// 创建FormData上传</span></span><br><span class="line">                <span class="keyword">let</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">                <span class="comment">// 将全部文件添加至FormData中</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">uploadFiles</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">                    fd.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 将附加信息添加至FormData</span></span><br><span class="line">                fd.<span class="title function_">append</span>(<span class="string">&quot;id&quot;</span>, <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">id</span>)</span><br><span class="line">                fd.<span class="title function_">append</span>(<span class="string">&quot;name&quot;</span>, <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">name</span>)</span><br><span class="line">                <span class="comment">// 配置请求头</span></span><br><span class="line">                <span class="keyword">const</span> config = &#123;</span><br><span class="line">                    <span class="attr">headers</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 上传文件</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">post</span>(<span class="string">&quot;/upload/upload_CT/&quot;</span>, fd, config).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">/*上传成功处理*/</span></span><br><span class="line">                &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;<span class="comment">/*报错处理*/</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue组件完整代码"><a href="#Vue组件完整代码" class="headerlink" title="Vue组件完整代码"></a>Vue组件完整代码</h2><ul><li>请根据如下步骤配置<ol><li>配置upload组件与上传文件按钮</li><li>配置changeFileLength函数</li><li>配置upload函数</li><li>配置uploadFile函数</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 需要携带以下参数 --&gt;</span><br><span class="line">&lt;!-- ref 用于获取组件触发API --&gt;</span><br><span class="line">&lt;!-- auto-upload 关闭自动上传 --&gt;</span><br><span class="line">&lt;!-- http-request 设置自定义上传的函数 --&gt;</span><br><span class="line">&lt;!-- on-change 图片列表改变时触发的函数 --&gt;</span><br><span class="line">&lt;!-- multiple 允许上传多个文件 --&gt;</span><br><span class="line">&lt;el-upload</span><br><span class="line">           ref=&quot;upload&quot;</span><br><span class="line">           :auto-upload=&quot;false&quot;</span><br><span class="line">           :http-request=&quot;uploadFile&quot;</span><br><span class="line">           :on-change=&quot;changeFileLength&quot;</span><br><span class="line">           multiple&gt;</span><br><span class="line">    &lt;i class=&quot;el-icon-upload&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;div class=&quot;el-upload__text&quot;&gt;点击上传文件&lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">&lt;!-- 上传时点击的按钮 --&gt;</span><br><span class="line">&lt;el-button @click=&quot;upload&quot; type=&quot;success&quot;&gt;上传文件&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;uploadCT&quot;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                // 上传文件的列表</span><br><span class="line">                uploadFiles: [],</span><br><span class="line">                // 上传文件的个数</span><br><span class="line">                filesLength: 0,</span><br><span class="line">                // 上传需要附带的信息</span><br><span class="line">                info:&#123;</span><br><span class="line">                    id:&quot;&quot;,</span><br><span class="line">                    name:&quot;&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        methods:&#123;</span><br><span class="line">            // 修改当前文件列表长度</span><br><span class="line">            changeFileLength(file, fileList)&#123;</span><br><span class="line">                this.filesLength = fileList.length</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // 用户点击上传调用</span><br><span class="line">            async upload()&#123;</span><br><span class="line">                // 触发上传 调用配置 :http-request=&quot;uploadFile&quot;</span><br><span class="line">                // 即触发 uploadFile函数</span><br><span class="line">                await this.$refs.upload.submit();</span><br><span class="line">                // 上传完成后执行的操作 ...</span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            // 该函数还是会被调用多次</span><br><span class="line">            // 每次param参数传入一个文件</span><br><span class="line">            uploadFile(param)&#123;</span><br><span class="line">                // 将文件加入需要上传的文件列表</span><br><span class="line">                this.uploadFiles.push(param.file)</span><br><span class="line">                // 当uploadFiles长度等于用户需要上传的文件数时进行上传</span><br><span class="line">                if (this.uploadFiles.length == this.filesLength)&#123;</span><br><span class="line">                    // 创建FormData上传</span><br><span class="line">                    let fd = new FormData()</span><br><span class="line">                    // 将全部文件添加至FormData中</span><br><span class="line">                    this.uploadFiles.forEach(file =&gt; &#123;</span><br><span class="line">                        fd.append(&#x27;file&#x27;, file)</span><br><span class="line">                    &#125;)</span><br><span class="line">                    // 将附加信息添加至FormData</span><br><span class="line">                    fd.append(&quot;id&quot;, this.info.id)</span><br><span class="line">                    fd.append(&quot;name&quot;, this.info.name)</span><br><span class="line">                    // 配置请求头</span><br><span class="line">                    const config = &#123;</span><br><span class="line">                        headers: &#123;</span><br><span class="line">                            &quot;Content-Type&quot;: &quot;multipart/form-data&quot;,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    // 上传文件</span><br><span class="line">                    this.$axios.post(&quot;/upload/upload_CT/&quot;, fd, config).then(res =&gt; &#123;</span><br><span class="line">                        /*上传成功处理*/</span><br><span class="line">                    &#125;).catch(err =&gt; &#123;/*报错处理*/&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>上述组件就是全部配置内容啦⛄</p><p>如果对你有帮助请给我点个赞👍</p><p>如果有任何问题请留言给我😀</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DRF】快速入门，使用DjangoRestFrameWork自动生成Restful风格的增删改查代码和接口文档！</title>
      <link href="/2022/12/12/DRF/"/>
      <url>/2022/12/12/DRF/</url>
      
        <content type="html"><![CDATA[<h1 id="DRF快速入门"><a href="#DRF快速入门" class="headerlink" title="DRF快速入门"></a>DRF快速入门</h1><blockquote><p>⭐都快2023年了还有人自己写增删改查代码？！？我不允许还不会有人用DRF！</p><p>⭐今天教大家使用 Django Rest FrameWork 自动生成Restful风格的增删改查代码和接口文档！</p><p>⭐参考文章：<a href="https://www.django-rest-framework.org/">首页 - Django REST 框架 (django-rest-framework.org)</a>（官方文档）</p></blockquote><ul><li><strong>注意：</strong><ul><li>Django Rest FrameWork 是在Django框架下使用</li><li>以下内容需要先创建一个Django项目</li></ul></li><li><strong>什么是Restful风格：</strong><a href="https://restfulapi.cn/">RESTful API 一种流行的 API 设计风格</a></li></ul><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Rest FrameWork 需要满足以下条件：</p><ul><li>Python （3.6， 3.7， 3.8， 3.9， 3.10）</li><li>Django （2.2， 3.0， 3.1， 3.2， 4.0， 4.1）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Django</span></span><br><span class="line">pip install django</span><br><span class="line"><span class="comment"># 安装DRF</span></span><br><span class="line">pip install djangorestframework</span><br><span class="line"><span class="comment"># 安装自动生成接口文档需要的依赖</span></span><br><span class="line">pip install coreapi</span><br></pre></td></tr></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul><li>以下内容在项目中 <code>seeting.py</code> 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>, <span class="comment"># 注册app</span></span><br><span class="line">    <span class="string">&#x27;myapp&#x27;</span>, <span class="comment"># 记得注册自己的app</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库记得自行配置</span></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;***&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><h3 id="配置models"><a href="#配置models" class="headerlink" title="配置models"></a>配置models</h3><ul><li>以下内容在 app 中的 <code>models.py</code> 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(models.Model):</span><br><span class="line">    <span class="comment"># 模型字段</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, verbose_name=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">    sex = models.BooleanField(default=<span class="number">1</span>, verbose_name=<span class="string">&quot;性别&quot;</span>)</span><br><span class="line">    age = models.IntegerField(verbose_name=<span class="string">&quot;年龄&quot;</span>)</span><br><span class="line">    class_null = models.CharField(max_length=<span class="number">5</span>, verbose_name=<span class="string">&quot;班级编号&quot;</span>)</span><br><span class="line">    description = models.TextField(max_length=<span class="number">1000</span>, verbose_name=<span class="string">&quot;个性签名&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 表名称</span></span><br><span class="line">        db_table = <span class="string">&quot;tb_student&quot;</span></span><br><span class="line">        <span class="comment"># 表详细名称</span></span><br><span class="line">        verbose_name_plural = <span class="string">&quot;学生&quot;</span></span><br></pre></td></tr></table></figure><ul><li>配置好models记得迁移数据库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h3 id="配置serializers"><a href="#配置serializers" class="headerlink" title="配置serializers"></a>配置serializers</h3><ul><li>以下内容在app中新建 <code>serializers.py</code> 目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> app.models <span class="keyword">import</span> Student</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建序列化器类，回头会在试图中被调用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentModelSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        <span class="comment"># 导入对应models</span></span><br><span class="line">        model = Student</span><br><span class="line">        <span class="comment"># 选择生成对应models全部的字段</span></span><br><span class="line">        fields = <span class="string">&quot;__all__&quot;</span></span><br><span class="line">        <span class="comment"># 可选择操作的字段</span></span><br><span class="line">        <span class="comment"># fields = [&#x27;name&#x27;, &#x27;sex&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="配置view"><a href="#配置view" class="headerlink" title="配置view"></a>配置view</h3><ul><li>以下内容在app中 <code>views.py</code> 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> ModelViewSet</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Student</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> StudentModelSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成代码 配置一个类即可</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentViewSet</span>(<span class="title class_ inherited__">ModelViewSet</span>):</span><br><span class="line">    queryset = Student.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = StudentModelSerializer</span><br></pre></td></tr></table></figure><h3 id="配置url"><a href="#配置url" class="headerlink" title="配置url"></a>配置url</h3><ul><li>以下内容在app目录下 <code>urls.py</code> 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter</span><br><span class="line"><span class="keyword">from</span> rest_framework.documentation <span class="keyword">import</span> include_docs_urls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由列表</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 配置api文档路由 title配置API文档的标题</span></span><br><span class="line">    path(<span class="string">&#x27;docs/&#x27;</span>, include_docs_urls(title=<span class="string">&#x27;API document&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">router = DefaultRouter()  <span class="comment"># 可以处理视图的路由器</span></span><br><span class="line">router.register(<span class="string">&#x27;students&#x27;</span>, views.StudentViewSet)  <span class="comment"># 向路由器中注册视图集</span></span><br><span class="line"></span><br><span class="line">urlpatterns += router.urls  <span class="comment"># 将路由器中的所以路由信息追到到django的路由列表中</span></span><br></pre></td></tr></table></figure><ul><li>以下内容在项目目录下 <code>urls.py</code> 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> urls</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;stu/&#x27;</span>, include(urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="配置seetings"><a href="#配置seetings" class="headerlink" title="配置seetings"></a>配置seetings</h3><ul><li>以下内容在项目目录下 <code>seetings.py</code> 配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置默认API文档</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># coreapi接口文档</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="string">&#x27;rest_framework.schemas.AutoSchema&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接启动项目就可用访问啦</span></span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><ul><li><a href="http://127.0.0.1:8000/stu/">http://127.0.0.1:8000/stu/</a> 访问apiroot界面</li><li><a href="http://127.0.0.1:8000/stu/students/">http://127.0.0.1:8000/stu/students/</a> 访问对数据库学生的操作界面</li><li><a href="http://127.0.0.1:8000/stu/docs/">http://127.0.0.1:8000/stu/docs/</a> 访问接口文档</li></ul><p><strong>页面预览：</strong></p><ul><li><p>接口文档</p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221207224034322.png" alt="image-20221207224034322"></p></li><li><p>api管理页面</p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221207224128557.png" alt="image-20221207224128557"></p></li></ul><blockquote><p>⭐以上就是一些基础的配置内容啦！基础的CURD代码已经生成完毕！</p><p>⭐当然DRF还可以配置的东西非常多 JWT，分页… <strong>（之后的文章会介绍到）</strong></p><p>⭐以上内容只是快速的配置 全面API请查阅官方文档：<a href="https://www.django-rest-framework.org/">首页 - Django REST 框架 (django-rest-framework.org)</a></p><p>⭐如果对你有帮助请给我点个赞吧</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> DjangoRestFrameWork </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Django跨域】一篇文章彻底解决Django跨域问题！</title>
      <link href="/2022/12/12/Django-CORS/"/>
      <url>/2022/12/12/Django-CORS/</url>
      
        <content type="html"><![CDATA[<h1 id="Django解决跨域"><a href="#Django解决跨域" class="headerlink" title="Django解决跨域"></a>Django解决跨域</h1><blockquote><p>⭐还有人不会用Django配置CORS？</p><p>⭐耗时3600秒整理的资料直接拿走！一篇文章彻底解决Django跨域问题！</p><p>⭐本文包含以下内容：Django解决跨域问题，Django解决跨域携带Cookie问题等</p><p>⭐官方文档：<a href="https://pypi.org/project/django-cors-headers/">Django-cors-headers ·皮皮 (pypi.org)</a> 最全面的配置推荐大家前往官网学习</p></blockquote><ul><li><strong>CORS，Cross-Origin Resource Sharing，是一个新的 W3C 标准，它新增的一组HTTP首部字段，允许服务端其声明哪些源站有权限访问哪些资源。换言之，它允许浏览器向声明了 CORS 的跨域服务器，发出 XMLHttpReuest 请求，从而克服 Ajax 只能同源使用的限制。在我们的django框架中就是利用CORS来解决跨域请求的问题。</strong></li><li>CORS详细介绍：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">跨源资源共享（CORS） - HTTP | MDN (mozilla.org)</a></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h3><p>项目主页：<a href="https://github.com/adamchainz/django-cors-headers">adamchainz&#x2F;django-cors-headers：Django 应用程序，用于处理跨域资源共享 （CORS） 所需的服务器标头 (github.com)</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-cors-headers</span><br></pre></td></tr></table></figure><h3 id="2-修改设置"><a href="#2-修改设置" class="headerlink" title="2.修改设置"></a>2.修改设置</h3><ul><li>修改Django项目文件夹下的 setting.py 文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记得修改允许访问的IP</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>] <span class="comment"># 允许全部IP访问项目</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setting.py 修改以下内容</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders&#x27;</span>, <span class="comment"># 注册app corsheaders</span></span><br><span class="line">    <span class="string">&#x27;app01&#x27;</span>,<span class="comment"># 你的app</span></span><br><span class="line">]</span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;corsheaders.middleware.CorsMiddleware&#x27;</span>, <span class="comment"># 加入中间键 位置必须在这里 不能在其他位置</span></span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;, 如果你的项目没有考虑到 csrf 网络攻击,可注释掉,否则会报错没有传递 csrf cookie</span></span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 setting.py 末尾添加以下设置</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_ALL_ORIGINS = <span class="literal">True</span></span><br><span class="line">CORS_ALLOW_HEADERS = (<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>配置完以上内容后Django就可用跨域访问啦！基本需求就已经解决啦！</li><li>配置内容详解请向下查看学习！</li></ul><h2 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h2><ul><li>以下内容均在 setting.py 中配置</li><li>下面是一些常用的 全面的需要大家去官方文档查阅</li></ul><h3 id="配置允许访问的域名白名单"><a href="#配置允许访问的域名白名单" class="headerlink" title="配置允许访问的域名白名单"></a>配置允许访问的域名白名单</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许所有 域名/IP 跨域</span></span><br><span class="line">CORS_ALLOW_ALL_ORIGINS = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 配置可跨域访问的 域名/IP</span></span><br><span class="line">CORS_ALLOWED_ORIGINS = [</span><br><span class="line">    <span class="string">&#x27;127.0.0.1:8000&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;myname.com&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 使用正则表达式匹配允许访问的 域名/IP</span></span><br><span class="line">CORS_ALLOWED_ORIGIN_REGEXES = [</span><br><span class="line">    <span class="string">r&quot;^https://\w+\.example\.com$&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="配置允许的跨域请求方式"><a href="#配置允许的跨域请求方式" class="headerlink" title="配置允许的跨域请求方式"></a>配置允许的跨域请求方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置允许的请求方式</span></span><br><span class="line">CORS_ALLOW_METHODS = [</span><br><span class="line">    <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PUT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PATCH&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;OPTIONS&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="配置允许的请求头"><a href="#配置允许的请求头" class="headerlink" title="配置允许的请求头"></a>配置允许的请求头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CORS_ALLOW_HEADERS = [</span><br><span class="line"><span class="string">&quot;*&quot;</span>, <span class="comment"># * 表示允许全部请求头</span></span><br><span class="line">    <span class="string">&quot;accept&quot;</span>,</span><br><span class="line">    <span class="string">&quot;accept-encoding&quot;</span>,</span><br><span class="line">    <span class="string">&quot;authorization&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dnt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;origin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>,</span><br><span class="line">    <span class="string">&quot;x-csrftoken&quot;</span>,</span><br><span class="line">    <span class="string">&quot;x-requested-with&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="允许跨域访问Cookie"><a href="#允许跨域访问Cookie" class="headerlink" title="允许跨域访问Cookie"></a>允许跨域访问Cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改为True即为可跨域设置Cookie</span></span><br><span class="line">CORS_ALLOW_CREDENTIALS = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里有一个需要注意的点</span></span><br><span class="line"><span class="comment"># chrome升级到80版本之后，cookie的SameSite属性默认值由None变为Lax</span></span><br><span class="line"><span class="comment"># 也就是说允许同站点跨域 不同站点需要修改配置为 None（需要将Secure设置为True）</span></span><br><span class="line"><span class="comment"># 需要前端与后端部署在统一服务器下才可进行跨域cookie设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 总结：需要设置 samesite = none、secure = True（代表安全环境 需要 localhost 或 HTTPS）才可跨站点设置cookie</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Cookie属性</strong></p><p>key：键<br>value：值<br>max_age：多久后过期，时间为秒，默认为None，临时cookie设置即关闭浏览器就消失<br>expires：过期时间，具体时间<br>path：生效路径，默认‘&#x2F;‘<br>domain：生效的域名，你绑定的域名<br>secure：HTTPS传输时应设置为true，默认为false<br>httponly：值应用于http传输，这时JavaScript无法获取</p></blockquote><p><strong>SameSite属性详解</strong></p><ul><li>Lax<ul><li>Cookies 允许与顶级导航一起发送，并将与第三方网站发起的 GET 请求一起发送。这是浏览器中的默认值。</li></ul></li><li>Strict<ul><li>Cookies 只会在第一方上下文中发送，不会与第三方网站发起的请求一起发送。</li></ul></li><li>None<ul><li>Cookie 将在所有上下文中发送，即允许跨站发送。</li></ul></li></ul><h4 id="配置的介绍"><a href="#配置的介绍" class="headerlink" title="配置的介绍"></a>配置的介绍</h4><ul><li><strong>Django版本高于2.1：</strong>直接设置即可</li><li><strong>如果DJango版本低于2.1：</strong>需要下载 django-cookie-samesite 再设置</li><li><strong>其他详细Cookie配置内容请参考官方文档</strong>：<a href="https://docs.djangoproject.com/zh-hans/4.1/ref/settings/#std-setting-SESSION_COOKIE_SAMESITE">配置 | Django 文档 | Django (djangoproject.com)</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下内容均在 setting.py 配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将session属性设置为 secure</span></span><br><span class="line">SESSION_COOKIE_SECURE = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置set_cookie的samesite属性</span></span><br><span class="line">SESSION_COOKIE_SAMESITE = <span class="string">&#x27;None&#x27;</span></span><br><span class="line">SESSION_COOKIE_SAMESITE = <span class="string">&#x27;Lax&#x27;</span></span><br><span class="line">SESSION_COOKIE_SAMESITE = <span class="string">&#x27;Strict&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="配置使用CORS的URL"><a href="#配置使用CORS的URL" class="headerlink" title="配置使用CORS的URL"></a>配置使用CORS的URL</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置Django项目中哪些URL使用CORS进行跨域</span></span><br><span class="line"><span class="comment"># 默认为 r&#x27;^.*$&#x27;，即匹配所有 URL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下案例为 /api/*** 均可进行跨域访问</span></span><br><span class="line">CORS_URLS_REGEX = <span class="string">r&quot;^/api/.*$&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>👍如果对你有帮助请给我点个赞吧</p><p>❤关注我查看更多技术分享文章 Django+Vue 全栈</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图床搭建】腾讯云COS+PicGo+Typora图床搭建</title>
      <link href="/2022/12/12/COS-PicGo/"/>
      <url>/2022/12/12/COS-PicGo/</url>
      
        <content type="html"><![CDATA[<h1 id="【图床搭建】腾讯云COS-PicGo-Typora图床搭建"><a href="#【图床搭建】腾讯云COS-PicGo-Typora图床搭建" class="headerlink" title="【图床搭建】腾讯云COS+PicGo+Typora图床搭建"></a>【图床搭建】腾讯云COS+PicGo+Typora图床搭建</h1><blockquote><p>🥇今天手把手教大家配置一个属于自己的图床</p><p>🥈让大家发布在网络中的博客图片也可以被访问</p><p>🥉<strong>保姆级教学 包教包会！</strong></p></blockquote><h2 id="腾讯云COS"><a href="#腾讯云COS" class="headerlink" title="腾讯云COS"></a>腾讯云COS</h2><h3 id="1-开通COS"><a href="#1-开通COS" class="headerlink" title="1.开通COS"></a>1.开通COS</h3><ul><li>进入腾讯云官网控制台搜索对象存储 <a href="https://cloud.tencent.com/">腾讯云 产业智变·云启未来 - 腾讯 (tencent.com)</a></li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124191352792.png" alt="image-20221124191352792"></p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124191459755.png" alt="image-20221124191459755"></p><ul><li><strong>未开通会提示开通</strong> 直接按照要求进行开通即可</li></ul><h3 id="2-创建存储桶"><a href="#2-创建存储桶" class="headerlink" title="2.创建存储桶"></a>2.创建存储桶</h3><ul><li><strong>开通后创建存储桶</strong></li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124191642175.png" alt="image-20221124191642175"></p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124191954458.png" alt="image-20221124191954458"></p><ul><li>高级可选配置<strong>默认即可</strong></li><li>配置好之后创建</li></ul><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><h3 id="1-下载PicGo"><a href="#1-下载PicGo" class="headerlink" title="1.下载PicGo"></a>1.下载PicGo</h3><ul><li><p>前往官网下载 <a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">PicGo is Here | PicGo</a> 可选多种方式</p></li><li><p>Git Hub 下载 <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p></li><li><p>在文档末尾选择对应版本下载即可</p></li><li><p><strong>点击直接下载</strong> 2.3.1 版本： <a href="https://picgo-1251750343.cos.ap-chengdu.myqcloud.com/2.3.1/PicGo-Setup-2.3.1-x64.exe">PicGo-Setup-2.3.1-x64.exe</a></p></li><li><p>会显示该程序有风险 忽略风险安装即可</p></li></ul><h3 id="2-配置PicGo"><a href="#2-配置PicGo" class="headerlink" title="2.配置PicGo"></a>2.配置PicGo</h3><ul><li><strong>获取腾讯云COS密钥</strong></li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124194012341.png" alt="image-20221124194012341"></p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124194311482.png" alt="image-20221124194311482"></p><ul><li>在控制台 <strong>对象存储</strong> 中获取基本信息</li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124194547555.png" alt="image-20221124194547555"></p><ul><li><strong>配置 PicGo</strong></li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124194901056.png" alt="image-20221124194901056"></p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><h3 id="1-下载Typora"><a href="#1-下载Typora" class="headerlink" title="1.下载Typora"></a>1.下载Typora</h3><ul><li>官网下载即可 <a href="https://typoraio.cn/">Typora 官方中文站 (typoraio.cn)</a></li><li>Typora收费了 大家自行寻找下载资源即可</li></ul><h3 id="2-Typora配置"><a href="#2-Typora配置" class="headerlink" title="2.Typora配置"></a>2.Typora配置</h3><ul><li><strong>文件(F) -&gt; 偏好设置</strong></li></ul><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20221124195423010.png" alt="image-20221124195423010"></p><blockquote><p>🏅<strong>配置完毕！</strong></p><p>🎖<strong>对你有帮助的话给我点个赞吧！</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 腾讯云 </tag>
            
            <tag> 对象存储 </tag>
            
            <tag> PicGo </tag>
            
            <tag> Typora </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue3+TS+Vite】使用Vite与TS构建Vue3项目</title>
      <link href="/2022/12/12/Vue3-Ts-Vite/"/>
      <url>/2022/12/12/Vue3-Ts-Vite/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-Ts-Vite"><a href="#Vue3-Ts-Vite" class="headerlink" title="Vue3+Ts+Vite"></a>Vue3+Ts+Vite</h1><blockquote><p>🔈今天学习一下如何初始化一个 Vue3 + Ts + Vite 的项目</p><p>🔉学习地址：<a href="https://vitejs.cn/guide/">Vite中文网</a></p><p>🔊与时俱进 开始用全新的技术</p><p>本文包含以下内容：基础框架的搭建，别名配置，vue-router配置，pinia配置，axios配置，ESLint配置。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Vite 需要 Node.js 版本 &gt;= 12.0.0</span></span><br><span class="line">npm init vite@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据相关问题进行回答</span></span><br><span class="line"><span class="comment"># 需要选择 框架以及使用语言 配置项目名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用附加命令创建指定项目 无需再选择</span></span><br><span class="line">npm init vite@latest vue-ts-viet-prj --template vue ts</span><br><span class="line"><span class="comment"># npm 7+, 需要额外的双横线：</span></span><br><span class="line">npm init vite@latest my-vue-app -- --template vue ts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> vite-project</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 运行项目</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><ul><li>习惯Vue2脚手架中用 @符号指向Src的习惯了 在Vite中配置一下</li><li>需要修改 <code>vite.config.ts</code> <code>tsconfig.json</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// viet.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="comment">// 配置别名指向src目录</span></span><br><span class="line">            <span class="string">&quot;@&quot;</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 使用别名的文件后缀</span></span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;useDefineForClassFields&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Node&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// 加入以下配置项</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 用于设置解析非相对模块名称的基本目录，相对模块不会受到baseUrl的影响</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 用于设置模块名到基于baseUrl的路径映射</span></span><br><span class="line">            <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.node.json&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Vue-Router 4+ 版本支持 Vue3</span></span><br><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><ul><li>新建 目录&#x2F;文件夹 <code>src/router/index.ts</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter,createWebHashHistory,<span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加类型校验</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteRecordRaw</span>[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/logIn&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;logIn&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;@/view/LogIn.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建router</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 配置为Hash模式</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="comment">// 配置toures</span></span><br><span class="line">    routes,</span><br><span class="line">    <span class="comment">// 路由跳转时返回顶部</span></span><br><span class="line">    scrollBehavior () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">top</span>: <span class="number">0</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置后置路由守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, failure</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; router &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入router</span></span><br><span class="line"><span class="keyword">import</span> &#123; router &#125; <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载到 Vue 实例</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;!-- 记得在App.vue中添加 router-view --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><ul><li>新建 目录&#x2F;文件 <code>src/store/index.ts</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    1. 定义容器并导出</span></span><br><span class="line"><span class="comment"> *    2. 使用容器中的state</span></span><br><span class="line"><span class="comment"> *    3. 修改容器中的state</span></span><br><span class="line"><span class="comment"> *    4. 使用容器中的action</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 定义容器并导出</span></span><br><span class="line"><span class="comment"> * 参数一: 容器ID, 唯一, 将来 Pinia 会把所有的容器挂载到根容器</span></span><br><span class="line"><span class="comment"> * 参数二: 选项对象</span></span><br><span class="line"><span class="comment"> * 返回值: 函数, 调用的时候要空参调用, 返回容器实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mainStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类似组件的 data, 用于存储全局的的状态</span></span><br><span class="line"><span class="comment">     * 注意:</span></span><br><span class="line"><span class="comment">     *    1.必须是函数, 为了在服务端渲染的时候避免交叉请求导致的数据交叉污染</span></span><br><span class="line"><span class="comment">     *    2.必须是箭头函数, 为了更好的 TS 类型推导</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">state</span>: &#123;</span><br><span class="line">                <span class="attr">token</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类似组件的 computed, 用来封装计算属性, 具有缓存特性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类似组件的 methods, 封装业务逻辑, 修改state</span></span><br><span class="line"><span class="comment">     * 注意: 里面的函数不能定义成箭头函数(函数体中会用到this)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;createPinia&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 创建 Pinia 实例</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="comment">// 创建 Vue 实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 挂载到 Vue 根实例</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm insall axios</span><br></pre></td></tr></table></figure><ul><li>新建 目录&#x2F;文件 <code>src/utils/request.ts</code> <code>src/api/xxx.ts</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 导入pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; mainStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">mainStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios</span></span><br><span class="line"><span class="keyword">const</span> $http = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">//设置默认请求地址</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="comment">//设置请求超时时间</span></span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">5000</span>,</span><br><span class="line">    <span class="comment">//设置请求头</span></span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">$http.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 验证 token</span></span><br><span class="line">    <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">token</span>;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">headers</span>!= <span class="literal">undefined</span>) config.<span class="property">headers</span>.<span class="property">Authorization</span> = token</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//响应拦截</span></span><br><span class="line">$http.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 状态码为200正常返回</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出封装的axios</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> $http</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api/user.ts</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&quot;@/utils/request&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">data: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user/login&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">        data</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">token: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user/info&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>: &#123; token &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/user/logout&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h2><p><strong>参考文章</strong>：<a href="https://zhuanlan.zhihu.com/p/450993469">在 Vue3 + Vite + TS 项目中配置 ESLint，让 VSCode 编辑器自动修复错误 - 知乎 (zhihu.com)</a></p><ul><li>使用ESLint进行代码规范 保存就更改 看起来就舒服多了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># 指定一下版本号 不然会有很多不兼容以及奇奇怪怪的问题</span></span><br><span class="line">npm install eslint@7.2.0 eslint-plugin-vue@7.20.0 vue-eslint-parser @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-airbnb-base@14.2.1 eslint-plugin-import -D</span><br></pre></td></tr></table></figure><ul><li>添加 .eslintrc.js 配置文件 手动添加即可</li><li>写入以下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">globals</span>: &#123;</span><br><span class="line">    <span class="attr">defineEmits</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="attr">defineProps</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;airbnb-base&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">2020</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;no-debugger&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用 debugger</span></span><br><span class="line">  <span class="string">&#x27;no-console&#x27;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span> ? <span class="string">&#x27;warn&#x27;</span> : <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用 console</span></span><br><span class="line">  <span class="string">&#x27;no-bitwise&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用按位运算符</span></span><br><span class="line">  <span class="string">&#x27;no-tabs&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用 tab</span></span><br><span class="line">  <span class="string">&#x27;array-element-newline&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;consistent&#x27;</span>], <span class="comment">// 强制数组元素间出现换行</span></span><br><span class="line">  <span class="attr">indent</span>: [</span><br><span class="line">    <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    &#123; <span class="title class_">MemberExpression</span>: <span class="number">0</span>, <span class="title class_">SwitchCase</span>: <span class="number">1</span>, <span class="attr">ignoredNodes</span>: [<span class="string">&#x27;TemplateLiteral&#x27;</span>] &#125;,</span><br><span class="line">  ], <span class="comment">// 强制使用一致的缩进</span></span><br><span class="line">  <span class="attr">quotes</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;single&#x27;</span>], <span class="comment">// 强制使用一致的反勾号、双引号或单引号</span></span><br><span class="line">  <span class="string">&#x27;comma-dangle&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;always-multiline&#x27;</span>], <span class="comment">// 要求或禁止末尾逗号</span></span><br><span class="line">  <span class="string">&#x27;object-curly-spacing&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;always&#x27;</span>], <span class="comment">// 强制在大括号中使用一致的空格</span></span><br><span class="line">  <span class="string">&#x27;max-len&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="number">120</span>], <span class="comment">// 强制一行的最大长度</span></span><br><span class="line">  <span class="string">&#x27;no-new&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止使用 new 以避免产生副作用</span></span><br><span class="line">  <span class="string">&#x27;linebreak-style&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 强制使用一致的换行风格</span></span><br><span class="line">  <span class="string">&#x27;import/extensions&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 确保在导入路径中统一使用文件扩展名</span></span><br><span class="line">  <span class="string">&#x27;eol-last&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求或禁止文件末尾存在空行</span></span><br><span class="line">  <span class="string">&#x27;no-shadow&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止变量声明与外层作用域的变量同名</span></span><br><span class="line">  <span class="string">&#x27;no-unused-vars&#x27;</span>: <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 禁止出现未使用过的变量</span></span><br><span class="line">  <span class="string">&#x27;import/no-cycle&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止一个模块导入一个有依赖路径的模块回到自己身上</span></span><br><span class="line">  <span class="string">&#x27;arrow-parens&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求箭头函数的参数使用圆括号</span></span><br><span class="line">  <span class="attr">semi</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;never&#x27;</span>], <span class="comment">// 要求或禁止使用分号代替 ASI</span></span><br><span class="line">  <span class="attr">eqeqeq</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求使用 === 和 !==</span></span><br><span class="line">  <span class="string">&#x27;no-param-reassign&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止对 function 的参数进行重新赋值</span></span><br><span class="line">  <span class="string">&#x27;import/prefer-default-export&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 如果模块只输入一个名字，则倾向于默认输出</span></span><br><span class="line">  <span class="string">&#x27;no-use-before-define&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止在变量定义之前使用它们，则倾向于默认输出</span></span><br><span class="line">  <span class="string">&#x27;no-continue&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用 continue 语句</span></span><br><span class="line">  <span class="string">&#x27;prefer-destructuring&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 优先使用数组和对象解构</span></span><br><span class="line">  <span class="string">&#x27;no-plusplus&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用一元操作符 ++ 和 --</span></span><br><span class="line">  <span class="string">&#x27;prefer-const&#x27;</span>: <span class="string">&#x27;warn&#x27;</span>, <span class="comment">// 要求使用 const 声明那些声明后不再被修改的变量</span></span><br><span class="line">  <span class="string">&#x27;global-require&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求 require() 出现在顶层模块作用域中</span></span><br><span class="line">  <span class="string">&#x27;no-prototype-builtins&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止直接调用 Object.prototypes 的内置属性</span></span><br><span class="line">  <span class="string">&#x27;consistent-return&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求 return 语句要么总是指定返回的值，要么不指定</span></span><br><span class="line">  <span class="string">&#x27;one-var-declaration-per-line&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求或禁止在变量声明周围换行</span></span><br><span class="line">  <span class="string">&#x27;one-var&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 强制函数中的变量要么一起声明要么分开声明</span></span><br><span class="line">  <span class="string">&#x27;import/named&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 确保命名导入与远程文件中的命名导出相对应</span></span><br><span class="line">  <span class="string">&#x27;object-curly-newline&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 强制大括号内换行符的一致性</span></span><br><span class="line">  <span class="string">&#x27;default-case&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求 switch 语句中有 default 分支</span></span><br><span class="line">  <span class="string">&#x27;no-trailing-spaces&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用行尾空格</span></span><br><span class="line">  <span class="string">&#x27;func-names&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求或禁止使用命名的 function 表达式</span></span><br><span class="line">  <span class="attr">radix</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 强制在 parseInt() 使用基数参数</span></span><br><span class="line">  <span class="string">&#x27;no-unused-expressions&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止出现未使用过的表达式</span></span><br><span class="line">  <span class="string">&#x27;no-underscore-dangle&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止标识符中有悬空下划线</span></span><br><span class="line">  <span class="string">&#x27;no-nested-ternary&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用嵌套的三元表达式</span></span><br><span class="line">  <span class="string">&#x27;no-restricted-syntax&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁用特定的语法</span></span><br><span class="line">  <span class="string">&#x27;no-await-in-loop&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止在循环中出现 await</span></span><br><span class="line">  <span class="string">&#x27;import/no-extraneous-dependencies&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止使用外部包</span></span><br><span class="line">  <span class="string">&#x27;import/no-unresolved&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 确保导入指向一个可以解析的文件/模块</span></span><br><span class="line">  <span class="string">&#x27;template-curly-spacing&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;always&#x27;</span>], <span class="comment">// 要求或禁止模板字符串中的嵌入表达式周围空格的使用</span></span><br><span class="line">  <span class="string">&#x27;@typescript-eslint/no-var-requires&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 除import语句外，禁止使用require语句</span></span><br><span class="line">  <span class="string">&#x27;@typescript-eslint/no-empty-function&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 不允许空函数</span></span><br><span class="line">  <span class="string">&#x27;@typescript-eslint/no-explicit-any&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 禁止使用 any 类型</span></span><br><span class="line">  <span class="string">&#x27;guard-for-in&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求 for-in 循环中有一个 if 语句</span></span><br><span class="line">  <span class="string">&#x27;class-methods-use-this&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 强制类方法使用 this</span></span><br><span class="line">  <span class="string">&#x27;vue/html-indent&#x27;</span>: [<span class="string">&#x27;error&#x27;</span>, <span class="number">2</span>], <span class="comment">// 在&lt;template&gt;中强制一致缩进</span></span><br><span class="line">  <span class="string">&#x27;vue/html-self-closing&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 执行自闭合的风格</span></span><br><span class="line">  <span class="string">&#x27;vue/max-attributes-per-line&#x27;</span>: [ <span class="comment">// 强制每行属性的最大数量</span></span><br><span class="line">    <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">singleline</span>: &#123;</span><br><span class="line">        <span class="attr">max</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">allowFirstLine</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">multiline</span>: &#123;</span><br><span class="line">        <span class="attr">max</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">allowFirstLine</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;vue/singleline-html-element-content-newline&#x27;</span>: <span class="string">&#x27;off&#x27;</span>, <span class="comment">// 要求单行元素的内容前后有一个换行符</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不同IDE设置ESLint方法不同</li><li>大家自行查找即可</li></ul><p>WebStorm：<a href="https://blog.csdn.net/Fine_Cui/article/details/118512635">WebStorm 2021.1 使用 ESLint自动格式化代码_程序员鱼丸的博客-CSDN博客_webstorm代码格式化插件</a></p><p>VsCode：<a href="https://juejin.cn/post/6969455093770879006">VsCode 如何配置Eslint - 掘金 (juejin.cn)</a></p><ul><li>配置完真的舒服多了😀</li></ul><h2 id="懒人必备"><a href="#懒人必备" class="headerlink" title="懒人必备"></a>懒人必备</h2><ul><li>不想自己配置的话 直接 clone 写好的代码开箱即用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/lonelysnowman/vue3-vite-ts-template.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> vue3-vite-ts-template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 淘宝镜像加速下载</span></span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><blockquote><p>关注我查看更多前端技术文章</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue3 </tag>
            
            <tag> TypeScript </tag>
            
            <tag> Vite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue部署】使用Nginx部署Vue项目</title>
      <link href="/2022/12/12/Vue-Server/"/>
      <url>/2022/12/12/Vue-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx部署Vue项目"><a href="#Nginx部署Vue项目" class="headerlink" title="Nginx部署Vue项目"></a>Nginx部署Vue项目</h1><blockquote><p>今天教大家使用Nginx快速的将Vue打包好的Dist文件部署在服务器上供他人访问</p><p>⭐关注我查看更多笔记：Linux中安装Nginx</p></blockquote><h2 id="获取dist文件"><a href="#获取dist文件" class="headerlink" title="获取dist文件"></a>获取dist文件</h2><ul><li>在 Vue2 &#x2F; Vue3 项目文件夹下输入以下命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ul><li>在vue项目文件夹下会出现 <strong>dist文件夹</strong></li><li>将该文件夹上传至服务器 使用 <strong>scp</strong> 命令 与 <strong>XFTP</strong> 等均可</li></ul><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><h3 id="检查nginx"><a href="#检查nginx" class="headerlink" title="检查nginx"></a>检查nginx</h3><ul><li>首先检查自己是否安装nginx</li><li>未安装请查看我的另一篇安装 nginx 的博客</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下两个命令无效说明 未安装nginx 或 安装在了其他地方</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">出现版本号说明已安装</span></span><br><span class="line">nginx -V</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有配置环境变量使用以下命令查看</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><ul><li>nginx一般安装在 &#x2F;usr&#x2F;local&#x2F;nginx 下</li><li>可在 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx 使用</li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li><p>一般配置文件在目录 <strong>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</strong>  下</p></li><li><p>不在此处请检查nginx安装地址</p></li><li><p>使用vim修改 或 在本地修改后上传至服务器均可</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">4</span>;</span><br><span class="line"><span class="attribute">user</span> root;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    <span class="comment"># 配置响应的文件类型</span></span><br><span class="line">    <span class="attribute">include</span>   mime.types;</span><br><span class="line">    <span class="comment"># 出现 css/js 无效的问题可使用绝对路径</span></span><br><span class="line">    <span class="comment"># include   /usr/local/nginx/conf/mime.types;</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 配置访问的端口号</span></span><br><span class="line">        <span class="comment"># http默认为 80 端口</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># 设置为服务器的外网地址或域名</span></span><br><span class="line">        <span class="attribute">server_name</span> <span class="number">112.124.239.485</span>;</span><br><span class="line">        <span class="comment"># 配置报错文件</span></span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span>           /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="comment"># dist文件夹的绝对路径</span></span><br><span class="line">            <span class="attribute">root</span> /root/VuePrj/dist;</span><br><span class="line">            <span class="comment"># html文件名</span></span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">autoindex</span> <span class="literal">on</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 配置访问日志地址</span></span><br><span class="line">        <span class="attribute">access_log</span>  /root/VuePrj/dist/access.log;</span><br><span class="line">        <span class="attribute">error_log</span>  /root/VuePrj/dist/<span class="literal">error</span>.log;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">未配置环境变量使用绝对路径运行</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">未启动nginx 先启动</span></span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h2 id="访问部署地址"><a href="#访问部署地址" class="headerlink" title="访问部署地址"></a>访问部署地址</h2><ul><li>根据配置文件访问相应地址即可</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://112.124.239.485</span><br></pre></td></tr></table></figure><blockquote><p>部署完成！</p><p>如果对你有帮助 请帮我点赞👍</p><p><strong>关注我</strong>查看更多技术文章</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Nginx </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Django部署】Nginx+uWsgi部署Django项目</title>
      <link href="/2022/12/12/Django-Server/"/>
      <url>/2022/12/12/Django-Server/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-uWsgi部署Django项目"><a href="#Nginx-uWsgi部署Django项目" class="headerlink" title="Nginx+uWsgi部署Django项目"></a>Nginx+uWsgi部署Django项目</h1><blockquote><p>最近需要部署一个Django项目但是不能用宝塔面板！</p><p>呜呜呜 不能懒人式一键部署了</p><p>那就学习一下黑框框部署吧</p><ul><li>学习视频：<a href="https://www.bilibili.com/video/BV1TJ411s7TL/?spm_id_from=333.337.search-card.all.click">Nginx+uWSGI+Django部署生产环境_哔哩哔哩_bilibili</a></li><li>参考博客：<a href="https://blog.csdn.net/qq_41341757/article/details/113825603">(54条消息) Nginx+uWSGI部署_一夜奈何梁山的博客-CSDN博客_nginx uwsgi</a></li></ul></blockquote><p><strong>基本原理</strong></p><ul><li>首先用户浏览器向nginx发送请求，nginx判断是动态请求还是静态请求，如果是静态请求，则直接返回静态文件。如果是动态请求，则将请求转发给uwsgi服务器，uwsgi调用我们的django进行处理请求，然后一步一步的再返回。</li><li>WSGI是Web 服务器(uWSGI)与 Web 应用程序或应用框架(Django)之间的一种低级别的接口</li><li>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议</li><li><strong>uwsgi</strong>是Nginx服务器和uWSGI服务器的通信协议，规定了怎么把请求转发给应用程序和返回</li></ul><p><img src="https://img-blog.csdnimg.cn/20210216160823723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzQxNzU3,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20210216160909709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzQxNzU3,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>使用Xshell完成</strong></p><h2 id="1-上传文件到服务器"><a href="#1-上传文件到服务器" class="headerlink" title="1.上传文件到服务器"></a>1.上传文件到服务器</h2><h3 id="使用scp命令"><a href="#使用scp命令" class="headerlink" title="使用scp命令"></a>使用scp命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp 文件名 用户名@服务器HOST:上传到服务器的路径</span><br><span class="line">// 需要提供 root 密码</span><br><span class="line">scp name root@82.156.215.40:/root/ipbdTCF/</span><br></pre></td></tr></table></figure><p><strong>使用xftp等其他方式也可</strong></p><h2 id="2-配置虚拟环境"><a href="#2-配置虚拟环境" class="headerlink" title="2.配置虚拟环境"></a>2.配置虚拟环境</h2><h3 id="检查是否安装virtualenv"><a href="#检查是否安装virtualenv" class="headerlink" title="检查是否安装virtualenv"></a>检查是否安装virtualenv</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --version</span><br></pre></td></tr></table></figure><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 遇到权限问题在前面加上 sudo</span><br><span class="line">sudo pip3 install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages --python=python3  虚拟环境文件夹名</span><br></pre></td></tr></table></figure><ul><li>–no-site-packages 这是构建干净，隔离的模块的参数  (如果virtualenv版本大于20默认携带此参数不需要此参数)</li><li>–python&#x3D;python3 这个参数是指定虚拟环境以哪一个物理解释器为基础的</li><li>最后一个是虚拟环境的名字 会创建这么一个文件夹</li></ul><h3 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /路径/虚拟环境文件夹名/bin/activate</span><br></pre></td></tr></table></figure><p>激活虚拟环境的原理就是修改了PATH变量，path的执行是有顺序的</p><p>修改了环境变量的位置</p><ul><li>echo $PATH 检查环境变量</li><li>which python3</li><li>which pip3 检查虚拟环境是否正常</li></ul><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate </span><br></pre></td></tr></table></figure><p><strong>项目依赖都装在虚拟环境中管理！</strong></p><h2 id="3-配置uwsgi"><a href="#3-配置uwsgi" class="headerlink" title="3.配置uwsgi"></a>3.配置uwsgi</h2><h3 id="检查是否安装uwsgi"><a href="#检查是否安装uwsgi" class="headerlink" title="检查是否安装uwsgi"></a><strong>检查是否安装uwsgi</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 已安装会显示版本号</span></span><br><span class="line">uwsgi --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 未安装使用 pip 安装一下</span></span><br><span class="line"><span class="comment"># 注意要在虚拟环境中安装</span></span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a><strong>启动项目</strong></h3><ul><li>注意：启动前先<strong>runserver</strong>测试一下是否配置完成能够正常运行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用uwsgi启动项目</span></span><br><span class="line"><span class="comment"># --file 指向项目内  wsgi.py 文件</span></span><br><span class="line"><span class="comment"># --static-map 指向静态文件路径</span></span><br><span class="line"><span class="comment"># uwsgi --http 0.0.0.0:80 --file 项目名称/wsgi.py --static-map=/static=static</span></span><br><span class="line"><span class="comment"># 在项目目录下</span></span><br><span class="line">uwsgi --http <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span> --file teacher/wsgi.py --static-<span class="built_in">map</span>=/static=static</span><br></pre></td></tr></table></figure><p>启动后可在自己服务器的公网IP访问到Django项目</p><ul><li>http:&#x2F;&#x2F;公网IP地址</li></ul><h3 id="配置uwsgi"><a href="#配置uwsgi" class="headerlink" title="配置uwsgi"></a><strong>配置uwsgi</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在项目目录下创建 uwsgi.ini 作为uwsgi配置文件</span></span><br><span class="line">vim uwsgi.ini</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uwsgi.ini文件详情</span></span><br><span class="line">[uwsgi]</span><br><span class="line"><span class="comment"># 项目目录</span></span><br><span class="line">chdir=/opt/project_teacher/teacher/</span><br><span class="line"><span class="comment"># 启动uwsgi的用户名和用户组</span></span><br><span class="line">uid=root</span><br><span class="line">gid=root</span><br><span class="line"><span class="comment"># 指定项目的application</span></span><br><span class="line">module=项目名.wsgi:application</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定sock的文件路径</span></span><br><span class="line"><span class="comment"># 与nginx通讯使用</span></span><br><span class="line">socket=/项目绝对路径/uwsgi.sock</span><br><span class="line"><span class="comment"># 启用主进程</span></span><br><span class="line">master=true</span><br><span class="line"><span class="comment"># 进程个数</span></span><br><span class="line">workers=<span class="number">4</span></span><br><span class="line">pidfile=/项目绝对路径/uwsgi.pid</span><br><span class="line"><span class="comment"># 自动移除unix Socket和pid文件当服务停止的时候</span></span><br><span class="line">vacuum=true</span><br><span class="line"><span class="comment"># 序列化接受的内容，如果可能的话</span></span><br><span class="line">thunder-lock=true</span><br><span class="line"><span class="comment"># 启用线程</span></span><br><span class="line">enable-threads=true</span><br><span class="line"><span class="comment"># 设置自中断时间</span></span><br><span class="line">harakiri=<span class="number">30</span></span><br><span class="line"><span class="comment"># 设置缓冲</span></span><br><span class="line">post-buffering=<span class="number">1028</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志目录</span></span><br><span class="line"><span class="comment"># 日志保存地点</span></span><br><span class="line">daemonize=/项目绝对路径/uwsgi.log</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动： ini 为uwsgi配置文件</span></span><br><span class="line">uwsgi --ini uwsgi.ini</span><br><span class="line"><span class="comment"># 重启： pid 为uwsgi启动后保存uwsgi启动进程的文件</span></span><br><span class="line">uwsgi --reload uwsgi.pid</span><br><span class="line"><span class="comment"># 停止： </span></span><br><span class="line">uwsgi --stop uwsgi.pid</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看uwsgi是否正常启动</span></span><br><span class="line">ps aux | grep uwsgi</span><br></pre></td></tr></table></figure><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p><strong>nginx的安装请查看另外一篇博客</strong></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  <span class="number">4</span>;</span><br><span class="line"><span class="comment"># 指定使用的用户</span></span><br><span class="line">user root;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment"># http 请求的端口</span></span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        <span class="comment"># https 请求的端口</span></span><br><span class="line">        listen <span class="number">443</span> ssl http2;</span><br><span class="line">        <span class="comment"># 配置的IP与域名</span></span><br><span class="line">        <span class="comment"># 这里随便输入的</span></span><br><span class="line">        server_name www.abc.com <span class="number">123.123</span><span class="number">.24</span><span class="number">.23</span>;</span><br><span class="line">        charset  utf-<span class="number">8</span>;</span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_types text/plain application/x-javascript text/css text/javascript application/x-httpd-php application/json text/json image/jpeg image/gif image/png application/octet-stream;</span><br><span class="line">        <span class="comment"># SSL证书配置</span></span><br><span class="line">        ssl_certificate /usr/local/nginx/conf/cert/tcfapi/tcfapi.snowhouse.space_bundle.pem;</span><br><span class="line">        ssl_certificate_key /usr/local/nginx/conf/cert/tcfapi/tcfapi.snowhouse.space.key;</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span>;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        error_page  <span class="number">404</span>           /<span class="number">404.</span>html;</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="comment"># 指定项目路径uwsgi</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            include uwsgi_params;</span><br><span class="line">            uwsgi_connect_timeout <span class="number">30</span>;</span><br><span class="line">            <span class="comment"># unix: 刚刚配置好的 uwsgi.sock 路径</span></span><br><span class="line">            uwsgi_pass unix:/root/IPBDPythonGroup/medicalSys/tichengfen/uwsgi.sock;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 指定静态文件路径</span></span><br><span class="line">        location /static/ &#123;</span><br><span class="line">            alias  /root/IPBDPythonGroup/medicalSys/tichengfen/static/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用时记得配置全局环境变量</span></span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line"><span class="comment"># 启动之后访问对应的nginx配置好的路径即可</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 关闭nginx</span></span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Nginx </tag>
            
            <tag> uwsgi </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue2】入门学习笔记-03</title>
      <link href="/2022/12/12/Vue2-03/"/>
      <url>/2022/12/12/Vue2-03/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2入门学习笔记"><a href="#Vue2入门学习笔记" class="headerlink" title="Vue2入门学习笔记"></a>Vue2入门学习笔记</h1><blockquote><p>Vue2入门必备！</p><p>⭐关注我查看更多配套笔记</p><p>学习视频：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/">https://www.bilibili.com/video/BV1Zy4y1K7SH/</a></p><p>【尚硅谷Vue全家桶】</p><p>本博客是对该视频内容的整理以及加入自己的理解 <strong>想全面学习的推荐大家去看原视频</strong></p></blockquote><h2 id="1-Vue动画"><a href="#1-Vue动画" class="headerlink" title="1.Vue动画"></a>1.Vue动画</h2><p><strong>自己使用 Css 也能实现</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用标签transition包裹 --&gt;</span></span><br><span class="line">// apper属性可以让动画加载时出现 简写 apper 属性直接添加</span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">:apper</span>=<span class="string">&quot;true&quot;</span> <span class="attr">apper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span></span><br><span class="line">            显示/隐藏</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">            我是动画元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 必须使用 vue 规定的名称识别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* .之后的名称与name一致 不加name默认为v */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hello-enter-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: 动画名 持续时间;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.hello-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: 动画名 持续时间 everse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.v-enter-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: 动画名 持续时间;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: 动画名 持续时间 everse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyfarm</span> 动画名&#123;</span></span><br><span class="line"><span class="language-css">        ...</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-Vue过渡"><a href="#2-Vue过渡" class="headerlink" title="2.Vue过渡"></a>2.Vue过渡</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用标签transition包裹 --&gt;</span></span><br><span class="line">// apper属性可以让动画加载时出现 简写 apper 属性直接添加</span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">:apper</span>=<span class="string">&quot;true&quot;</span> <span class="attr">apper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span></span><br><span class="line">            显示/隐藏</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">            我是动画元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 必须使用 vue 规定的名称识别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* .之后的名称与name一致 不加name默认为v */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 给所需动画添加过度属性 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: all <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 初始效果 离开的终点 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.v-enter</span>,<span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: 动画名 持续时间;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 过渡效果中 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.v-enter-active</span>,<span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: all <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;    </span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 结束效果 结束的起点 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.v-leave-enter-to</span>,<span class="selector-class">.v-leave</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: 动画名 持续时间 everse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyfarm</span> 动画名&#123;</span></span><br><span class="line"><span class="language-css">        ...</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-多个元素过渡"><a href="#3-多个元素过渡" class="headerlink" title="3.多个元素过渡"></a>3.多个元素过渡</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用标签transition包裹 --&gt;</span></span><br><span class="line">// apper属性可以让动画加载时出现 简写 apper 属性直接添加</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;</span></span><br><span class="line">    显示/隐藏</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多个动画添加需要使用transition-group --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">group</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">apper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">            我是动画元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">            我是动画元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 必须使用 vue 规定的名称识别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* .之后的名称与name一致 不加name默认为v */</span></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 给所需动画添加过度属性 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: all <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 初始效果 离开的终点 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.v-enter</span>,<span class="selector-class">.v-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: 动画名 持续时间;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 过渡效果中 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.v-enter-active</span>,<span class="selector-class">.v-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: all <span class="number">0.5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;    </span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 结束效果 结束的起点 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.v-leave-enter-to</span>,<span class="selector-class">.v-leave</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: 动画名 持续时间 everse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyfarm</span> 动画名&#123;</span></span><br><span class="line"><span class="language-css">        ...</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220419164137507.png" alt="image-20220419164137507"></p><h2 id="4-超级好用的动画库"><a href="#4-超级好用的动画库" class="headerlink" title="4.超级好用的动画库"></a>4.超级好用的动画库</h2><p><strong>animate.css</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enter-active-class</span>=<span class="string">&quot;animate__fadeIn&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">leave-active-class</span>=<span class="string">&quot;animate__fadeOut&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">class</span>=<span class="string">&quot;animate__animated&quot;</span>&gt;</span>Animate.css<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用方法</span></span><br><span class="line"><span class="comment">// name=&quot;animate__animated animate__bounce&quot; 在 transition中添加该属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在官网找到喜欢的属性配置 复制添加到</span></span><br><span class="line"><span class="comment">// enter-active-class=&quot;&quot; leave-active-class=&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm安装</span></span><br><span class="line"><span class="comment">// npm install animate.css</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用 animate.css 动画库</span></span><br><span class="line"><span class="keyword">import</span> animate <span class="keyword">from</span> <span class="string">&#x27;animate.css&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(animate)</span><br></pre></td></tr></table></figure><p>官网：<a href="https://animate.style/#documentation">Animate.css | A cross-browser library of CSS animations.</a></p><h2 id="5-Http请求-代理"><a href="#5-Http请求-代理" class="headerlink" title="5.Http请求 代理"></a>5.Http请求 代理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对 xhr 进行封装</span></span><br><span class="line"><span class="comment">// xhr new XMLHttpRequest() xhr.open() xhr.send()</span></span><br><span class="line"><span class="comment">// jQuery $.get $.post</span></span><br><span class="line"><span class="comment">// axios</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 与 xhr平级</span></span><br><span class="line"><span class="comment">// fetch</span></span><br></pre></td></tr></table></figure><p><strong>Vue 项目中 推荐使用 axios</strong></p><p><strong>解决跨域问题</strong></p><p><strong>1.CORS</strong></p><p><strong>2.Jsonp</strong>         script src <strong>只能使用 get</strong></p><p><strong>3.代理服务器</strong> 代理服务器默认端口号 8080</p><p>1.– nginx</p><p>2.– vue-cli</p><h3 id="5-1简易代理"><a href="#5-1简易代理" class="headerlink" title="5.1简易代理"></a>5.1简易代理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 在配置文件中添加以下配置 开启代理服务器 代理服务器开启在 8080</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="comment">// 需要转发给谁</span></span><br><span class="line">    <span class="attr">proxy</span>:<span class="string">&#x27;http://后端服务器地址&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意</span></span><br><span class="line"><span class="comment">8080端口服务器 的根目录为 public 其中有的东西直接回返回</span></span><br><span class="line"><span class="comment">不会转发请求</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在axios中请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/后端路由地址&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line"><span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">errror</span> =&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2完美代理"><a href="#5-2完美代理" class="headerlink" title="5.2完美代理"></a>5.2完美代理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 在配置文件中添加以下配置 开启代理服务器 代理服务器开启在 8080</span></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">     <span class="attr">proxy</span>:&#123;</span><br><span class="line">         <span class="comment">// 配置 转发服务器的前缀</span></span><br><span class="line">         <span class="string">&#x27;/api&#x27;</span>:&#123;</span><br><span class="line">             <span class="comment">// 转发地址</span></span><br><span class="line">             <span class="attr">target</span>:<span class="string">&#x27;http://后端服务器地址&#x27;</span>,</span><br><span class="line">             <span class="comment">//加入此配置项 转发地址为 /api/student 替换为 /student 不然会请求原路径</span></span><br><span class="line">             <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">                 <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="attr">ws</span>:<span class="literal">true</span>, <span class="comment">// 用于支持 websocket </span></span><br><span class="line">             <span class="attr">changeOrigin</span>:<span class="literal">true</span>, <span class="comment">// 说谎(伪装请求地址) 默认为 true</span></span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="comment">// 可配置多个</span></span><br><span class="line">         <span class="string">&#x27;/cas&#x27;</span>:&#123;</span><br><span class="line">             <span class="attr">target</span>:<span class="string">&#x27;http://后端服务器地址&#x27;</span>,</span><br><span class="line">             <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">                 <span class="string">&#x27;^/cas&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="attr">ws</span>:<span class="literal">true</span>,</span><br><span class="line">             <span class="attr">changeOrigin</span>:<span class="literal">true</span>,</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8080/配置的前缀/后端路由地址&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-静态组件"><a href="#6-静态组件" class="headerlink" title="6.静态组件"></a>6.静态组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;....&#x27;</span> <span class="comment">// vue 会进行严格的语法检查 放在assat进行引入</span></span><br><span class="line"><span class="comment">// 推荐放入 public 文件夹 在 index.html 中使用 link 引入 bootstrap.. 等 </span></span><br></pre></td></tr></table></figure><p>ES6 合并对象语法  Obj &#x3D; {…对象1名称,…对象2名称}</p><h2 id="7-vue-resource-vue的插件库"><a href="#7-vue-resource-vue的插件库" class="headerlink" title="7.vue-resource vue的插件库"></a>7.vue-resource vue的插件库</h2><p><strong>对 xhr 进行封装</strong></p><p><strong>Vue.use(vueResource)</strong> 在main.js中进行全局配置</p><p>在 vm 中会出现 $http</p><p>使用 this.$http 代替 axios api完全一致 vue1.0广泛使用</p><h2 id="8-slot-插槽"><a href="#8-slot-插槽" class="headerlink" title="8.slot 插槽"></a>8.slot 插槽</h2><h3 id="8-1默认插槽"><a href="#8-1默认插槽" class="headerlink" title="8.1默认插槽"></a>8.1默认插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正常自闭和组件 / 正常组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相同组件需要展示不同的元素时使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 默认插槽写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要插入的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件传入插槽的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span>使用者没有传入插槽 会将我展示<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 可以在 父/子 组件书写 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-具名插槽-多个插槽"><a href="#8-2-具名插槽-多个插槽" class="headerlink" title="8.2(具名插槽)多个插槽"></a>8.2(具名插槽)多个插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多个插槽写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需要插入的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;slot名称1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">vido</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;slot名称2&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">&lt;!-- template写法 template标签 不影响结构--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- slot:slot名称1 为 vue2.7 更新的写法 只能在 template标签中使用 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;slot名称1&quot;</span> <span class="attr">slot:slot名称1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">viv</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件传入插槽的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot名称1&quot;</span>&gt;</span>使用者没有传入插槽 会将我展示<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;slot名称2&quot;</span>&gt;</span>使用者没有传入插槽 会将我展示<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 可以在 父/子 组件书写 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3作用域插槽"><a href="#8-3作用域插槽" class="headerlink" title="8.3作用域插槽"></a>8.3作用域插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用域插槽写法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Student</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 作用域必须使用 template 标签 传参 作用域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">scop</span>=<span class="string">&quot;Obj&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- games msg 在Obj中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;Obj.games&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;Obj.msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件插槽中给父组件传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;这里是msg信息&quot;</span>&gt;</span>使用者没有传入插槽 会将我展示<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 可以在 父/子 组件书写 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-Vuex"><a href="#9-Vuex" class="headerlink" title="9.Vuex"></a>9.Vuex</h2><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220421151212172.png" alt="image-20220421151212172"></p><p><strong>多组件共享数据</strong> 状态 &#x3D; 数据</p><ol><li>多个组件依赖于同一个状态</li><li>来自不同组件的行为需要修改同一状态</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>npm i vuex</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span> <span class="comment">// 在 index.js 中 引入</span></span><br><span class="line"><span class="comment">// vue2 -&gt; vuex3</span></span><br><span class="line"><span class="comment">// vue3 -&gt; vuex4</span></span><br><span class="line"><span class="number">3.</span><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">store</span>:<span class="string">&quot;hello&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 vm 中 出现 $store 保存传入的数据</span></span><br></pre></td></tr></table></figure><p>在components同级文件夹下添加 store 文件夹</p><p><strong>添加 index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该文件用于创建 Vuex 中最为核心的store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 </span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 准备 actions</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">// 需要dispatch的函数</span></span><br><span class="line">    <span class="string">&quot;函数名&quot;</span>(context,value)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions 中的函数被调用了&#x27;</span>,context,value); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分配给 其他 dispatch 分段处理 便于维护代码</span></span><br><span class="line">        context.<span class="title function_">dispatch</span>(<span class="string">&quot;函数2&quot;</span>,value);</span><br><span class="line">        </span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&quot;函数名(使用大写与actions进行区分)&quot;</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备 mutations 操作 data</span></span><br><span class="line"><span class="comment">// 开发者工具 检测 mutations</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="string">&quot;大写函数名&quot;</span>(state,value)&#123;</span><br><span class="line">state.<span class="property">value</span> += value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备 state 用于存储数据 全局 data</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="comment">// 准备数据</span></span><br><span class="line">    <span class="string">&quot;value&quot;</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 改变后会替代 vc 里的 data</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现全局的 计算属性 computed</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 对 state 进行加工</span></span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span>*<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露 store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span></span><br><span class="line"><span class="comment">// 配置项中添加store</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>js 执行 import</strong> <strong>全部 import</strong> 会被提升到<strong>最高层</strong></p><p>vue 规定必须 先 ues(vuex) 再 创建 store 实例</p><p>使用2.import Vuex from ‘vuex’<br>&#x2F;&#x2F; vue2 -&gt; vuex3<br>&#x2F;&#x2F; vue3 -&gt; vuex4<br>3.Vue.use(Vuex)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methds</span>:&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;事件名&quot;</span>,传入的数据);</span><br><span class="line">    <span class="comment">// 直接跨过action</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;事件名&quot;</span>,传入的数据);</span><br><span class="line">    <span class="comment">// 获得计算属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">bigSum</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=yellow>可直接夸过 Actions 进行 Commit 调用 mutation 的函数 </font></p><p>vuex 开发者工具 历史记录符号</p><p><strong>回到该次数据</strong> 历史记录符号</p><p><strong>可以删除历史记录</strong> 禁用符号</p><p><strong>合并记录</strong> 下载符号</p><p>底部分 可以 <strong>导入导出</strong> &#x2F; <strong>粘贴复制</strong></p><p>ES6 语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Obj1</span> = &#123;<span class="attr">x</span>:<span class="number">1</span>,<span class="attr">y</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Obj2</span> =&#123;</span><br><span class="line">    <span class="attr">z</span>:<span class="number">3</span>,</span><br><span class="line">    ...<span class="title class_">Obj1</span>, <span class="comment">// 直接将Obj1的键值对插入</span></span><br><span class="line">    <span class="attr">m</span>:<span class="number">7</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-1-mapState-mapGetters"><a href="#9-1-mapState-mapGetters" class="headerlink" title="9.1 **mapState **mapGetters"></a>9.1 **mapState **mapGetters</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 映射 State 中的数据</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 借助mapState生成计算属性 从state中读取数据</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">adress</span>:<span class="string">&#x27;adress&#x27;</span>&#125;) <span class="comment">// 可直接在计算属性中添加</span></span><br><span class="line">    <span class="comment">// 不可简写 对象简写方式为 &#123;sum:sum&#125; === &#123;sum&#125;  !== &#123;sum:&quot;sum&quot;&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Vue 可识别 简写方法 与上述方法用途一致</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 全局计算属性获取</span></span><br><span class="line">    ...<span class="title function_">mapGeters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-mapAction-mapMutations"><a href="#9-2-mapAction-mapMutations" class="headerlink" title="9.2 mapAction mapMutations"></a>9.2 mapAction mapMutations</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 映射 State 中的数据</span></span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组 / 对象 形式默认生成方法 需要在调用时传参</span></span><br><span class="line">    <span class="comment">/*add(value)&#123;</span></span><br><span class="line"><span class="comment">    this.$store.commit(&#x27;add&#x27;,value)</span></span><br><span class="line"><span class="comment">&#125;*/</span>  </span><br><span class="line">    </span><br><span class="line">...<span class="title function_">mapActions</span>([<span class="string">&#x27;add&#x27;</span>]),</span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;add&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3Vuex模块化"><a href="#9-3Vuex模块化" class="headerlink" title="9.3Vuex模块化"></a>9.3Vuex模块化</h3><p>index.js</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计数相关属性</span></span><br><span class="line"><span class="keyword">const</span> countOptions = &#123;</span><br><span class="line">    <span class="comment">// 配置该项可在 组件 中使用更简洁的写法</span></span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 与正常 vuex 配置完全一致</span></span><br><span class="line">    <span class="attr">action</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">mutation</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">getter</span>:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人员相关属性</span></span><br><span class="line"><span class="keyword">const</span> personOptions = &#123;</span><br><span class="line">    <span class="attr">action</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">mutation</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">getter</span>:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        <span class="attr">countAbout</span>:countOptions,</span><br><span class="line">        <span class="attr">personAbout</span>:personOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中简写使用</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">// 普通简写</span></span><br><span class="line">    <span class="comment">// 调用 state时 需要使用 countAbout.data</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;countAbout&#x27;</span>,<span class="string">&#x27;personAbout&#x27;</span>]),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 需要在 vuex 中 开启 namespaced</span></span><br><span class="line">    <span class="comment">// 调用时 直接使用 data 就可以</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;data&#x27;</span>]),</span><br><span class="line">    ...<span class="title function_">mapState</span>(<span class="string">&#x27;personAbout&#x27;</span>,[<span class="string">&#x27;data&#x27;</span>]),</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 其他 map 同理使用</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// getter 模块化之后 值为 countAbout/bigSum  countAbout不再为对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-路由"><a href="#10-路由" class="headerlink" title="10.路由"></a>10.路由</h2><h3 id="10-1-路由基础"><a href="#10-1-路由基础" class="headerlink" title="10.1 路由基础"></a>10.1 路由基础</h3><p><strong>单页面应用</strong> 路由改变 页面局部刷新 (没有全部刷新)</p><p>使用 vue 的插件库 vue-router</p><p>npm install -g vue-router</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">vue-router 3 版本对应 vue 2</span></span><br><span class="line"><span class="comment">vue-router 4 版本对应 vue 3</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// npm install vue-router@3</span></span><br></pre></td></tr></table></figure><p>在 <strong>components</strong> 同级文件夹下创建 <strong>router</strong> 文件夹</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 vue-router</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TheList</span> <span class="keyword">from</span> <span class="string">&#x27;../components/TheList.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AboutSnowman</span> <span class="keyword">from</span> <span class="string">&#x27;../components/AboutSnowman.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 并 暴露 一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/TodoList&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">AboutSnowman</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// path 为 * 表示匹配全部 可以匹配全部路径 路径匹配为从上至下</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;*&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">AboutSnowman</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 路由器</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="comment">// 设置 router</span></span><br><span class="line">  <span class="attr">router</span>:router,</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最终 在 html 页面中转化为 a 标签 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- to 为跳转到的路由 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- active-class 为在该路由时应用的 样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/TodoList&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>关于我的主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图展示 对应路由的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <strong>components</strong> 同级文件夹下创建 <strong>pages</strong> 文件夹</p><p>便于分类 pages存放 <strong>路由组件</strong> components文件夹存放 <strong>一般组件</strong></p><p>原理 ： {不断销毁与挂在组件}</p><ul><li>每个组件都有自己的$route属性，里面存储着自己的路由信息</li><li>整个应用只有一个router, 可以通过组件的$router属性获取到</li></ul><h3 id="10-2-多级路由-嵌套路由"><a href="#10-2-多级路由-嵌套路由" class="headerlink" title="10.2 多级路由 (嵌套路由)"></a>10.2 多级路由 (嵌套路由)</h3><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 vue-router</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TheList</span> <span class="keyword">from</span> <span class="string">&#x27;../components/TheList.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AboutSnowman</span> <span class="keyword">from</span> <span class="string">&#x27;../components/AboutSnowman.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 并 暴露 一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        <span class="comment">// 一级路由</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/TodoList&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            <span class="comment">// 路由嵌套从这里开始</span></span><br><span class="line">            <span class="comment">// 二级路由</span></span><br><span class="line">            <span class="attr">children</span>:[&#123;</span><br><span class="line">                <span class="comment">// 第二级不需要加 / 会出问题</span></span><br><span class="line">                <span class="attr">path</span>:<span class="string">&quot;new&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 一级路由</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/about&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">AboutSnowman</span>,</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最终 在 html 页面中转化为 a 标签 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- to 为跳转到的路由 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- active-class 为在该路由时应用的 样式 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 二级路由必须携带父亲级路由的路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/TodoList/new&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/new&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>关于我的主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 视图展示 对应路由的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-3-路由传参"><a href="#10-3-路由传参" class="headerlink" title="10.3 路由传参"></a>10.3 路由传参</h3><p>query参数 get传参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/TodoList/new?name=雪人&amp;age=18&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加 v-bind + ES6 `` 动态传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/TodoList/new?name=$&#123;name&#125;&amp;age=$&#123;age&#125;`&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象式 传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                  path=&quot;</span>/<span class="attr">TodoList</span>/<span class="attr">new</span>&quot;,</span></span><br><span class="line"><span class="tag">                  <span class="attr">query:</span>&#123;</span></span><br><span class="line"><span class="tag">                         <span class="attr">name:name</span>,</span></span><br><span class="line"><span class="tag">                         <span class="attr">age:age</span>,</span></span><br><span class="line"><span class="tag">                         &#125;               </span></span><br><span class="line"><span class="tag">                  &#125;</span></span><br><span class="line"><span class="tag">                  `&quot; <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/new&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>关于我的主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">name</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">age</span></span><br></pre></td></tr></table></figure><h3 id="10-4-命名路由"><a href="#10-4-命名路由" class="headerlink" title="10.4 命名路由"></a>10.4 命名路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 配置姓名 简化传参</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;ListName&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/TodoList&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            <span class="attr">children</span>:[&#123;</span><br><span class="line">                <span class="comment">// 配置姓名 简化传参</span></span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&quot;new&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 对象式 传参 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 name 必须使用对象式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                  // 此处直接传入 路由器 定义的名字</span></span></span><br><span class="line"><span class="string"><span class="tag">                  name:&quot;</span><span class="attr">ListName</span>&quot;,</span></span><br><span class="line"><span class="tag">                  <span class="attr">query:</span>&#123;</span></span><br><span class="line"><span class="tag">                         <span class="attr">name:name</span>,</span></span><br><span class="line"><span class="tag">                         <span class="attr">age:age</span>,</span></span><br><span class="line"><span class="tag">                         &#125;               </span></span><br><span class="line"><span class="tag">                  &#125;</span></span><br><span class="line"><span class="tag">                  `&quot; <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-5-params参数"><a href="#10-5-params参数" class="headerlink" title="10.5 params参数"></a>10.5 params参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- params参数 传参 需要配置占位符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/TodoList/new/11/王二`&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- params参数 对象式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">                  // params 只能使用name path会报错！！！</span></span></span><br><span class="line"><span class="string"><span class="tag">                  name:&quot;</span><span class="attr">ListName</span>&quot;,</span></span><br><span class="line"><span class="tag">                  <span class="attr">params:</span>&#123;</span></span><br><span class="line"><span class="tag">                         <span class="attr">id:11</span>,</span></span><br><span class="line"><span class="tag">                         <span class="attr">name:</span>&quot;<span class="attr">王二</span>&quot;,</span></span><br><span class="line"><span class="tag">                         &#125;               </span></span><br><span class="line"><span class="tag">                  &#125;</span></span><br><span class="line"><span class="tag">                  `&quot; <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 添加占位符设置参数</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;ListName&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/TodoList/:id/:name&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            <span class="attr">children</span>:[&#123;</span><br><span class="line">                <span class="comment">// 添加占位符设置参数</span></span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;new/:id/:name&#x27;</span>,</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&quot;new&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件中获取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">name</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">age</span></span><br></pre></td></tr></table></figure><h3 id="10-6-props的配置"><a href="#10-6-props的配置" class="headerlink" title="10.6 props的配置"></a>10.6 props的配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;ListName&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/TodoList/:id/:name&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            <span class="attr">children</span>:[&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;new/:id/:name&#x27;</span>,</span><br><span class="line">                <span class="attr">path</span>:<span class="string">&quot;new&quot;</span>,</span><br><span class="line">                <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">                <span class="comment">// props 写法一</span></span><br><span class="line">                <span class="comment">// 该对象中的所有 key-value 都会以props的形式传给 组件 TheList中</span></span><br><span class="line">                <span class="attr">props</span>:&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>&#125;,</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// props 写法二</span></span><br><span class="line">                <span class="comment">// props值为布尔值,若布尔值为真,就会把该参数的 params值当做 props 值传递给组件</span></span><br><span class="line">                <span class="attr">props</span>:<span class="literal">true</span>,</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// props 写法三</span></span><br><span class="line">                <span class="comment">// 值为函数 返回值 以props 传递给组件</span></span><br><span class="line">                <span class="comment">// $route 被回调传入 真好</span></span><br><span class="line">                <span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,<span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 结构赋值写法</span></span><br><span class="line">                <span class="title function_">props</span>(<span class="params">&#123;query&#125;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;<span class="attr">id</span>:query.<span class="property">id</span>,<span class="attr">name</span>:query.<span class="property">name</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="10-7-replace-记录"><a href="#10-7-replace-记录" class="headerlink" title="10.7 replace 记录"></a>10.7 replace 记录</h3><p><strong>默认为push记录 栈的不断添加</strong></p><p><strong>replace 替换当前记录 不能返回</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启replace :replace=&quot;true&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/TodoList/new&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">:replace</span>=<span class="string">&quot;true&quot;</span>&gt;</span>每日清单<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启replace 简写方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/new&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">replace</span>&gt;</span>关于我的主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-8-编程式路由导航"><a href="#10-8-编程式路由导航" class="headerlink" title="10.8 编程式路由导航"></a>10.8 编程式路由导航</h3><p><strong>在 $router 中 直接操作 不借助 router-link</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;showPush&quot;&gt;</span><br><span class="line">        push查看</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showReplace&quot;&gt;</span><br><span class="line">        replace查看</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;back&quot;&gt;</span><br><span class="line">        后退</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;forward&quot;&gt;</span><br><span class="line">        前进</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;go&quot;&gt;</span><br><span class="line">        前进</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;Message&#x27;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        showPush()&#123;</span><br><span class="line">             // 调用 $router 上的API</span><br><span class="line">            this.$router.push(&#123;</span><br><span class="line">                name:&quot;xiangqing&quot;,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    id:&#x27;11&#x27;,</span><br><span class="line">                    name:&#x27;王二&#x27;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        showReplace()&#123;</span><br><span class="line">             // 调用 $router 上的API</span><br><span class="line">            this.$router.replace(&#123;</span><br><span class="line">                name:&quot;xiangqing&quot;,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    id:&#x27;11&#x27;,</span><br><span class="line">                    name:&#x27;王二&#x27;,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        back()&#123;</span><br><span class="line">            this.$router.back</span><br><span class="line">        &#125;,</span><br><span class="line">        forward()&#123;</span><br><span class="line">            this.$router.forward</span><br><span class="line">        &#125;,</span><br><span class="line">        go()&#123;</span><br><span class="line">            // 正数 前进 n 次</span><br><span class="line">            // 复数 后退 n 次</span><br><span class="line">            this.$router.go(n)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="10-8-缓存路由组件"><a href="#10-8-缓存路由组件" class="headerlink" title="10.8 缓存路由组件"></a>10.8 缓存路由组件</h3><p>组件切走时会被销毁 内容消失 如何保存?</p><p><strong>需要保存数据的去缓存</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inlude=&quot;&quot; 配置需要缓存的组件 否则缓存全部组件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 防止组件被销毁 数据丢失 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">inlude</span>=<span class="string">&quot;组件名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缓存多个组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:inlude</span>=<span class="string">&quot;[&#x27;组件名1&#x27;,&#x27;组件名2&#x27;,&#x27;组件名3&#x27;]&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-9激活与失活声明周期"><a href="#10-9激活与失活声明周期" class="headerlink" title="10.9激活与失活声明周期"></a>10.9激活与失活声明周期</h3><p><strong>用于路由组件的 开启定时器 比 mounted更高效</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line"><span class="title function_">activated</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 开启定时器</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">deactivated</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 定时器自动关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-10路由守卫"><a href="#10-10路由守卫" class="headerlink" title="10.10路由守卫"></a>10.10路由守卫</h3><h4 id="1-前-x2F-后-置路由守卫"><a href="#1-前-x2F-后-置路由守卫" class="headerlink" title="1.前 &#x2F; 后 置路由守卫"></a>1.前 &#x2F; 后 置路由守卫</h4><p>保护路由的安全 <strong>验证数据库再展示</strong></p><p>全局前置路由守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/TodoList&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            <span class="comment">// 用于存放用户需要的特殊数据</span></span><br><span class="line">            <span class="comment">// 可以在判断中进行索引 不指定默认为 undefined 为 false</span></span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&quot;每日清单&quot;</span>&#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局前置路由守卫</span></span><br><span class="line"><span class="comment">// to 路由去向 路由对象</span></span><br><span class="line"><span class="comment">// from 路由由来 路由对象</span></span><br><span class="line"><span class="comment">// next 回调函数 使用 next()才能切换路由</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">path</span> === <span class="string">&#x27;/home&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">// 利用meta判断</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">from</span>.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局后置路由守卫</span></span><br><span class="line"><span class="comment">// 无 next 路由跳转已经完成后触发</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 可在跳转完成后更改路由</span></span><br><span class="line">doucment.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;网页标题&#x27;</span> <span class="comment">// 短路判断</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-独享路由守卫"><a href="#2-独享路由守卫" class="headerlink" title="2.独享路由守卫"></a>2.独享路由守卫</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&quot;/TodoList&quot;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">TheList</span>,</span><br><span class="line">            <span class="comment">// 用于存放用户需要的特殊数据</span></span><br><span class="line">            <span class="comment">// 可以在判断中进行索引 不指定默认为 undefined 为 false</span></span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&quot;每日清单&quot;</span>&#125;,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 独享路由守卫 仅有前置 无后置</span></span><br><span class="line">            <span class="attr">beforeEnter</span>:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(...)&#123;</span><br><span class="line">                   <span class="title function_">next</span>()</span><br><span class="line">                   &#125;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-组件内路由守卫"><a href="#3-组件内路由守卫" class="headerlink" title="3.组件内路由守卫"></a>3.组件内路由守卫</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">mounted()&#123;</span><br><span class="line">        // 通过路由器规则 进该组件时被调用</span><br><span class="line">        // 在beforeEnter 之前</span><br><span class="line">        // to 一定是该组件路由</span><br><span class="line">        beforeRouteEnter(to,from,next)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        // 通过路由器规则 离开该组件时被调用</span><br><span class="line">        // from 一定是该组件路由</span><br><span class="line">        beforeRouteLeave(to,from,next)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="11-浏览器路由模式"><a href="#11-浏览器路由模式" class="headerlink" title="11.浏览器路由模式"></a>11.浏览器路由模式</h2><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash 带 # 兼容性好 不美观 </span></span><br><span class="line"><span class="comment">// history 不带 # 兼容性差(相对) 美观 会寻找服务器路径资源 容易出错(后端解决)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 设置模式</span></span><br><span class="line">    <span class="attr">mode</span>:history,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="12-打包-上传服务器"><a href="#12-打包-上传服务器" class="headerlink" title="12.打包 上传服务器"></a>12.打包 <strong>上传服务器</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; npm run build</span><br><span class="line"><span class="comment">// 生成 dist 文件夹</span></span><br><span class="line"><span class="comment">// 为打包后的 css js html 文件</span></span><br><span class="line"><span class="comment">// 直接点击 index.html 无法运行必须在服务器部署</span></span><br></pre></td></tr></table></figure><p><strong>如何部署服务器</strong></p><p>node.js <strong>express</strong> 框架</p><p>-&gt;npm init</p><p>-&gt;text_serve 包名</p><p>-&gt;npm i express</p><p><strong>中间件解决 history 模式 404问题</strong></p><p>-&gt;npm i connect-history-api-fallback</p><p>&#x2F;&#x2F; 在 server.js 同级目录下 新建 js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> history = <span class="built_in">require</span>(<span class="string">&#x27;connect-history-api-fallback&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决history 404 问题</span></span><br><span class="line">app.<span class="title function_">use</span>(history)</span><br><span class="line"><span class="comment">// 默认选择 index.html</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(__dirname+<span class="string">&quot;./static&quot;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/person&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5005</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功了!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="13-Vue-UI-组件库"><a href="#13-Vue-UI-组件库" class="headerlink" title="13.Vue UI 组件库"></a>13.Vue UI 组件库</h2><p>7.1 移动端常用组件库</p><ul><li>Vant <a href="https://youzan.github.io/vante">https://youzan.github.io/vante</a></li><li>Cube UI <a href="https://didi.github.io/cube-ui">https://didi.github.io/cube-ui</a></li><li>Mint Ul <a href="http://mint-ui.github.io/">http://mint-ui.github.io</a></li></ul><p>7.2PC端常用UI组件库</p><ul><li>Element Ul <a href="https://element.eleme.cn/">https://element.eleme.cn</a></li><li>lView Ul <a href="https://www.iviewui.com/">https://www.iviewui.com</a></li><li>ant design <a href="https://ant.design/index-cn">Ant Design - 一套企业级 UI 设计语言和 React 组件库</a></li></ul><p><strong>直接用就行</strong></p><p>此处介绍Element UI</p><p>-&gt;npm i element-ui</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入全部样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处use 后 会注册全部组件为全局组件</span></span><br><span class="line"><span class="comment">// 引入的 js 非常大 7.2M(别用)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>按需引入</strong></p><p>-&gt; npm install babel-plugin-component -D <strong>按需引入的库</strong> -D为开发依赖(开发环境)</p><p>-&gt;npm install babel-preset-es2015 –save</p><p>-&gt;npm install –save-dev @babel&#x2F;cli</p><p><strong>需要修改 babel.config.js 配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>,</span><br><span class="line">    [<span class="string">&#x27;es2015&#x27;</span>, &#123; <span class="attr">modules</span>: <span class="literal">false</span> &#125;],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;component&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">libraryName</span>: <span class="string">&#x27;element-ui&#x27;</span>,</span><br><span class="line">        <span class="attr">styleLibraryName</span>: <span class="string">&#x27;theme-chalk&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需引入 </span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Button</span>,<span class="title class_">Row</span>,...&#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="comment">// 配置之后会引入需要的 css 而不是全部css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Button 的组件名 可以自定义</span></span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line"><span class="title class_">VUe</span>.<span class="title function_">component</span>(<span class="title class_">Button</span>.<span class="property">name</span>,<span class="title class_">Button</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue2】入门学习笔记-02</title>
      <link href="/2022/12/12/Vue2-02/"/>
      <url>/2022/12/12/Vue2-02/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2入门学习笔记"><a href="#Vue2入门学习笔记" class="headerlink" title="Vue2入门学习笔记"></a>Vue2入门学习笔记</h1><blockquote><p>Vue2入门必备！</p><p>⭐关注我查看更多配套笔记</p><p>学习视频：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/">https://www.bilibili.com/video/BV1Zy4y1K7SH/</a></p><p>【尚硅谷Vue全家桶】</p><p>本博客是对该视频内容的整理以及加入自己的理解 <strong>想全面学习的推荐大家去看原视频</strong></p></blockquote><h2 id="1-Vue脚手架基础"><a href="#1-Vue脚手架基础" class="headerlink" title="1.Vue脚手架基础"></a>1.Vue脚手架基础</h2><p>官方提供的 Vue 官方 标准开发工具</p><p>官方文档:<a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p><p>Vue CLI(command line interface)脚手架</p><p><strong>0.配置淘宝镜像 不然会很慢 甚至安装失败</strong></p><p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p><strong>1.全局安装@vue&#x2F;cli</strong></p><p>npm install -g @vue&#x2F;cli</p><p><strong>2.切换到对应目录</strong> 创建脚手架</p><p>vue create vue_projectone</p><p>输入后会选择 <strong>使用Vue的版本</strong>  2&#x2F;3&#x2F;自定义</p><p>bable : ES6 语法转换为 ES5</p><p>eslint : 语法检查工具 检查代码是否合理</p><p>选择好之后输入回车</p><p><strong>进行如下操作</strong></p><ul><li>cd 项目名</li><li>npm run serve</li></ul><p>之后后开始编译代码</p><p><strong>停止终端运行 ctrl + c 连续按两次 y&#x2F;n 输入什么都会关闭</strong></p><h3 id="脚手架结构讲解"><a href="#脚手架结构讲解" class="headerlink" title="脚手架结构讲解"></a>脚手架结构讲解</h3><p><strong>src</strong></p><ul><li>main.js <strong>整个项目的入口文件</strong></li><li>App.vue</li><li>.gitignore git <strong>忽略上传git文件的 配置</strong></li><li>babel.config.js <strong>babel的配置文件</strong></li><li>package.json <strong>npm包配置文件</strong><ul><li>serve <strong>代码执行后直接运行 man.js</strong></li><li>build <strong>构建 css js html</strong></li><li>lint <strong>进行语法检查</strong></li></ul></li><li>package-lock.json <strong>包版本控制文件</strong></li><li>README.md <strong>教程</strong></li></ul><p>app.vue</p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220409160558455.png" alt="image-20220409160558455"></p><p><strong>app.vue内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot;&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Welcome to Your Vue.js App&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 导入vue</span><br><span class="line">import HelloWorld from &#x27;./components/HelloWorld.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">   /*写样式*/</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>public &#x3D;&gt; index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 针对IE浏览器的一个特殊配置,含义是让IE浏览器以最高的渲染级别渲染页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启移动端的理想视口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 favicon.ico  &lt;%= BASE_URL %&gt; 代表“./”底层有处理--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--会将 package.json 中的内容当作标题 webpack相关内容 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--当浏览器不支持js时 noscript会渲染noscript的标签--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--容器--&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析render函数"><a href="#分析render函数" class="headerlink" title="分析render函数"></a>分析render函数</h3><p>引入的是残缺的Vue 不含模板解析器 </p><p><strong>需要自己使用render</strong> #省体积 省空间</p><p><strong>或者自己引入完整版vue</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// h 官方说法是 createElement 是一个函数</span></span><br><span class="line">    <span class="comment">// createElement(&quot;h1&quot;,&quot;你好啊&quot;) 生成&lt;h1&gt;你好啊&lt;/h1&gt;</span></span><br><span class="line">    <span class="comment">// 传入 组件 为渲染组件</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于不同版本的Vue:</span></span><br><span class="line"><span class="comment">1.vue.js 与vue.runtime.xxx.js的区别:</span></span><br><span class="line"><span class="comment">(1).vue.js是完整版的Vue，包含:核心功能+模板解析器。</span></span><br><span class="line"><span class="comment">(2).vue.runtime.xxx.js是运行版的Vue，只包含:核心功能;没有模板解析器。</span></span><br><span class="line"><span class="comment">2.因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement的数去指定具体内容。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="2-脚手架配置"><a href="#2-脚手架配置" class="headerlink" title="2.脚手架配置"></a>2.脚手架配置</h2><p>Vue脚手架隐藏了所有webpack相关的配置，若想查看具体的webpakc配置，请执</p><p><strong>vue inspect &gt; output.js</strong></p><p>&#x2F;&#x2F; 仅仅是输出让你看的文件 在这里更改是无效的</p><h3 id="如何自行配置？"><a href="#如何自行配置？" class="headerlink" title="如何自行配置？"></a>如何自行配置？</h3><p><a href="https://cli.vuejs.org/zh/config/">配置参考 | Vue CLI (vuejs.org)</a></p><p>在 package.json 同级目录下创建 <strong>vue.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Commonjs 的暴露</span></span><br><span class="line"><span class="comment">// node.js 使用的 commonjs的暴露 不能用ES6</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">pages</span>: &#123;</span><br><span class="line">    <span class="attr">index</span>: &#123;</span><br><span class="line">      <span class="comment">// page 的入口</span></span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;src/index/main.js&#x27;</span>,</span><br><span class="line">      <span class="comment">// 模板来源</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">// 在 dist/index.html 的输出</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">// 当使用 title 选项时，</span></span><br><span class="line">      <span class="comment">// template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;Index Page&#x27;</span>,</span><br><span class="line">      <span class="comment">// 在这个页面中包含的块，默认情况下会包含</span></span><br><span class="line">      <span class="comment">// 提取出来的通用 chunk 和 vendor chunk。</span></span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&#x27;chunk-vendors&#x27;</span>, <span class="string">&#x27;chunk-common&#x27;</span>, <span class="string">&#x27;index&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当使用只有入口的字符串格式时，</span></span><br><span class="line">    <span class="comment">// 模板会被推导为 `public/subpage.html`</span></span><br><span class="line">    <span class="comment">// 并且如果找不到的话，就回退到 `public/index.html`。</span></span><br><span class="line">    <span class="comment">// 输出文件名会被推导为 `subpage.html`。</span></span><br><span class="line">    <span class="attr">subpage</span>: <span class="string">&#x27;src/subpage/main.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=yellow>关闭语法检查</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lintOnSave</span>:<span class="literal">false</span> <span class="comment">//与page平级</span></span><br></pre></td></tr></table></figure><h2 id="3-ref属性"><a href="#3-ref属性" class="headerlink" title="3.ref属性"></a>3.ref属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">&quot;title&quot;</span>&gt;</span>H1标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">School</span> <span class="attr">ref</span>=<span class="string">&quot;sc&quot;</span>&gt;</span>H1标签<span class="tag">&lt;/<span class="name">School</span>&gt;</span> 组件标签使用</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// vuecomponent 对象属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">title</span>) <span class="comment">// 获取真实dom</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可在此处操作DOM</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">sc</span>) <span class="comment">// 获得vc对象</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.被用来给元素或子组件注册引用信息（id的替代者）</span></span><br><span class="line"><span class="comment">2.应用在htm1标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象(vc)</span></span><br><span class="line"><span class="comment">3.使用方式:</span></span><br><span class="line"><span class="comment">打标识:&lt;h1 ref=&quot;xxx &quot;&gt;.....&lt;/h1&gt;或&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</span></span><br><span class="line"><span class="comment">获取: this.$refs.xxx</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-props配置"><a href="#4-props配置" class="headerlink" title="4.props配置"></a>4.props配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;!-- 传入data参数 --&gt;</span><br><span class="line">        &lt;Student name=&quot;李四&quot; sex=&quot;女&quot; age=&quot;18&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;!-- age不绑定为字符串 无法使用数字计算</span><br><span class="line">可以使用绑定 --&gt;</span><br><span class="line">        &lt;Student name=&quot;李四&quot; sex=&quot;女&quot; :age=&quot;18&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 加入此项配置项 接收数据</span></span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>],</span><br><span class="line">    <span class="comment">// 第二种写法 限制类型</span></span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">sex</span>:<span class="title class_">String</span>,</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 第三种写法</span></span><br><span class="line">    <span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">// 指定类型</span></span><br><span class="line">    <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">// 是否为必须的参数</span></span><br><span class="line">    <span class="attr">default</span>:<span class="string">&quot;王二&quot;</span>, <span class="comment">// 不传参默认为该值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// props 中接收的数据无法更改 会报错</span></span><br><span class="line"><span class="comment">// 强行更改方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">props</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>],</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            myAge = <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修改 myAge 代替 age</span></span><br><span class="line">    <span class="comment">// props 优先级更高 会优先展示</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// props 不能传入 vue 已经使用的属性</span></span><br><span class="line"><span class="comment">// ref key ...</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 配置项props</span></span><br><span class="line">功能:让组件接收外部传过来的数据</span><br><span class="line"><span class="code">(1).传递数据:</span></span><br><span class="line"><span class="code">&lt;Demo name=&quot;xxx&quot;/&gt;</span></span><br><span class="line"><span class="code">(2).接收数据:</span></span><br><span class="line"><span class="code">第一种方式(只接收)∶</span></span><br><span class="line"><span class="code">props:[&quot;name&quot;]</span></span><br><span class="line"><span class="code">第二种方式(限制类型):</span></span><br><span class="line"><span class="code">props:&#123;</span></span><br><span class="line"><span class="code">name: Number</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">第三种方式(限制类型、限制必要性、指定默认值):</span></span><br><span class="line"><span class="code">    props:&#123;</span></span><br><span class="line"><span class="code">    name:&#123;</span></span><br><span class="line"><span class="code">    type:String, // 指定类型</span></span><br><span class="line"><span class="code">    required:true, // 是否为必须的参数</span></span><br><span class="line"><span class="code">    default:&quot;王二&quot;, // 不传参默认为该值</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">备注: props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告,</span><br><span class="line">若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</span><br></pre></td></tr></table></figure><h2 id="5-mixin-混入"><a href="#5-mixin-混入" class="headerlink" title="5.mixin(混入)"></a>5.mixin(混入)</h2><p>mixin.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//两个组件共同使用相同的配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">x</span>:<span class="number">200</span>,</span><br><span class="line">            <span class="attr">y</span>:<span class="number">200</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue中的script</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入一个混合组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&quot;../mixin&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;School&quot;</span>,</span><br><span class="line">    <span class="comment">// 复用配置</span></span><br><span class="line">     <span class="attr">mixins</span>:[minxin,mixin2],</span><br><span class="line">    <span class="comment">// 数据重复</span></span><br><span class="line">    <span class="comment">// 不破坏原有数据 将现有数据与原有数据整合 如果重复现有数据优先级更高</span></span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="attr">x</span>:<span class="number">300</span>,</span><br><span class="line">            <span class="attr">y</span>:<span class="number">200</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生命周期 mounted 等挂载函数 混入会执行相同两段代码</span></span><br><span class="line">    <span class="comment">// 来者不拒 均会执行</span></span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;多次重复执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局混合</span></span><br><span class="line"><span class="comment">// main.js 中</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&quot;../mixin&quot;</span>;</span><br><span class="line"><span class="comment">// vm 与 vc 均会执行该函数</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-插件"><a href="#6-插件" class="headerlink" title="6.插件"></a>6.插件</h2><p><strong>聚合代码</strong> 书写全局配置</p><p>在 src 添加 plugs.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 该参数 为 Vue的构造函数</span></span><br><span class="line">    <span class="title function_">install</span>(<span class="params">Vue,x,y,z</span>)&#123;</span><br><span class="line">        <span class="comment">// 全局过滤器</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;mySlice&quot;</span>,<span class="title function_">fuction</span>(<span class="params">value</span>)&#123;&#125;);</span><br><span class="line">    <span class="comment">// 全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;fbind&quot;</span>,&#123;&#125;);</span><br><span class="line"><span class="comment">// 定义混入</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给Vue原型添加方法 vm 与 vc 均能使用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">()=&gt;</span>&#123;<span class="title function_">alert</span>(<span class="string">&quot;你好啊&quot;</span>)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入插件 </span></span><br><span class="line"><span class="keyword">import</span> plugs <span class="keyword">from</span> <span class="string">&quot;../plugs.js&quot;</span></span><br><span class="line"><span class="comment">// 在声明 vm 之前开启插件</span></span><br><span class="line"><span class="comment">// 能接收多个 参数 但是第一个必须是插件名 install的第一个参数必须为 Vue</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugs,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局声明之后 可在 全部 vm vc 中使用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-scoped样式-x2F-less-编译"><a href="#7-scoped样式-x2F-less-编译" class="headerlink" title="7.scoped样式 &#x2F; less 编译"></a>7.scoped样式 &#x2F; less 编译</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    /* 加入scoped之后 各个css之间相互独立 不互相影响 */</span><br><span class="line">    /* 一般app组件中 不会使用scoped */</span><br><span class="line">    /* 使css样式局部生效 */</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">    /* 支持使用less */</span><br><span class="line">    /* 需要安装包 less-loader */</span><br><span class="line">    /* 需要考虑兼容性问题 */</span><br><span class="line">    /* 安装对应版本的 less-loader 不然会报错 */ </span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="8-给兄弟组件传参"><a href="#8-给兄弟组件传参" class="headerlink" title="8.给兄弟组件传参"></a>8.给兄弟组件传参</h2><p>1.传给父元素 (props传给父元素一个方法)</p><p>2.由父元素传给子元素的兄弟元素</p><p>（9. 中含其他方法 使用ref与自定义事件 与mounted）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;School :receive=&quot;receive&quot;&gt;&lt;/School&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        name:&quot;Compents&quot;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            receive(x)&#123;</span><br><span class="line">                console.log(&#x27;我是app组件我收到了数据&#x27;,x)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>School.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    export default&#123;</span><br><span class="line">        name:&quot;School&quot;,</span><br><span class="line">        props:[&quot;receive&quot;],</span><br><span class="line">        method:&#123;</span><br><span class="line">            add(x)&#123;</span><br><span class="line">                receive(x);</span><br><span class="line">                // 可在子元素调用父元素的方法</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="9-组件的自定义事件"><a href="#9-组件的自定义事件" class="headerlink" title="9.组件的自定义事件"></a>9.组件的自定义事件</h2><p>1.js内置事件 click keyup 等</p><p>2.自定义事件</p><p>app.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Student v-on:atguigu=&quot;getStudentName&quot;&gt;&lt;/Student&gt;</span><br><span class="line">&lt;Student ref=&quot;studnet&quot;&gt;&lt;/Student&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#123;</span><br><span class="line">        // 挂载mounted 子传父</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            // $on 当atguigu事件触发的时候</span><br><span class="line">            this.$refs.student.$on(&#x27;atguigu&#x27;,this.getStudentName)</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">getStudentName(name)&#123;</span><br><span class="line">                console.log(&quot;获得name数据&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Student.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1 @click=&quot;ad&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#123;</span><br><span class="line">        // props:[&#x27;getStudentName&#x27;],</span><br><span class="line">        // 触发事件 子传父</span><br><span class="line">        methods:&#123;</span><br><span class="line">            ad()&#123;</span><br><span class="line">                // 触发事件 使用方法 $emit</span><br><span class="line">                this.$emit(&#x27;atguigu&#x27;,this.name)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="10-解除绑定自定义事件"><a href="#10-解除绑定自定义事件" class="headerlink" title="10.解除绑定自定义事件"></a>10.解除绑定自定义事件</h2><p>Student.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1 @click=&quot;unBind&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#123;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            unBind()&#123;</span><br><span class="line">                // 触发事件 使用方法 $emit</span><br><span class="line">                this.$emit(&#x27;atguigu&#x27;,this.name)</span><br><span class="line">                // 解绑单个自定义事件</span><br><span class="line">                this.$off(&#x27;atguigu&#x27;)</span><br><span class="line">                // 解绑多个自定义事件</span><br><span class="line">                // 传入数组</span><br><span class="line">                this.$off([&#x27;atguigu&#x27;,&#x27;...&#x27;,&#x27;...&#x27;])</span><br><span class="line">                // 解绑全部自定义事件</span><br><span class="line">                this.$off()</span><br><span class="line">               // 摧毁 vc实例 自定义事件解绑(全部失效)</span><br><span class="line">                this.$destroy()</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="11-全局事件总线"><a href="#11-全局事件总线" class="headerlink" title="11.全局事件总线"></a>11.全局事件总线</h2><p>设计一个不在任何组件内的组件 <strong>作为全部事件的中转站</strong></p><p>A中触发自定义事件 中转X 触发C的操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在所有组件都能访问的地方添加 数据对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以使用 $on $off $emit</span></span><br></pre></td></tr></table></figure><p>1.windows 2.VueCompents(需要改原型)</p><p>使用 Vue  在main.js中操作</p><p>VueCompent对象的____proto____指向Vue的原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js 中添加 &#x27;X&#x27; 傀儡 作为 vm / vc 可以使用 $on $emit $off</span></span><br><span class="line"><span class="comment">// 则傀儡必须为 Vue 实例 vm</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&quot;app&quot;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span>; <span class="comment">//全局事件总线</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他 vc 中使用全局事件总线</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">methods</span>:&#123;</span><br><span class="line">            <span class="title function_">unBind</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="comment">// 触发事件 使用方法 $emit</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 解绑全部自定义事件</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$bus</span>.$off()</span><br><span class="line">               <span class="comment">// 摧毁 全局事件总线 vm 实例 自定义事件解绑(全部失效)</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$bus</span>.$destroy()</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">beforDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">// 在在被摧毁之前解绑该组件 在总线中的事件</span></span><br><span class="line">            <span class="comment">// 解绑单个自定义事件</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&#x27;atguigu&#x27;</span>)</span><br><span class="line">                <span class="comment">// 解绑多个自定义事件</span></span><br><span class="line">                <span class="comment">// 传入数组</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$bus</span>.$off([<span class="string">&#x27;atguigu&#x27;</span>,<span class="string">&#x27;...&#x27;</span>,<span class="string">&#x27;...&#x27;</span>])</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220418175658554.png" alt="image-20220418175658554"></p><h2 id="12-消息订阅与发布"><a href="#12-消息订阅与发布" class="headerlink" title="12.消息订阅与发布"></a>12.消息订阅与发布</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">消息订阅与发布</span></span><br><span class="line"><span class="comment">1.订阅消息︰消息名</span></span><br><span class="line"><span class="comment">2.发布消息︰消息内容</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要使用 消息订阅与发布的库</span></span><br><span class="line"><span class="comment">// 在各种框架里都能使用 不局限于 vue </span></span><br><span class="line"><span class="comment">// 有多种库存在 消息订阅与发布是一种理念</span></span><br><span class="line"><span class="comment">// 这里推荐 : pubsub-js </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于 $bus</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅消息</span></span><br><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br><span class="line"><span class="comment">// 在mounted中订阅</span></span><br><span class="line"><span class="comment">// 需要设置id// 非vue管理必须使用箭头函数!!</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">this</span>.<span class="property">pubid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&quot;消息名&quot;</span>,<span class="title function_">fuction</span>(<span class="params">msgName,data</span>)&#123;</span><br><span class="line"><span class="comment">// msgName 为消息名 </span></span><br><span class="line">    <span class="comment">// data 为之后的传递的参数</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 或者传入 在 methods 中配置的方法 this 不会出问题</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable language_">this</span>.<span class="property">pubid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&quot;消息名&quot;</span>,<span class="variable language_">this</span>.<span class="property">method</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在销毁前取消丁订阅 beforDistory</span></span><br><span class="line">pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubid</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布消息</span></span><br><span class="line">pubsub.<span class="title function_">publish</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">666</span>);</span><br></pre></td></tr></table></figure><h2 id="13-nextTick"><a href="#13-nextTick" class="headerlink" title="13.$nextTick"></a>13.$nextTick</h2><p>在DOM节点 下一次更新之后 执行回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">editInput</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>)=&gt;</span>&#123;</span><br><span class="line">    element.<span class="title function_">focus</span>();</span><br><span class="line">&#125;)</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue2】入门学习笔记-01</title>
      <link href="/2022/12/11/Vue2-01/"/>
      <url>/2022/12/11/Vue2-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2入门学习笔记"><a href="#Vue2入门学习笔记" class="headerlink" title="Vue2入门学习笔记"></a>Vue2入门学习笔记</h1><blockquote><p>Vue2入门必备！</p><p>⭐关注我查看更多配套笔记</p><p>学习视频：<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH/">https://www.bilibili.com/video/BV1Zy4y1K7SH/</a></p><p>【尚硅谷Vue全家桶】</p><p>本博客是对该视频内容的整理以及加入自己的理解 <strong>想全面学习的推荐大家去看原视频</strong></p></blockquote><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1.基础"></a>1.基础</h2><h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1.特点"></a>1.特点</h3><p>1.采用组件化模式，提高代码复用率，让代码更好维护</p><p>2.声明式编码，让编码人员无需直接操作DOM，提高开发效率</p><p>3.使用虚拟DOM + 优秀的Diff算法，尽量复用DOM节点</p><h3 id="2-官网内容"><a href="#2-官网内容" class="headerlink" title="2.官网内容"></a>2.官网内容</h3><p>官方网址 ：cn.vuejs.org</p><h3 id="3-下载及安装"><a href="#3-下载及安装" class="headerlink" title="3.下载及安装"></a>3.下载及安装</h3><h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4><p>在官方网址 :  <a href="https://cn.vuejs.org/v2/guide/installation.html">安装 — Vue.js (vuejs.org)</a></p><p>需要配置以下内容：</p><h4 id="2-安装开发者工具"><a href="#2-安装开发者工具" class="headerlink" title="2.安装开发者工具"></a>2.安装开发者工具</h4><p>一、Chrome浏览器安装方式：<br>①：点击右上角三个点<br>②：点击更多工具<br>③：点击扩展程序<br>④：点击右上角的开发者模式，将他启用<br>⑤：将下载的Vue.crx文件直接拖动到浏览器窗口即可<br>二：Edge浏览器安装方式<br>①：点击浏览器右上角的三个点<br>②：点击扩展<br>③：点击左下角的开发人员模式，将他启用<br>④：将Vue.crx文件拖动到浏览器即可</p><p><a href="https://pan.baidu.com/s/1MtYvMPew4lb14piIrs9x6w">https://pan.baidu.com/s/1MtYvMPew4lb14piIrs9x6w</a><br>提取码：6666 </p><h4 id="3-关闭开发者提示"><a href="#3-关闭开发者提示" class="headerlink" title="3.关闭开发者提示"></a>3.关闭开发者提示</h4><p>Vue.config.productionTip &#x3D; false;</p><h2 id="2-基础使用"><a href="#2-基础使用" class="headerlink" title="2.基础使用"></a>2.基础使用</h2><p>&#x2F;&#x2F; 非Vue控制的函数尽量写成箭头函数</p><h3 id="1-基础Vue全局配置-传参-x2F-使用对象方法"><a href="#1-基础Vue全局配置-传参-x2F-使用对象方法" class="headerlink" title="1.基础Vue全局配置(传参)&#x2F;使用对象方法"></a>1.基础Vue全局配置(传参)&#x2F;使用对象方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- 使用模板语法去渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!-- &#123;&#123; &#125;&#125; 中必须写JS表达式！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>现在时间是&#123;&#123;Date.now()&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 表达式: 一个表达式会生成一个值,可以放在任何一个需要值的地方 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务 通常为css选择器字符串</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;  <span class="comment">//储存数据,只能在指定的容器中去使用,值写成一个对象</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只会选择第一个 root </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 容器与Vue是一一对应的！！！</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;.root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// data第二种写法 函数式写法 vue自动调用该函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 不能使用箭头函数 this 会指向windows</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:<span class="title function_">fuction</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;QQQ&#x27;</span>, <span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用方法修改参数</span></span></span><br><span class="line"><span class="language-javascript">    y.$mount(<span class="string">&#x27;#root&#x27;</span>)  <span class="comment">// s修改实例构造器中的 element</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-模板语法"><a href="#2-模板语法" class="headerlink" title="2.模板语法"></a>2.模板语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">插值语法 </span></span><br><span class="line"><span class="comment">功能:用于解析标签体内容 </span></span><br><span class="line"><span class="comment">写法:&#123;[xXXx&#125;]. xxx是js表达式,且可以直接读取到data中的所有属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">指令语法 设置元素的属性</span></span><br><span class="line"><span class="comment">功能:用于解析标签（包括:标签属性、标签体内容、绑定事件.....)</span></span><br><span class="line"><span class="comment">举例:v-bind:href=&quot;&quot;xxx”或简写为:href=&quot;xxx&quot;&quot;，xxx同样要js表达式，且可以直接读取到data中的所有属性</span></span><br><span class="line"><span class="comment">备注:Vue中有很多的指令，且形式都是: v-????，此处我们只是拿v-bind举个例子。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-数据绑定"><a href="#3-数据绑定" class="headerlink" title="3.数据绑定"></a>3.数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;url&quot;</span>&gt;</span>我是单项绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:value</span>=<span class="string">&quot;url&quot;</span>&gt;</span>我是双向绑定</span><br><span class="line"><span class="comment">&lt;!-- v-model 只能用在表单类元素上 输入类元素 含有value值 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">// 绑定后 为js表达式 不绑定为字符串</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;url&quot;</span>&gt;</span>我是单项绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;url&quot;</span>&gt;</span>我是双向绑定</span><br></pre></td></tr></table></figure><h3 id="4-MVVM模型"><a href="#4-MVVM模型" class="headerlink" title="4.MVVM模型"></a>4.MVVM模型</h3><p>1.M:模型(Model):对应data中的数据</p><p>2.V:视图(View):模板</p><p>3.VM:视图模型(ViewModel) : Vue 实例对象心</p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220328193753311.png" alt="image-20220328193753311"></p><p><strong>因此 vm 也经常作为 Vue的实例对象</strong></p><p><strong>const vm &#x3D; new Vue({})</strong></p><h3 id="5-vm"><a href="#5-vm" class="headerlink" title="5.vm"></a>5.vm</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    vm中实例含有的内容</span></span><br><span class="line"><span class="comment">    可以直接在 Vue 模板中直接使用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; $mount(&#x27;#root&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">&#123;&#123;name&#125;&#125; 存在是因为会自动添加到 vm 对象中</span><br></pre></td></tr></table></figure><h3 id="6-进阶技术-Object方法"><a href="#6-进阶技术-Object方法" class="headerlink" title="6.进阶技术 Object方法"></a>6.进阶技术 Object方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 object.defineProperty 添加对象成员</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(对象名,添加的键,添加的值)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,keys,&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">18</span>, <span class="comment">// 设置 </span></span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>, <span class="comment">// 控制属性是否可以被枚举(被遍历)  默认为false</span></span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>, <span class="comment">// 控制属性是否可以被修改 默认为false</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span>, <span class="comment">// 控制属性石佛可以被删除 默认为false</span></span><br><span class="line">    <span class="comment">// 当有人读取person的age属性时，get函数(getter)就会被调用,且返回值就是age的值</span></span><br><span class="line">    <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 简写</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// getter 与 setter</span></span><br><span class="line"><span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        number = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="7-数据代理"><a href="#7-数据代理" class="headerlink" title="7.数据代理"></a>7.数据代理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据代理:通过一个对象代理对另一个对象中属性的操作（读/写) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    obj1 = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">x</span>:<span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    obj2 = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">y</span>:<span class="number">200</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2,x,&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>:obj1.<span class="property">x</span>, <span class="comment">// 此处与 obj1 的属性绑定</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><strong>数据代理在 Vue 中的应用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">vm 实例中的数据 与构造器中 data中的数据绑定</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220328202239085.png" alt="image-20220328202239085"></p><p><strong>_data实际上里面为数据劫持</strong></p><h3 id="8-事件的基本使用"><a href="#8-事件的基本使用" class="headerlink" title="8.事件的基本使用"></a>8.事件的基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事件触发回调函数 --&gt;</span></span><br><span class="line">    // 需要传参可以加括号 但是 event会消失 加入 $event Vue帮助传参</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>  <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo($event,66)&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 事件修饰符 + 简写 @   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;methods&quot;</span>&gt;</span>点我跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 阻止跳转</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.prevent: 阻止默认事件（常用);</span></span><br><span class="line"><span class="comment">2.stop:阻止事件冒泡（常用);</span></span><br><span class="line"><span class="comment">3.once:事件只触发一次（常用）;</span></span><br><span class="line"><span class="comment">4.capture:使用事件的捕获模式;</span></span><br><span class="line"><span class="comment">5.self:只有event.target是当前操作的元素是才触发事件;</span></span><br><span class="line"><span class="comment">6.passive:事件的默认行为立即执行，无需等待事件回调执行完毕;</span></span><br><span class="line"><span class="comment">// 默认的时候 先执行回调函数 等待回调函数执行完毕再运行默认事件(鼠标下滑等)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    x = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123; <span class="comment">// 数据劫持 + 数据代理</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123; <span class="comment">// methods中的函数可以加到data中 但会拖累Vue</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showInfo</span>(<span class="params">event,number</span>)&#123; <span class="comment">// event 为事件对象</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;同学你好&quot;</span> + number);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">aClick</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;同学你好&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-键盘事件"><a href="#9-键盘事件" class="headerlink" title="9.键盘事件"></a>9.键盘事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="comment">&lt;!-- 这里的.enter代表按下键盘enter键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span>@<span class="attr">keyup.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        el : <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;尚硅谷&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:<span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">1.Vue中常用的按赞别名：</span><br><span class="line">回车 =&gt;enter</span><br><span class="line">删除=&gt;delete（捕获“删除”和“退格”键)</span><br><span class="line">退出=&gt;esc</span><br><span class="line">空格=&gt;space</span><br><span class="line">换行=&gt;tab</span><br><span class="line">上=&gt;up</span><br><span class="line">下=&gt;down</span><br><span class="line">左=&gt;left</span><br><span class="line">右=&gt; right</span><br><span class="line">2.Vue未提供别名的按健，可以使用按键原始的key值去绑定，但注意要转为kebab-case(短横线命名)</span><br><span class="line">caps-lock 大小写键别名</span><br><span class="line">3.系统修饰健(用法特殊): ctrl、alt、shift、meta(win)</span><br><span class="line">(1).配合keyup使用:按下修饰键的同时，再按下其他键，随后释放其他键。事件才被触发。</span><br><span class="line">(2).配合keydown使用:正常触发事件。</span><br><span class="line">4.也可以使用keyCode去指定具休的按键(不推荐)</span><br><span class="line">5.Vue.config.keyCodes.自定义健名=健码,可以去定制按健别名</span><br></pre></td></tr></table></figure><p>&#x2F;*</p><p> 修饰符是可以连续使用的(链式调用)</p><ul><li>@click.prevent.top</li><li>@keydown.alt.y &#x2F;* y 与 alt 一起按下 *&#x2F;</li></ul><p>*&#x2F;</p><h3 id="10-计算属性"><a href="#10-计算属性" class="headerlink" title="10.计算属性"></a>10.计算属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    // 模板中可以写一些简单的语句 但是不能写 Vm中没有的！</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name = !name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span>@<span class="attr">keyup.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        el : <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// firstname 叫属性</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &quot;尚硅谷&quot; 叫属性值</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstname</span>:<span class="string">&quot;尚硅谷&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastname</span>:<span class="string">&quot;snowman&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// method中的方式不会缓存 会被多次调用</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// computed的属性叫做计算属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 输入 &#123;&#123;fullname&#125;&#125; 自动调用fullname get函数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullname</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fullname 被读取调用get</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 此处的 this 被 Vue 配置为 vm</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// get 什么时候调用?</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 1.初次读取fullname时 2.所依赖的数据改变时</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="variable language_">this</span>.<span class="property">lastname</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fullname 被修改时 调用set</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">firstname</span> = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">lastname</span> = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 1.定义:要用的属性不有在,要通过已有属性计算得来。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 2.原理:底层什助了objcet.defineproperty方法捉供的getter和setter.</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 3.get函数什么时候执行?</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        (1).初次读取时会执行一次.</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        (2).当依赖的数据发生改变时会被再次调用。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 4.优势:与methods实现和比,内部有级存机制(复用）。效率更高。调试方便</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        * 5,备注:</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1.计算届性最终会出现在vm上,直接读取使用即可..</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2.如果计算属性要被修返，那必须写set函数夫响应修改，fset中要引起计算时依赖的数据发牛</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 简写方式 确定只读不改</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fullname</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="string">&quot;小猪佩奇&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-监视属性"><a href="#11-监视属性" class="headerlink" title="11.监视属性"></a>11.监视属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span> (&#123;</span><br><span class="line">    <span class="comment">// 监视在 vm 中的值是否发生变化 变化时 作何处理</span></span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">        <span class="attr">isHot</span>:&#123;</span><br><span class="line">            <span class="comment">// 初始化时调用一次handler</span></span><br><span class="line">            <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// isHot发生变化 传参 newValue为新的值 oldValue 为旧的值</span></span><br><span class="line"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue,oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第二种写法 添加到vm实例中</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="line">    <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue,oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="12-深度监视"><a href="#12-深度监视" class="headerlink" title="12.深度监视"></a>12.深度监视</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue可以检测多层级的监视 watch不检测</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* (1).vue中的watch默认不监测对象内部值的改变(一层）。</span></span><br><span class="line"><span class="comment">* (2).配置deep:true可以监测对象内部值改变(多层）。</span></span><br><span class="line"><span class="comment">* 备注:</span></span><br><span class="line"><span class="comment">* (1).vue自身可以监测对象内部值的改变，但vue提供的watch默认不可以!</span></span><br><span class="line"><span class="comment">* (2).使用watch时根据数据的具体结构,决定是否采用深度监视。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span> (&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="attr">number</span>:&#123;</span><br><span class="line">            <span class="attr">a</span>:<span class="number">500</span>,</span><br><span class="line">            <span class="attr">b</span>:<span class="number">600</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;逯少&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监视在 vm 中的值是否发生变化 变化时 作何处理</span></span><br><span class="line"><span class="attr">watch</span>:&#123;</span><br><span class="line">        <span class="attr">number</span>:&#123;</span><br><span class="line">    <span class="comment">// 开启深度监视 不开启的话number的成员不会被检测</span></span><br><span class="line">    <span class="attr">deep</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 初始化时调用一次handler</span></span><br><span class="line">            <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// number发生变化 传参 newValue为新的值 oldValue 为旧的值</span></span><br><span class="line"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue,oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// watch 简写 前提: 不需要 deep immediate</span></span><br><span class="line">    <span class="attr">watch</span>:&#123;</span><br><span class="line">        <span class="title function_">name</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name被改变了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// $符简写</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="title function_">fuction</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;isHot被改变了&quot;</span>);</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure><h3 id="13-watch与computed对比"><a href="#13-watch与computed对比" class="headerlink" title="13.watch与computed对比"></a>13.watch与computed对比</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// computed更容易写</span></span><br><span class="line"><span class="comment">// 但是computed无法进行异步操作</span></span><br><span class="line"><span class="comment">// computed 需要返回值 异步会出错</span></span><br><span class="line"><span class="comment">// watch中的异步操作</span></span><br><span class="line"> <span class="title function_">handler</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1s passing number改变了&quot;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* computed和lwatch之间的区别:</span></span><br><span class="line"><span class="comment">* 1.computed能完成的功能。 watch都可以完成..</span></span><br><span class="line"><span class="comment">* 2.watch能完成的功能，computed不一定能完成，例如: watch可以进行异步糅作。</span></span><br><span class="line"><span class="comment">*1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象。</span></span><br><span class="line"><span class="comment">*2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等)，最好写成箭头函数。这样this的指向才是vm或组件实例对象。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="14-修改-x2F-绑定-class"><a href="#14-修改-x2F-绑定-class" class="headerlink" title="14.修改&#x2F;绑定 class"></a>14.修改&#x2F;绑定 class</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Vue 会解析数组/对象 --&gt; Js表达式</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 需要的 class 是动态的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;yourclass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绑定class样式--数组写法，适用丁:要绑定的样式个数不确定、名字也不确定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;list_arr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--绑定class样式对象写法。适用于:要绑定的样式个数确定、名宁也确定但要动态决定用不川--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Style行内样式 传入Style对象 或者 数组内包含Style对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">---&gt; 经过Vue解析之后会变成</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic normal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic class1 class2 class3&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;list_arr&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic class1 class3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red;fontSize:10px;backgroundColir:grzy;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">yourclass</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">list_arr</span>:[<span class="string">&#x27;class1&#x27;</span>,<span class="string">&#x27;class2&#x27;</span>,<span class="string">&#x27;class3&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">class1</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">class2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">class3</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 此处的样式必须为 css 中有的样式 font-size --&gt; fontSize 多单词拆散大小写拼接</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>:red,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fontSize</span>:10px,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">backgroundColir</span>:grzy,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="15-条件渲染"><a href="#15-条件渲染" class="headerlink" title="15.条件渲染"></a>15.条件渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- v-show 与 v-if show控制display属性 if直接会删除/保留该元素 --&gt;</span></span><br><span class="line">“” 中填写 js 表达式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>我的display属性为none<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span>我的display属性为默认<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 与js语法中if else if else 的用法一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>我不会在DOM中出现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;false&quot;</span>&gt;</span>我不会在DOM中出现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">&quot;false&quot;</span>&gt;</span>我不会在DOM中出现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;true&quot;</span>&gt;</span>我会在DOM中出现<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">需要整体隐藏的时候 使用 template不会影响结构 </span><br><span class="line">div也可以 注意css</span><br><span class="line">template 只能与 v-if 配合 v-show 会失效</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">&quot;表达式&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="16-列表渲染-循环"><a href="#16-列表渲染-循环" class="headerlink" title="16.列表渲染  循环"></a>16.列表渲染  循环</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每个li标签需要有其单独唯一的标识 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span>&#123;&#123;p.id&#125;&#125;-&#123;&#123;p.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- p为persons中的元素 index为其对应的下标 index写key比较方便  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;p.id&#125;&#125;-&#123;&#123;p.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- v-for 可以遍历 数组,对象,字符串  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 遍历对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in Obj&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&quot;001&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;001&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&quot;002&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;002&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&quot;003&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;003&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Obj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;王二&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">adress</span>:<span class="string">&quot;二仙桥&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">v-for指令:</span></span><br><span class="line"><span class="comment">1.用于展示列表数据</span></span><br><span class="line"><span class="comment">2.语法:v-for=&quot;(item,index) in xxx&quot; : key=&quot;yyy&quot;</span></span><br><span class="line"><span class="comment">3.可逅历:数组、对象、字符串（用的很少)、指定次致（用的很少)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="17-循环-key详解"><a href="#17-循环-key详解" class="headerlink" title="17.循环 key详解"></a>17.循环 key详解</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 虚拟Dom 对比算法 ！！！ 对比后转化为真实 Dom</span></span><br><span class="line"><span class="comment">key 如果用 index进行绑定会出问题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一定要使用唯一的 key 可以使用数据库中的主键 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">面试题: react、 vue中的key有什么作用?（key的内部原理)</span></span><br><span class="line"><span class="comment">1，虚拟DON中&#x27;key的作用:</span></span><br><span class="line"><span class="comment">key是虚拟DOA对象的标识，当状态中的数据发生变化时，Vue会根据【新数据】生成【新的虚拟DO随后Vue进行【新虚抵DOM】 与【旧虚拟DOM】的差异比较，比较规则如下:</span></span><br><span class="line"><span class="comment">2.对比规则:</span></span><br><span class="line"><span class="comment">(1).旧虚拟DOM中找到了与新虚拟DO相同的key:</span></span><br><span class="line"><span class="comment">若虚拟DOM中内容没变,百接使用之前的真实DOM</span></span><br><span class="line"><span class="comment">若虚拟DOM中内容变了，则生成新的真实DOM。随后替换掉页面中之前的真实DOM</span></span><br><span class="line"><span class="comment">(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</span></span><br><span class="line"><span class="comment">创建新的真实DOM。随后渲染到到页面。</span></span><br><span class="line"><span class="comment">3.用index作为key 可能会引发的问题:</span></span><br><span class="line"><span class="comment">1.若对数据进行:逆序添加、逆序剧除等破环顺序操作:</span></span><br><span class="line"><span class="comment">会产生没有必要的真实DOM更新==&gt;界面效果没问题,但效率低。</span></span><br><span class="line"><span class="comment">2．如果结构中还包含输入类的DOM:</span></span><br><span class="line"><span class="comment">会产生错误DOM更新==&gt;界面有问题</span></span><br><span class="line"><span class="comment">4．开发中如何选择key?:</span></span><br><span class="line"><span class="comment">1.最好使用每条数据的唯一标识作为key，I比如id、于机号、身份证号、学号等唯一伯。</span></span><br><span class="line"><span class="comment">2.如果不存在对数据的逆序添加、逆序朋除等破坏顺序操作，仅用于渲染列表用于展示使用index作为key是没有问题的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="18-列表过滤-搜索"><a href="#18-列表过滤-搜索" class="headerlink" title="18.列表过滤 (搜索)"></a>18.列表过滤 (搜索)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p in filterPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span>&#123;&#123;p.id&#125;&#125;-&#123;&#123;p.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>id降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#id&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sortType</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">keyWord</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&quot;001&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;001&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&quot;002&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;002&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&quot;003&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;003&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;<span class="attr">id</span>:<span class="string">&quot;004&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;004&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filterPersons</span>:[],</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用watch 实现搜索方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">keyWords</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handler</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">filterPersons</span> = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(bal) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 计算属性实现</span></span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filterPersons</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">     <span class="comment">// 实现 分需求 排序功能</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filterPersons</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> list = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sortType</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                list.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1.age,p2.age</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> === <span class="number">1</span> ? p1.<span class="property">age</span>-p2.<span class="property">age</span> : p2.<span class="property">age</span>-p1.<span class="property">age</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">return</span> list;             </span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&quot;abc&quot;.indexOf(&#x27;&#x27;) &gt;&gt;&gt; 0  //空字符串返回值为 0</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Vue检测数据的原理"><a href="#3-Vue检测数据的原理" class="headerlink" title="3.Vue检测数据的原理"></a>3.Vue检测数据的原理</h2><h3 id="19-Vue检测数据改变的原理"><a href="#19-Vue检测数据改变的原理" class="headerlink" title="19.Vue检测数据改变的原理"></a>19.Vue检测数据改变的原理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 更改数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue无法检测</span></span></span><br><span class="line"><span class="language-javascript">vm.<span class="property">persons</span>[<span class="number">0</span>] = &#123;<span class="attr">id</span>:<span class="string">&quot;001&quot;</span>, <span class="attr">name</span>:<span class="string">&quot;马老师&quot;</span>, <span class="attr">age</span>:<span class="number">50</span>&#125;; </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Vue可以检测</span></span></span><br><span class="line"><span class="language-javascript">vm.<span class="property">persons</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&quot;马老师&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">vm.<span class="property">persons</span>[<span class="number">0</span>].<span class="property">age</span> = <span class="number">50</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data --&gt; 加工后 vm 对象中生成 _data 包含data中的属性 并创建对应的getter setter方法</span></span></span><br><span class="line"><span class="language-javascript">    get set 方法 在调用 对象时会自动被更改</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 直接 object.defineProperty 对应的对象 调用get set 会陷入死循环</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 创建检测实例对象 进行数据代理</span></span></span><br><span class="line"><span class="language-javascript">    data = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&quot;王二&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> obs = <span class="keyword">new</span> <span class="title class_">Observer</span>(data)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obs)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">observer</span>(<span class="params">obj</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//汇总对象中所有的属性形成一个数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> keys = object.<span class="title function_">keys</span>(obj)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//遍历</span></span></span><br><span class="line"><span class="language-javascript">        keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">k</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            object.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>,k,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> obj[k]</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    obj[k] = val</span></span><br><span class="line"><span class="language-javascript">                &#125; </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">!!!!!! 检测原理就是使用setter 考虑非常周到！递归数组都能检测！！！</span><br></pre></td></tr></table></figure><h3 id="20-vue-set-添加响应式属性"><a href="#20-vue-set-添加响应式属性" class="headerlink" title="20.vue.set 添加响应式属性"></a>20.vue.set 添加响应式属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _data 与 data 是数据代理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 方法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(target,key,value)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">student</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;王二&quot;</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(vm.<span class="property">_data</span>.<span class="property">student</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;王二&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vm 方法</span></span><br><span class="line">vm.$set(vm.<span class="property">student</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;王二&quot;</span>)</span><br><span class="line">vm.$set(vm.<span class="property">_data</span>.<span class="property">student</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;王二&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 局限性 set 不能 将 vm 作为 target</span></span><br></pre></td></tr></table></figure><h3 id="21-Vue检测数组"><a href="#21-Vue检测数组" class="headerlink" title="21.Vue检测数组"></a>21.Vue检测数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不能直接更改数组中的数值 vue 无法检测</span></span><br><span class="line"><span class="comment">// Vue 可以检测程序员使用数组方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下均为可以修改数组的方法</span></span><br><span class="line"><span class="comment">/*push/pop 末尾 添加/删除 元素</span></span><br><span class="line"><span class="comment">*unshift/shift 开头 添加/删除 元素</span></span><br><span class="line"><span class="comment">*splice 替换元素</span></span><br><span class="line"><span class="comment">*sort 排序</span></span><br><span class="line"><span class="comment">*reverse 反转</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个push不一样 vue 对push进行了覆写 原push功能 + 响应式的更改</span></span><br><span class="line">vm.<span class="property">data</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="property">push</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> </span><br><span class="line">&gt;&gt;&gt; <span class="literal">false</span> </span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Vue监视数据的原理:</span></span><br><span class="line"><span class="comment">1. vue会监视data中所有层次的数据。</span></span><br><span class="line"><span class="comment">    2．如何监测对象中的裁据</span></span><br><span class="line"><span class="comment">    通过setter实现监视,且要在new Vue时就传入要监测的数据。</span></span><br><span class="line"><span class="comment">        (1).对象中后追加的属性，Vue默认不做响应式处理</span></span><br><span class="line"><span class="comment">(2).如T给后添加的属性做响应式，请使用如下API:</span></span><br><span class="line"><span class="comment">        vue.set(target.propertyName/index.value)</span></span><br><span class="line"><span class="comment">                vm.$set(target. propertyName/index. value)</span></span><br><span class="line"><span class="comment">3。如何监测数组中的数据</span></span><br><span class="line"><span class="comment">    通过包裹数组更新元素的方法实现,本质就是做了两件事:</span></span><br><span class="line"><span class="comment">        (1).调用原生对应的方法对数组进行更新。</span></span><br><span class="line"><span class="comment">(2).重新解析模板,进而更新页面。</span></span><br><span class="line"><span class="comment">4.在Vue修改数组中的某个元素一定要用如下方法:</span></span><br><span class="line"><span class="comment">1.使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</span></span><br><span class="line"><span class="comment">2.Vue.set()或vm.$set()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">特别注意: Vue.set()和 vm.$set()不能给vm 或 vm的根数据对象添加属性 !!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="4-收集表单数据"><a href="#4-收集表单数据" class="headerlink" title="4.收集表单数据"></a>4.收集表单数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">若:&lt;input type=&quot;text&quot;/&gt;，则v-model收集的是value值。用户输入的就是value值。</span></span><br><span class="line"><span class="comment">若:&lt;input type=&quot;radio&quot; /&gt;，则v-model收集的是value值，且要给标签配置value值。</span></span><br><span class="line"><span class="comment">若:&lt;input type=&quot;checkbox&quot;/&gt;</span></span><br><span class="line"><span class="comment">1.没有配置input的value属性，那么收集的就是checked（勾选or未勾选，是布尔值)</span></span><br><span class="line"><span class="comment">2.配置input的value属性:</span></span><br><span class="line"><span class="comment">(1)v-model的初始值是非数组，那么收集的就是checked（勾选 or未勾选，是布尔值)</span></span><br><span class="line"><span class="comment">         (2)v-model的初始值是数组，那么收集的的就是value组成的数组</span></span><br><span class="line"><span class="comment">备注:v-model的三个修饰符:</span></span><br><span class="line"><span class="comment">lazy:失去焦点再收集数据</span></span><br><span class="line"><span class="comment">number:输入字符串转为有效的数字</span></span><br><span class="line"><span class="comment">trim:输入首尾空格过滤</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="5-过滤器"><a href="#5-过滤器" class="headerlink" title="5.过滤器"></a>5.过滤器</h2><p><strong>day.js 库可以格式化时间</strong></p><p>在BootCDN可以查询到开源的所有库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">过滤器 可以在 v-bind 与 插值语法中使用</span><br><span class="line"><span class="comment">&lt;!-- 语法: 本质是一种函数 可以连续链式使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>现在是: &#123;&#123;time | timeFormater() | otherFilters()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局过滤器 任意 Vue 实例对象中均可使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;mySlice&quot;</span>,<span class="title function_">fuction</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">return</span> <span class="string">&quot;过滤后的内容&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">timeFormater</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&quot;value为传入time的值 返回值作为 表达式展示的值&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-Vue指令汇总"><a href="#6-Vue指令汇总" class="headerlink" title="6.Vue指令汇总"></a>6.Vue指令汇总</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">v-bind :单向绑定解析表达式,可简写为:XXX</span></span><br><span class="line"><span class="comment">v-model :双向数据绑定</span></span><br><span class="line"><span class="comment">v-for :遍历数组/对象/字符串</span></span><br><span class="line"><span class="comment">v-on: 绑定事件监听,可简写为@</span></span><br><span class="line"><span class="comment">v-if:条件渲染（动态控制节点是否存存在)</span></span><br><span class="line"><span class="comment">v-else:条件渲染《动态控制节点是否存存在)</span></span><br><span class="line"><span class="comment">v-show:条件渲染(动态控制节点是否展示)</span></span><br><span class="line"><span class="comment">v-text: 替换整个 Value</span></span><br><span class="line"><span class="comment">v-html: 可以渲染html语法 &lt;h1&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">// v-html 具有安全性问题 xss注入</span></span><br><span class="line"><span class="comment">v-cloak: 加入该属性与css display:none Vue接管时会删除该属性</span></span><br><span class="line"><span class="comment">v-once: 让某元素只渲染一次</span></span><br><span class="line"><span class="comment">v-pre: 阻止Vue解析doucment</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">v-html指令:</span></span><br><span class="line"><span class="comment">1.作用:向指定节点中渲染包含html结构的内容</span></span><br><span class="line"><span class="comment">2.与插值语法的区别:</span></span><br><span class="line"><span class="comment">(1).v-html会替换掉节点中所有的内容，&#123;&#123;xx&#125;&#125;则不会</span></span><br><span class="line"><span class="comment">(2).v-html可以识别html结构。</span></span><br><span class="line"><span class="comment">3.严重注意: v-html有安全性问题!!!!</span></span><br><span class="line"><span class="comment">(1).在网站上动态渲染任意HTAL是非常危险的,容易导致XSS攻击.</span></span><br><span class="line"><span class="comment">(2).一定要在可信的内容上使用v-html，永不要用在用户提交的内容上!</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">v-cloak指令（没有值):</span></span><br><span class="line"><span class="comment">1.本质是一个特殊属性，Vue实例创建完中并接管容器后。会删掉v-cloak属性.</span></span><br><span class="line"><span class="comment">2.使用css配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">v-once指令:</span></span><br><span class="line"><span class="comment">1.v-once所在节点在初次动态渲染后,就视为静态内容了</span></span><br><span class="line"><span class="comment">2.以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">v-pre指令:</span></span><br><span class="line"><span class="comment">1.跳过其所在节点的编译过程。</span></span><br><span class="line"><span class="comment">2.可利用它跳过:没有使用指令语法、没有使用插值语法的节点，会加快编译。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-Vue自定义指令"><a href="#7-Vue自定义指令" class="headerlink" title="7.Vue自定义指令"></a>7.Vue自定义指令</h2><h3 id="7-1函数式"><a href="#7-1函数式" class="headerlink" title="7.1函数式"></a>7.1函数式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">n放大十倍之后的值为:</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// element传入对应元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// binding 与 big中的表达式绑定 &quot;n&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定时会自动调用 但是 input 还没有放入doucment fouce不起作用</span></span></span><br><span class="line"><span class="language-javascript">            element.<span class="title function_">fouce</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// big函数何时会被调用?</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.指令与元素成功绑定时(一开始)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2对象式"><a href="#7-2对象式" class="headerlink" title="7.2对象式"></a>7.2对象式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 此对象中所有的 this 均指向 window</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 绑定时被调用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">bind</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 元素被插入时被调用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">inserted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 模板被重新解析时被调用</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-3小总结"><a href="#7-3小总结" class="headerlink" title="7.3小总结"></a>7.3小总结</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">注意: 命名时尽量不要用大写字母 Vue 会将大写字母 解析成小写字母</span><br><span class="line">v-set-member  ---&gt;   `set-member`()&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 全局Vue directives配置</span></span></span><br><span class="line"><span class="language-javascript">   <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;big&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        ...</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-生命周期函数"><a href="#8-生命周期函数" class="headerlink" title="8.生命周期函数"></a>8.生命周期函数</h2><h3 id="8-1-mounted介绍"><a href="#8-1-mounted介绍" class="headerlink" title="8.1 mounted介绍"></a>8.1 mounted介绍</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 动态绑定数据需要写成对象的形式</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;&#123;opacity: opacity&#125;&quot;</span>&gt;</span> 我会变化透明度 <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">// 属性值与键名重复时可简写   </span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">opacity</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methos</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">change</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 非 Vue 管理的函数 使用箭头函数 this 指向 Vue(vm)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 透明变化的字体</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">16</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// mounted 挂载</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Vue完成模板的解析并且把初始的真实Dom放入元素页面后(挂在完毕后) 执行mounted</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 写入此处执行一次 mounted 函数 进行计时器函数书写</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 第一次放入时执行 ！！！ 之后的叫更新 重新解析 不执行 mounted </span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 透明变化的字体</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">16</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 生命周期函数有多种 这里只介绍了 mounted</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2挂载流程"><a href="#8-2挂载流程" class="headerlink" title="8.2挂载流程"></a>8.2挂载流程</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="attr">tmplate</span>:<span class="string">`在此处可以写 HTML 语法 替换模板`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化:生命周期、事件，但数据代理还未开始。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时:无法通过vm访问到data中的数据. methods中的方法。</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化:数据监测、数据代理。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 此时:可以通过vm访问到data中的数据、 methods中配置的方法。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 还未进行模板解析 生成虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.页面呈现的是未经Vue编译的DOM结构。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.所有对DOM的操作，最终都不奏效。 因为在最后会使用 虚拟DOM 替换全部真实DOM</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 进行模板解析之后 虚拟DOM已生成</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将虚拟DOM转为真实DOM插入页面</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.页面中呈现的是经过Vue编译的DOM.</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.对DOM的操作均有效(尽可能避免)。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 至此初始化过程结束，一般在此进行:</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 开启定时器、发送网络请求、订阅消息、绑定自定义事件、等初始化操作。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3更新流程"><a href="#8-3更新流程" class="headerlink" title="8.3更新流程:"></a>8.3更新流程:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 此时:数据是新的，但页面是旧的，即:页面尚未和数据保持同步。</span></span><br><span class="line">    <span class="title function_">beforeUpdate</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 虚拟DOM 之间的对比 修改虚拟DOM</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此时:数据是新的，页面也是新的，即:页面和数据保持同步。</span></span><br><span class="line">    <span class="title function_">updated</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="8-4销毁流程"><a href="#8-4销毁流程" class="headerlink" title="8.4销毁流程"></a>8.4销毁流程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 $destroy() 方法 完全销毁vm实例 不会进行管理 DOM页面了</span></span><br><span class="line"><span class="comment">// vm.$destroy()</span></span><br><span class="line"><span class="comment">// 原生DOM事件不会被销毁 会销毁自定义事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="comment">// 此时: vm中所有的: data、methods、指令等等，都处于可用状态，马上要执行销毁过程,一般在此阶段:关闭定时器、取消订阅消息.解绑自定义事件等收尾操作</span></span><br><span class="line">    <span class="title function_">beforeDestory</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// vm 已销毁</span></span><br><span class="line">    <span class="title function_">destoryed</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200729110210796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ3MjM5NDE0,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="9-组件化"><a href="#9-组件化" class="headerlink" title="9.组件化 !!!"></a>9.组件化 !!!</h2><p><strong>定义：现实应用中局部功能代码和资源的集合</strong></p><p>非单文件组件∶</p><p>​一个文件中包含有n个组件。</p><p>单文件组件∶</p><p>​一个文件中只包含有1个组件。</p><h3 id="1-非单文件组件"><a href="#1-非单文件组件" class="headerlink" title="1.非单文件组件"></a>1.非单文件组件</h3><h4 id="1-非单文件组件-1"><a href="#1-非单文件组件-1" class="headerlink" title="1.非单文件组件"></a>1.非单文件组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.创建组件</span></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">    <span class="comment">// 不需要写 el 配置项 只可配置在 vm 实例中</span></span><br><span class="line">    <span class="comment">// el:&quot;&quot;,</span></span><br><span class="line">    <span class="comment">// data 必须写成函数式</span></span><br><span class="line">    <span class="comment">// 对象式引用的内存中同一地址 会出错(Vue报错阻止)</span></span><br><span class="line">    <span class="attr">data</span>:<span class="title function_">fouction</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">HTML 内容</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.注册组件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span><br><span class="line">    <span class="comment">// 注册组件 (局部注册)</span></span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        <span class="attr">xuexiao</span>:school,</span><br><span class="line">        <span class="comment">// 以下可以简写</span></span><br><span class="line">        <span class="attr">school</span>:school,</span><br><span class="line">        <span class="comment">// 简写形式</span></span><br><span class="line">        school</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局注册组件</span></span><br><span class="line"><span class="comment">// Vue.component(&#x27;hello&#x27;,hello)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.在HTML页面中使用组件标签</span></span><br><span class="line"><span class="comment">// 在 components 中配置的键值</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&lt;div id=&quot;root&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;xuexiao&gt;&lt;/xuexiao&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>注意点</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue推荐组件命名</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">单个单词: 1.school (纯小写) 2.School(首字母大写)</span></span><br><span class="line"><span class="comment">多个单词: 1.my-school (用-连接) 2.MySchool(每个单词首字母均大写 需要Vue脚手架支持)</span></span><br><span class="line"><span class="comment">备注:</span></span><br><span class="line"><span class="comment">(1).组件名尽可能回避HTAL中已有的元素名称，例如:h2、H2都不行。</span></span><br><span class="line"><span class="comment">(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</span></span><br><span class="line"><span class="comment">Vue.extend(&#123;</span></span><br><span class="line"><span class="comment">name:&quot;显示的名字&quot;,</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.关于组件标签:</span></span><br><span class="line"><span class="comment">第一种写法:&lt;school&gt;&lt;/school&gt;</span></span><br><span class="line"><span class="comment">第二种写法:&lt;school/&gt;</span></span><br><span class="line"><span class="comment">备注:不用使用脚手架时,&lt;schoo1/&gt;会导致后续组件不能渲染。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.一个简写方式:</span></span><br><span class="line"><span class="comment">const school = Vue.extend(options）可简写为: const school = options</span></span><br><span class="line"><span class="comment">// 如果注册时传入的是对象 Vue 自动调用Vue.extend</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="2-组件的嵌套"><a href="#2-组件的嵌套" class="headerlink" title="2.组件的嵌套"></a>2.组件的嵌套</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以在组件中书写组件配置项</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extends</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">compoent</span>:&#123;</span><br><span class="line">        scool,</span><br><span class="line">        <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="title class_">Vue</span>.<span class="title function_">extends</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">&quot;...&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;</span><br><span class="line">        scool,</span><br><span class="line">        <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-Vue-Compoent构造函数"><a href="#3-Vue-Compoent构造函数" class="headerlink" title="3. Vue Compoent构造函数"></a>3. Vue Compoent构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vm 实例中 包含 $children 为数组 数组中包含着 <span class="title class_">VueComponent</span> 对象</span><br><span class="line"><span class="title class_">VueComponent</span> 中 的成员变量以及方法与 vm 一致</span><br><span class="line"></span><br><span class="line">组件: 不可使用 el  data 只能使用函数式</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">关于VueComponent:</span></span><br><span class="line"><span class="comment">1.school组件木质是一个名为vueComponent的构造函数，且不是和序员定义的，是Vue.extend生成的。</span></span><br><span class="line"><span class="comment">2.我们只需要写&lt;school/&gt;或&lt;schoolx&lt;/school&gt;.Vue解析时会帮我们创建school组件的实例对象,Nvue帮我们执行的:new VueComponent(options)-</span></span><br><span class="line"><span class="comment">3.特别注意:每次调用vue.extend，返回的都是一个全新的VueComponent! !!!</span></span><br><span class="line"><span class="comment">4.关于this指向:</span></span><br><span class="line"><span class="comment">(1).组件配置中:</span></span><br><span class="line"><span class="comment">data函数、methods中的函数、watch中的函数、computed中的函数它们的this均是【VueComponent实例对象】</span></span><br><span class="line"><span class="comment">(2).new Vue配置中: </span></span><br><span class="line"><span class="comment">data雨数、methods中的函数、watch中的函数、computed中的函数它们的this均是【Vue实例对象】.</span></span><br><span class="line"><span class="comment">5.VueComponent的实例对象，以后简称vc（也可称之为:组件实例对象）.</span></span><br><span class="line"><span class="comment">Vue的实例对象,以后简称vm.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="4-重要的内置关系"><a href="#4-重要的内置关系" class="headerlink" title="4.重要的内置关系"></a>4.重要的内置关系</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.一个重要的内置关系:VueComponent.prototype._proto_ == Vue.prototype</span></span><br><span class="line"><span class="comment">2.为什么要有这个关系:让组件实例对象(vc）可以访问到Vue原型上的属性、方法。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>Vue 与 VueComponent 的关系</strong></p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220405165609319.png" alt="image-20220405165609319"></p><h3 id="2-单文件组件"><a href="#2-单文件组件" class="headerlink" title="2.单文件组件"></a>2.单文件组件</h3><p>{webpack, 脚手架} 编译使用 .vue后缀</p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220405182255969.png" alt="image-20220405182255969"></p><p><strong>App结构</strong></p><p><strong>安装 VSCODE vue 插件 后 输入 &lt;v  tab键就可自动补全</strong></p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220405182553879.png" alt="image-20220405182553879"></p><p><strong>main.js</strong></p><p><img src="https://snowblogimg-1309537252.cos.ap-nanjing.myqcloud.com/img/image-20220405182701818.png" alt="image-20220405182701818"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
